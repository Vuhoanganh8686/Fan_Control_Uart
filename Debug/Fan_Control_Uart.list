
Fan_Control_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d08  08003d08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001972  00000000  00000000  0002dc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0002f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b38  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016a9  00000000  00000000  00030c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e950  00000000  00000000  00032331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b309e  00000000  00000000  00040c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f3d1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031d8  00000000  00000000  000f3d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cb8 	.word	0x08003cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cb8 	.word	0x08003cb8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa92 	bl	80006f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f807 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f934 	bl	8000440 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f902 	bl	80003e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001dc:	f000 f854 	bl	8000288 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x18>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b09e      	sub	sp, #120	; 0x78
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f003 fd59 	bl	8003ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	223c      	movs	r2, #60	; 0x3c
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f003 fd4b 	bl	8003ca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021e:	2300      	movs	r3, #0
 8000220:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fd2a 	bl	8000c80 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000232:	f000 f935 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fd53 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800025c:	f000 f920 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000260:	f241 0302 	movw	r3, #4098	; 0x1002
 8000264:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800026a:	2300      	movs	r3, #0
 800026c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026e:	463b      	mov	r3, r7
 8000270:	4618      	mov	r0, r3
 8000272:	f001 ff79 	bl	8002168 <HAL_RCCEx_PeriphCLKConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800027c:	f000 f910 	bl	80004a0 <Error_Handler>
  }
}
 8000280:	bf00      	nop
 8000282:	3778      	adds	r7, #120	; 0x78
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09a      	sub	sp, #104	; 0x68
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800029c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
 80002b8:	615a      	str	r2, [r3, #20]
 80002ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	222c      	movs	r2, #44	; 0x2c
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fcf0 	bl	8003ca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002c8:	4b43      	ldr	r3, [pc, #268]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002ca:	4a44      	ldr	r2, [pc, #272]	; (80003dc <MX_TIM1_Init+0x154>)
 80002cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80002ce:	4b42      	ldr	r3, [pc, #264]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002d0:	224f      	movs	r2, #79	; 0x4f
 80002d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b40      	ldr	r3, [pc, #256]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002da:	4b3f      	ldr	r3, [pc, #252]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e2:	4b3d      	ldr	r3, [pc, #244]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002e8:	4b3b      	ldr	r3, [pc, #236]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ee:	4b3a      	ldr	r3, [pc, #232]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002f4:	4838      	ldr	r0, [pc, #224]	; (80003d8 <MX_TIM1_Init+0x150>)
 80002f6:	f002 f8e7 	bl	80024c8 <HAL_TIM_Base_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000300:	f000 f8ce 	bl	80004a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000308:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800030a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800030e:	4619      	mov	r1, r3
 8000310:	4831      	ldr	r0, [pc, #196]	; (80003d8 <MX_TIM1_Init+0x150>)
 8000312:	f002 faa5 	bl	8002860 <HAL_TIM_ConfigClockSource>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800031c:	f000 f8c0 	bl	80004a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000320:	482d      	ldr	r0, [pc, #180]	; (80003d8 <MX_TIM1_Init+0x150>)
 8000322:	f002 f928 	bl	8002576 <HAL_TIM_PWM_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800032c:	f000 f8b8 	bl	80004a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000334:	2300      	movs	r3, #0
 8000336:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000338:	2300      	movs	r3, #0
 800033a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800033c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000340:	4619      	mov	r1, r3
 8000342:	4825      	ldr	r0, [pc, #148]	; (80003d8 <MX_TIM1_Init+0x150>)
 8000344:	f002 ff56 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800034e:	f000 f8a7 	bl	80004a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000352:	2360      	movs	r3, #96	; 0x60
 8000354:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800035a:	2300      	movs	r3, #0
 800035c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800035e:	2300      	movs	r3, #0
 8000360:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000362:	2300      	movs	r3, #0
 8000364:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000366:	2300      	movs	r3, #0
 8000368:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800036a:	2300      	movs	r3, #0
 800036c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000372:	2200      	movs	r2, #0
 8000374:	4619      	mov	r1, r3
 8000376:	4818      	ldr	r0, [pc, #96]	; (80003d8 <MX_TIM1_Init+0x150>)
 8000378:	f002 f95e 	bl	8002638 <HAL_TIM_PWM_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000382:	f000 f88d 	bl	80004a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800039a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4619      	mov	r1, r3
 80003ba:	4807      	ldr	r0, [pc, #28]	; (80003d8 <MX_TIM1_Init+0x150>)
 80003bc:	f002 ff9a 	bl	80032f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80003c6:	f000 f86b 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003ca:	4803      	ldr	r0, [pc, #12]	; (80003d8 <MX_TIM1_Init+0x150>)
 80003cc:	f000 f8b2 	bl	8000534 <HAL_TIM_MspPostInit>

}
 80003d0:	bf00      	nop
 80003d2:	3768      	adds	r7, #104	; 0x68
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000028 	.word	0x20000028
 80003dc:	40012c00 	.word	0x40012c00

080003e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_USART2_UART_Init+0x58>)
 80003e6:	4a15      	ldr	r2, [pc, #84]	; (800043c <MX_USART2_UART_Init+0x5c>)
 80003e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_USART2_UART_Init+0x58>)
 80003ec:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f2:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_USART2_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_USART2_UART_Init+0x58>)
 8000406:	220c      	movs	r2, #12
 8000408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_USART2_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_USART2_UART_Init+0x58>)
 8000424:	f002 ffe4 	bl	80033f0 <HAL_UART_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800042e:	f000 f837 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000074 	.word	0x20000074
 800043c:	40004400 	.word	0x40004400

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <MX_GPIO_Init+0x5c>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <MX_GPIO_Init+0x5c>)
 800044c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_GPIO_Init+0x5c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_GPIO_Init+0x5c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <MX_GPIO_Init+0x5c>)
 8000464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_GPIO_Init+0x5c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_GPIO_Init+0x5c>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <MX_GPIO_Init+0x5c>)
 800047c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_GPIO_Init+0x5c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x44>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_TIM_Base_MspInit+0x38>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d10b      	bne.n	800051e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 800050c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40012c00 	.word	0x40012c00
 8000530:	40021000 	.word	0x40021000

08000534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a11      	ldr	r2, [pc, #68]	; (8000598 <HAL_TIM_MspPostInit+0x64>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d11c      	bne.n	8000590 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_TIM_MspPostInit+0x68>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <HAL_TIM_MspPostInit+0x68>)
 800055c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_TIM_MspPostInit+0x68>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800056e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000572:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000574:	2302      	movs	r3, #2
 8000576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000580:	2302      	movs	r3, #2
 8000582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <HAL_TIM_MspPostInit+0x6c>)
 800058c:	f000 f9fe 	bl	800098c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40012c00 	.word	0x40012c00
 800059c:	40021000 	.word	0x40021000
 80005a0:	48001000 	.word	0x48001000

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <HAL_UART_MspInit+0x7c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d128      	bne.n	8000618 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_UART_MspInit+0x80>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005f6:	230c      	movs	r3, #12
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000606:	2307      	movs	r3, #7
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 f9ba 	bl	800098c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40004400 	.word	0x40004400
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <MemManage_Handler+0x4>

0800063a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <UsageFault_Handler+0x4>

08000646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000674:	f000 f884 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ffea 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f003 fac7 	bl	8003c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fd79 	bl	80001c8 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	08003d10 	.word	0x08003d10
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	20000100 	.word	0x20000100

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_Init+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_Init+0x28>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f90d 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	200f      	movs	r0, #15
 800070c:	f000 f808 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff fecc 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x54>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x58>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f917 	bl	8000972 <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00e      	b.n	800076c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d80a      	bhi.n	800076a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f000 f8ed 	bl	800093a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_InitTick+0x5c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	20000008 	.word	0x20000008
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x20>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x24>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_IncTick+0x24>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200000fc 	.word	0x200000fc

080007a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <HAL_GetTick+0x14>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200000fc 	.word	0x200000fc

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0a      	blt.n	800084e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	490c      	ldr	r1, [pc, #48]	; (8000870 <__NVIC_SetPriority+0x4c>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084c:	e00a      	b.n	8000864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <__NVIC_SetPriority+0x50>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	3b04      	subs	r3, #4
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	440b      	add	r3, r1
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f1c3 0307 	rsb	r3, r3, #7
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf28      	it	cs
 8000896:	2304      	movcs	r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3304      	adds	r3, #4
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d902      	bls.n	80008a8 <NVIC_EncodePriority+0x30>
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3b03      	subs	r3, #3
 80008a6:	e000      	b.n	80008aa <NVIC_EncodePriority+0x32>
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43da      	mvns	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43d9      	mvns	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	4313      	orrs	r3, r2
         );
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3724      	adds	r7, #36	; 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f7ff ff8e 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff47 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff5c 	bl	8000808 <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff8e 	bl	8000878 <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5d 	bl	8000824 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffb0 	bl	80008e0 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099a:	e154      	b.n	8000c46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 8146 	beq.w	8000c40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d005      	beq.n	80009cc <HAL_GPIO_Init+0x40>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d130      	bne.n	8000a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d017      	beq.n	8000a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2203      	movs	r2, #3
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d123      	bne.n	8000abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	691a      	ldr	r2, [r3, #16]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	08da      	lsrs	r2, r3, #3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3208      	adds	r2, #8
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0203 	and.w	r2, r3, #3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80a0 	beq.w	8000c40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b00:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a57      	ldr	r2, [pc, #348]	; (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b18:	4a53      	ldr	r2, [pc, #332]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b42:	d019      	beq.n	8000b78 <HAL_GPIO_Init+0x1ec>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d013      	beq.n	8000b74 <HAL_GPIO_Init+0x1e8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <HAL_GPIO_Init+0x2e4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1e4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a47      	ldr	r2, [pc, #284]	; (8000c74 <HAL_GPIO_Init+0x2e8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1e0>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a46      	ldr	r2, [pc, #280]	; (8000c78 <HAL_GPIO_Init+0x2ec>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1dc>
 8000b64:	2304      	movs	r3, #4
 8000b66:	e008      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b68:	2305      	movs	r3, #5
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e004      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	f002 0203 	and.w	r2, r2, #3
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	4093      	lsls	r3, r2
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b8a:	4937      	ldr	r1, [pc, #220]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bbc:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f47f aea3 	bne.w	800099c <HAL_GPIO_Init+0x10>
  }
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48000800 	.word	0x48000800
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	48001000 	.word	0x48001000
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c90:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f001 b823 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 817d 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cbc:	4bbc      	ldr	r3, [pc, #752]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d00c      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc8:	4bb9      	ldr	r3, [pc, #740]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d15c      	bne.n	8000d8e <HAL_RCC_OscConfig+0x10e>
 8000cd4:	4bb6      	ldr	r3, [pc, #728]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d155      	bne.n	8000d8e <HAL_RCC_OscConfig+0x10e>
 8000ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cee:	fa93 f3a3 	rbit	r3, r3
 8000cf2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cf6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	095b      	lsrs	r3, r3, #5
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d102      	bne.n	8000d14 <HAL_RCC_OscConfig+0x94>
 8000d0e:	4ba8      	ldr	r3, [pc, #672]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	e015      	b.n	8000d40 <HAL_RCC_OscConfig+0xc0>
 8000d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d18:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d20:	fa93 f3a3 	rbit	r3, r3
 8000d24:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d30:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d3c:	4b9c      	ldr	r3, [pc, #624]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d44:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d48:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d4c:	fa92 f2a2 	rbit	r2, r2
 8000d50:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d54:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	f042 0220 	orr.w	r2, r2, #32
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	f002 021f 	and.w	r2, r2, #31
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 811f 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x334>
 8000d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8116 	bne.w	8000fb4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f000 bfaf 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9e:	d106      	bne.n	8000dae <HAL_RCC_OscConfig+0x12e>
 8000da0:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a82      	ldr	r2, [pc, #520]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e036      	b.n	8000e1c <HAL_RCC_OscConfig+0x19c>
 8000dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x158>
 8000dbe:	4b7c      	ldr	r3, [pc, #496]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a7b      	ldr	r2, [pc, #492]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b79      	ldr	r3, [pc, #484]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a78      	ldr	r2, [pc, #480]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e021      	b.n	8000e1c <HAL_RCC_OscConfig+0x19c>
 8000dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ddc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x184>
 8000dea:	4b71      	ldr	r3, [pc, #452]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a70      	ldr	r2, [pc, #448]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b6e      	ldr	r3, [pc, #440]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a6d      	ldr	r2, [pc, #436]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e00b      	b.n	8000e1c <HAL_RCC_OscConfig+0x19c>
 8000e04:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a69      	ldr	r2, [pc, #420]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a66      	ldr	r2, [pc, #408]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e1c:	4b64      	ldr	r3, [pc, #400]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	f023 020f 	bic.w	r2, r3, #15
 8000e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	495f      	ldr	r1, [pc, #380]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d059      	beq.n	8000efa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e46:	f7ff fcaf 	bl	80007a8 <HAL_GetTick>
 8000e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	e00a      	b.n	8000e66 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fcaa 	bl	80007a8 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b64      	cmp	r3, #100	; 0x64
 8000e5e:	d902      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	f000 bf43 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8000e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	095b      	lsrs	r3, r3, #5
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x218>
 8000e92:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	e015      	b.n	8000ec4 <HAL_RCC_OscConfig+0x244>
 8000e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eb4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ecc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ed0:	fa92 f2a2 	rbit	r2, r2
 8000ed4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ed8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000edc:	fab2 f282 	clz	r2, r2
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	f042 0220 	orr.w	r2, r2, #32
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	f002 021f 	and.w	r2, r2, #31
 8000eec:	2101      	movs	r1, #1
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ab      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1d0>
 8000ef8:	e05d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fc55 	bl	80007a8 <HAL_GetTick>
 8000efe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	e00a      	b.n	8000f1a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fc50 	bl	80007a8 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b64      	cmp	r3, #100	; 0x64
 8000f12:	d902      	bls.n	8000f1a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f000 bee9 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f2e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	095b      	lsrs	r3, r3, #5
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d102      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2cc>
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	e015      	b.n	8000f78 <HAL_RCC_OscConfig+0x2f8>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f50:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f68:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_RCC_OscConfig+0x330>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f80:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f84:	fa92 f2a2 	rbit	r2, r2
 8000f88:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f8c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	f002 021f 	and.w	r2, r2, #31
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ab      	bne.n	8000f04 <HAL_RCC_OscConfig+0x284>
 8000fac:	e003      	b.n	8000fb6 <HAL_RCC_OscConfig+0x336>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 817d 	beq.w	80012c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fcc:	4ba6      	ldr	r3, [pc, #664]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fd8:	4ba3      	ldr	r3, [pc, #652]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d172      	bne.n	80010ca <HAL_RCC_OscConfig+0x44a>
 8000fe4:	4ba0      	ldr	r3, [pc, #640]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d16c      	bne.n	80010ca <HAL_RCC_OscConfig+0x44a>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001002:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	fab3 f383 	clz	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	095b      	lsrs	r3, r3, #5
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <HAL_RCC_OscConfig+0x3a0>
 800101a:	4b93      	ldr	r3, [pc, #588]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0x3c8>
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001038:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	2202      	movs	r2, #2
 800104a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800104e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001052:	fa92 f2a2 	rbit	r2, r2
 8001056:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800105a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800105e:	fab2 f282 	clz	r2, r2
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f042 0220 	orr.w	r2, r2, #32
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	f002 021f 	and.w	r2, r2, #31
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00a      	beq.n	8001090 <HAL_RCC_OscConfig+0x410>
 800107a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d002      	beq.n	8001090 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f000 be2e 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b75      	ldr	r3, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	21f8      	movs	r1, #248	; 0xf8
 80010a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010ae:	fa91 f1a1 	rbit	r1, r1
 80010b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010ba:	fab1 f181 	clz	r1, r1
 80010be:	b2c9      	uxtb	r1, r1
 80010c0:	408b      	lsls	r3, r1
 80010c2:	4969      	ldr	r1, [pc, #420]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c8:	e0fd      	b.n	80012c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8088 	beq.w	80011ec <HAL_RCC_OscConfig+0x56c>
 80010dc:	2301      	movs	r3, #1
 80010de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	2301      	movs	r3, #1
 8001106:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fb4e 	bl	80007a8 <HAL_GetTick>
 800110c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fb49 	bl	80007a8 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d902      	bls.n	8001128 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	f000 bde2 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800113a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d102      	bne.n	8001158 <HAL_RCC_OscConfig+0x4d8>
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	e013      	b.n	8001180 <HAL_RCC_OscConfig+0x500>
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001170:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2202      	movs	r2, #2
 8001182:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001186:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800118a:	fa92 f2a2 	rbit	r2, r2
 800118e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001192:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001196:	fab2 f282 	clz	r2, r2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f042 0220 	orr.w	r2, r2, #32
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f002 021f 	and.w	r2, r2, #31
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0af      	beq.n	8001112 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	21f8      	movs	r1, #248	; 0xf8
 80011c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011d0:	fa91 f1a1 	rbit	r1, r1
 80011d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011dc:	fab1 f181 	clz	r1, r1
 80011e0:	b2c9      	uxtb	r1, r1
 80011e2:	408b      	lsls	r3, r1
 80011e4:	4920      	ldr	r1, [pc, #128]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
 80011ea:	e06c      	b.n	80012c6 <HAL_RCC_OscConfig+0x646>
 80011ec:	2301      	movs	r3, #1
 80011ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800120c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	461a      	mov	r2, r3
 8001214:	2300      	movs	r3, #0
 8001216:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fac6 	bl	80007a8 <HAL_GetTick>
 800121c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fac1 	bl	80007a8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d902      	bls.n	8001238 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	f000 bd5a 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800124a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d104      	bne.n	800126c <HAL_RCC_OscConfig+0x5ec>
 8001262:	4b01      	ldr	r3, [pc, #4]	; (8001268 <HAL_RCC_OscConfig+0x5e8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	e015      	b.n	8001294 <HAL_RCC_OscConfig+0x614>
 8001268:	40021000 	.word	0x40021000
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001284:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001290:	4bc8      	ldr	r3, [pc, #800]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2202      	movs	r2, #2
 8001296:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800129a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800129e:	fa92 f2a2 	rbit	r2, r2
 80012a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f042 0220 	orr.w	r2, r2, #32
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f002 021f 	and.w	r2, r2, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ad      	bne.n	8001222 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8110 	beq.w	80014fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d079      	beq.n	80013e0 <HAL_RCC_OscConfig+0x760>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4bab      	ldr	r3, [pc, #684]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	461a      	mov	r2, r3
 8001312:	2301      	movs	r3, #1
 8001314:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fa47 	bl	80007a8 <HAL_GetTick>
 800131a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e00a      	b.n	8001336 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fa42 	bl	80007a8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d902      	bls.n	8001336 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	f000 bcdb 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001350:	2202      	movs	r2, #2
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001358:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	fa93 f2a3 	rbit	r2, r3
 8001362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001374:	2202      	movs	r2, #2
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	fa93 f2a3 	rbit	r2, r3
 8001386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001398:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800139c:	2102      	movs	r1, #2
 800139e:	6019      	str	r1, [r3, #0]
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	fa93 f1a3 	rbit	r1, r3
 80013ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b6:	6019      	str	r1, [r3, #0]
  return result;
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0a0      	beq.n	8001320 <HAL_RCC_OscConfig+0x6a0>
 80013de:	e08d      	b.n	80014fc <HAL_RCC_OscConfig+0x87c>
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	fa93 f2a3 	rbit	r2, r3
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001402:	601a      	str	r2, [r3, #0]
  return result;
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800140c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	461a      	mov	r2, r3
 800141e:	2300      	movs	r3, #0
 8001420:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff f9c1 	bl	80007a8 <HAL_GetTick>
 8001426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142a:	e00a      	b.n	8001442 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff f9bc 	bl	80007a8 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d902      	bls.n	8001442 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	f000 bc55 	b.w	8001cec <HAL_RCC_OscConfig+0x106c>
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800146e:	2202      	movs	r2, #2
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f2a3 	rbit	r2, r3
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001492:	2202      	movs	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 80014b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ba:	2102      	movs	r1, #2
 80014bc:	6019      	str	r1, [r3, #0]
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fa93 f1a3 	rbit	r1, r3
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014d4:	6019      	str	r1, [r3, #0]
  return result;
 80014d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d197      	bne.n	800142c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 81a1 	beq.w	8001854 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d116      	bne.n	8001552 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	61d3      	str	r3, [r2, #28]
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800154a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800154c:	2301      	movs	r3, #1
 800154e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11a      	bne.n	8001594 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff f91d 	bl	80007a8 <HAL_GetTick>
 800156e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	e009      	b.n	8001588 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff f918 	bl	80007a8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e3b1      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_RCC_OscConfig+0x93c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0ef      	beq.n	8001574 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_OscConfig+0x940>
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a02      	ldr	r2, [pc, #8]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e03c      	b.n	800162c <HAL_RCC_OscConfig+0x9ac>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	10908120 	.word	0x10908120
 80015bc:	40007000 	.word	0x40007000
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x96a>
 80015d0:	4bc1      	ldr	r3, [pc, #772]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4ac0      	ldr	r2, [pc, #768]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	4bbe      	ldr	r3, [pc, #760]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4abd      	ldr	r2, [pc, #756]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	e020      	b.n	800162c <HAL_RCC_OscConfig+0x9ac>
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x994>
 80015fa:	4bb7      	ldr	r3, [pc, #732]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4ab6      	ldr	r2, [pc, #728]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4bb4      	ldr	r3, [pc, #720]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4ab3      	ldr	r2, [pc, #716]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x9ac>
 8001614:	4bb0      	ldr	r3, [pc, #704]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4aaf      	ldr	r2, [pc, #700]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4bad      	ldr	r3, [pc, #692]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4aac      	ldr	r2, [pc, #688]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001626:	f023 0304 	bic.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8081 	beq.w	8001740 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff f8b3 	bl	80007a8 <HAL_GetTick>
 8001642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff f8ae 	bl	80007a8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	; 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e345      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001668:	2202      	movs	r2, #2
 800166a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a6:	601a      	str	r2, [r3, #0]
  return result;
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0xa4c>
 80016c6:	4b84      	ldr	r3, [pc, #528]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	e013      	b.n	80016f4 <HAL_RCC_OscConfig+0xa74>
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016fc:	2102      	movs	r1, #2
 80016fe:	6011      	str	r1, [r2, #0]
 8001700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001704:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	fa92 f1a2 	rbit	r1, r2
 800170e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001712:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001716:	6011      	str	r1, [r2, #0]
  return result;
 8001718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800171c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	fab2 f282 	clz	r2, r2
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f002 021f 	and.w	r2, r2, #31
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d084      	beq.n	8001648 <HAL_RCC_OscConfig+0x9c8>
 800173e:	e07f      	b.n	8001840 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff f832 	bl	80007a8 <HAL_GetTick>
 8001744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f82d 	bl	80007a8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e2c4      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a8:	601a      	str	r2, [r3, #0]
  return result;
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0xb4e>
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0xb76>
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017fe:	2102      	movs	r1, #2
 8001800:	6011      	str	r1, [r2, #0]
 8001802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001806:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fa92 f1a2 	rbit	r1, r2
 8001810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001814:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001818:	6011      	str	r1, [r2, #0]
  return result;
 800181a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800181e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	fab2 f282 	clz	r2, r2
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d184      	bne.n	800174a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001840:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001852:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8242 	beq.w	8001cea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_RCC_OscConfig+0xc58>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	f000 8213 	beq.w	8001c9a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b02      	cmp	r3, #2
 8001882:	f040 8162 	bne.w	8001b4a <HAL_RCC_OscConfig+0xeca>
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800188e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018aa:	601a      	str	r2, [r3, #0]
  return result;
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	461a      	mov	r2, r3
 80018c8:	2300      	movs	r3, #0
 80018ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7fe ff6c 	bl	80007a8 <HAL_GetTick>
 80018d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d4:	e00c      	b.n	80018f0 <HAL_RCC_OscConfig+0xc70>
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7fe ff64 	bl	80007a8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1fd      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001914:	601a      	str	r2, [r3, #0]
  return result;
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800191e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <HAL_RCC_OscConfig+0xcba>
 8001934:	4bb0      	ldr	r3, [pc, #704]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e027      	b.n	800198a <HAL_RCC_OscConfig+0xd0a>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4b9c      	ldr	r3, [pc, #624]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001992:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001996:	6011      	str	r1, [r2, #0]
 8001998:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fa92 f1a2 	rbit	r1, r2
 80019a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019ae:	6011      	str	r1, [r2, #0]
  return result;
 80019b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	fab2 f282 	clz	r2, r2
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f042 0220 	orr.w	r2, r2, #32
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f002 021f 	and.w	r2, r2, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d182      	bne.n	80018dc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	497f      	ldr	r1, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a22:	601a      	str	r2, [r3, #0]
  return result;
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2301      	movs	r3, #1
 8001a42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe feb0 	bl	80007a8 <HAL_GetTick>
 8001a48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7fe feab 	bl	80007a8 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e144      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a86:	601a      	str	r2, [r3, #0]
  return result;
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0xe2c>
 8001aa6:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	e027      	b.n	8001afc <HAL_RCC_OscConfig+0xe7c>
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b00:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b08:	6011      	str	r1, [r2, #0]
 8001b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fa92 f1a2 	rbit	r1, r2
 8001b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b20:	6011      	str	r1, [r2, #0]
  return result;
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	fab2 f282 	clz	r2, r2
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f002 021f 	and.w	r2, r2, #31
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d082      	beq.n	8001a4e <HAL_RCC_OscConfig+0xdce>
 8001b48:	e0cf      	b.n	8001cea <HAL_RCC_OscConfig+0x106a>
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b6e:	601a      	str	r2, [r3, #0]
  return result;
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe fe0a 	bl	80007a8 <HAL_GetTick>
 8001b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe fe05 	bl	80007a8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e09e      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bd2:	601a      	str	r2, [r3, #0]
  return result;
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d104      	bne.n	8001bfc <HAL_RCC_OscConfig+0xf7c>
 8001bf2:	4b01      	ldr	r3, [pc, #4]	; (8001bf8 <HAL_RCC_OscConfig+0xf78>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e029      	b.n	8001c4c <HAL_RCC_OscConfig+0xfcc>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_OscConfig+0x1078>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c50:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fa92 f1a2 	rbit	r1, r2
 8001c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c70:	6011      	str	r1, [r2, #0]
  return result;
 8001c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c76:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d180      	bne.n	8001b9a <HAL_RCC_OscConfig+0xf1a>
 8001c98:	e027      	b.n	8001cea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e01e      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_OscConfig+0x1078>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09e      	sub	sp, #120	; 0x78
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e162      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b90      	ldr	r3, [pc, #576]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b8d      	ldr	r3, [pc, #564]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	498b      	ldr	r1, [pc, #556]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e14a      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	497f      	ldr	r1, [pc, #508]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80dc 	beq.w	8001f28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d13c      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xf6>
 8001d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xa6>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e00f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0xc6>
 8001da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	667b      	str	r3, [r7, #100]	; 0x64
 8001db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60
 8001db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dca:	fa92 f2a2 	rbit	r2, r2
 8001dce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d17b      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0f3      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d13c      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x178>
 8001dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x128>
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_ClockConfig+0x148>
 8001e24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
 8001e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
 8001e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e48:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e4c:	fa92 f2a2 	rbit	r2, r2
 8001e50:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e54:	fab2 f282 	clz	r2, r2
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f042 0220 	orr.w	r2, r2, #32
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f002 021f 	and.w	r2, r2, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d13a      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b2      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
 8001e74:	2302      	movs	r3, #2
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x1a0>
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e00d      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x1bc>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2202      	movs	r2, #2
 8001eba:	61ba      	str	r2, [r7, #24]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	617a      	str	r2, [r7, #20]
  return result;
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	fab2 f282 	clz	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f002 021f 	and.w	r2, r2, #31
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e079      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	491a      	ldr	r1, [pc, #104]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe fc56 	bl	80007a8 <HAL_GetTick>
 8001efc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe fc52 	bl	80007a8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e061      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d214      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4906      	ldr	r1, [pc, #24]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_RCC_ClockConfig+0x25c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e040      	b.n	8001fda <HAL_RCC_ClockConfig+0x2de>
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	491a      	ldr	r1, [pc, #104]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4912      	ldr	r1, [pc, #72]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f9e:	f000 f829 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_ClockConfig+0x2e8>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fac:	22f0      	movs	r2, #240	; 0xf0
 8001fae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	40d3      	lsrs	r3, r2
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x2ec>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_RCC_ClockConfig+0x2f0>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_RCC_ClockConfig+0x2f4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fba4 	bl	8000720 <HAL_InitTick>
  
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3778      	adds	r7, #120	; 0x78
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08003cd0 	.word	0x08003cd0
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b08b      	sub	sp, #44	; 0x2c
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b04      	cmp	r3, #4
 800201c:	d002      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x30>
 800201e:	2b08      	cmp	r3, #8
 8002020:	d003      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x36>
 8002022:	e03c      	b.n	800209e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	e03c      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002030:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002034:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	607a      	str	r2, [r7, #4]
  return result;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	40d3      	lsrs	r3, r2
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	220f      	movs	r2, #15
 8002058:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	60fa      	str	r2, [r7, #12]
  return result;
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	fab2 f282 	clz	r2, r2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	40d3      	lsrs	r3, r2
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	fbb2 f2f3 	udiv	r2, r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	e004      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	623b      	str	r3, [r7, #32]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a0:	623b      	str	r3, [r7, #32]
      break;
 80020a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	372c      	adds	r7, #44	; 0x2c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	007a1200 	.word	0x007a1200
 80020bc:	08003ce8 	.word	0x08003ce8
 80020c0:	08003cf8 	.word	0x08003cf8
 80020c4:	003d0900 	.word	0x003d0900

080020c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020e6:	f7ff ffef 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	fa92 f2a2 	rbit	r2, r2
 8002100:	603a      	str	r2, [r7, #0]
  return result;
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	40d3      	lsrs	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x40>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08003ce0 	.word	0x08003ce0

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800212a:	f7ff ffcd 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 800212e:	4601      	mov	r1, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002138:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800213c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	fa92 f2a2 	rbit	r2, r2
 8002144:	603a      	str	r2, [r7, #0]
  return result;
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	40d3      	lsrs	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08003ce0 	.word	0x08003ce0

08002168 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b092      	sub	sp, #72	; 0x48
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80d4 	beq.w	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218c:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10e      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a2:	61d3      	str	r3, [r2, #28]
 80021a4:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a41      	ldr	r2, [pc, #260]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7fe faeb 	bl	80007a8 <HAL_GetTick>
 80021d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe fae7 	bl	80007a8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e169      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b38      	ldr	r3, [pc, #224]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8084 	beq.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002210:	429a      	cmp	r2, r3
 8002212:	d07c      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	461a      	mov	r2, r3
 800223e:	2301      	movs	r3, #1
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002246:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	461a      	mov	r2, r3
 8002262:	2300      	movs	r3, #0
 8002264:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002266:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800226c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04b      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe fa97 	bl	80007a8 <HAL_GetTick>
 800227a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fa93 	bl	80007a8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e113      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002294:	2302      	movs	r3, #2
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
 80022a0:	2302      	movs	r3, #2
 80022a2:	623b      	str	r3, [r7, #32]
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	61fb      	str	r3, [r7, #28]
  return result;
 80022ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d108      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022c2:	4b01      	ldr	r3, [pc, #4]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	e00d      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	10908100 	.word	0x10908100
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2202      	movs	r2, #2
 80022e6:	613a      	str	r2, [r7, #16]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	fa92 f2a2 	rbit	r2, r2
 80022ee:	60fa      	str	r2, [r7, #12]
  return result;
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0b7      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800230e:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	496a      	ldr	r1, [pc, #424]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002320:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800232e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002332:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002340:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f023 0203 	bic.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	495d      	ldr	r1, [pc, #372]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235e:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4956      	ldr	r1, [pc, #344]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237c:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	494e      	ldr	r1, [pc, #312]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239a:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f023 0210 	bic.w	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4947      	ldr	r1, [pc, #284]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023b8:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	493f      	ldr	r1, [pc, #252]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f023 0220 	bic.w	r2, r3, #32
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4938      	ldr	r1, [pc, #224]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f4:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	4930      	ldr	r1, [pc, #192]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	4929      	ldr	r1, [pc, #164]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002420:	4313      	orrs	r3, r2
 8002422:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	4921      	ldr	r1, [pc, #132]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	491a      	ldr	r1, [pc, #104]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	4912      	ldr	r1, [pc, #72]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	490b      	ldr	r1, [pc, #44]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002498:	4313      	orrs	r3, r2
 800249a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3748      	adds	r7, #72	; 0x48
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e049      	b.n	800256e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe f800 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 fa74 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e049      	b.n	800261c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f841 	bl	8002624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f000 fa1d 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002652:	2302      	movs	r3, #2
 8002654:	e0ff      	b.n	8002856 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b14      	cmp	r3, #20
 8002662:	f200 80f0 	bhi.w	8002846 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	080026c1 	.word	0x080026c1
 8002670:	08002847 	.word	0x08002847
 8002674:	08002847 	.word	0x08002847
 8002678:	08002847 	.word	0x08002847
 800267c:	08002701 	.word	0x08002701
 8002680:	08002847 	.word	0x08002847
 8002684:	08002847 	.word	0x08002847
 8002688:	08002847 	.word	0x08002847
 800268c:	08002743 	.word	0x08002743
 8002690:	08002847 	.word	0x08002847
 8002694:	08002847 	.word	0x08002847
 8002698:	08002847 	.word	0x08002847
 800269c:	08002783 	.word	0x08002783
 80026a0:	08002847 	.word	0x08002847
 80026a4:	08002847 	.word	0x08002847
 80026a8:	08002847 	.word	0x08002847
 80026ac:	080027c5 	.word	0x080027c5
 80026b0:	08002847 	.word	0x08002847
 80026b4:	08002847 	.word	0x08002847
 80026b8:	08002847 	.word	0x08002847
 80026bc:	08002805 	.word	0x08002805
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fa24 	bl	8002b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0208 	orr.w	r2, r2, #8
 80026da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6999      	ldr	r1, [r3, #24]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	619a      	str	r2, [r3, #24]
      break;
 80026fe:	e0a5      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fa94 	bl	8002c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6999      	ldr	r1, [r3, #24]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	021a      	lsls	r2, r3, #8
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	619a      	str	r2, [r3, #24]
      break;
 8002740:	e084      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fafd 	bl	8002d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0208 	orr.w	r2, r2, #8
 800275c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0204 	bic.w	r2, r2, #4
 800276c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	61da      	str	r2, [r3, #28]
      break;
 8002780:	e064      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fb65 	bl	8002e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69d9      	ldr	r1, [r3, #28]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	021a      	lsls	r2, r3, #8
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	61da      	str	r2, [r3, #28]
      break;
 80027c2:	e043      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fbae 	bl	8002f2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0204 	bic.w	r2, r2, #4
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002802:	e023      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fbf2 	bl	8002ff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	021a      	lsls	r2, r3, #8
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002844:	e002      	b.n	800284c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	75fb      	strb	r3, [r7, #23]
      break;
 800284a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop

08002860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_TIM_ConfigClockSource+0x1c>
 8002878:	2302      	movs	r3, #2
 800287a:	e0b6      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x18a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800289e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b8:	d03e      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0xd8>
 80028ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028be:	f200 8087 	bhi.w	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	f000 8086 	beq.w	80029d6 <HAL_TIM_ConfigClockSource+0x176>
 80028ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ce:	d87f      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 80028d0:	2b70      	cmp	r3, #112	; 0x70
 80028d2:	d01a      	beq.n	800290a <HAL_TIM_ConfigClockSource+0xaa>
 80028d4:	2b70      	cmp	r3, #112	; 0x70
 80028d6:	d87b      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 80028d8:	2b60      	cmp	r3, #96	; 0x60
 80028da:	d050      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x11e>
 80028dc:	2b60      	cmp	r3, #96	; 0x60
 80028de:	d877      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 80028e0:	2b50      	cmp	r3, #80	; 0x50
 80028e2:	d03c      	beq.n	800295e <HAL_TIM_ConfigClockSource+0xfe>
 80028e4:	2b50      	cmp	r3, #80	; 0x50
 80028e6:	d873      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d058      	beq.n	800299e <HAL_TIM_ConfigClockSource+0x13e>
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d86f      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 80028f0:	2b30      	cmp	r3, #48	; 0x30
 80028f2:	d064      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x15e>
 80028f4:	2b30      	cmp	r3, #48	; 0x30
 80028f6:	d86b      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d060      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x15e>
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d867      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d05c      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x15e>
 8002904:	2b10      	cmp	r3, #16
 8002906:	d05a      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x15e>
 8002908:	e062      	b.n	80029d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f000 fc4b 	bl	80031b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800292c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	609a      	str	r2, [r3, #8]
      break;
 8002936:	e04f      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f000 fc34 	bl	80031b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800295a:	609a      	str	r2, [r3, #8]
      break;
 800295c:	e03c      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f000 fba8 	bl	80030c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2150      	movs	r1, #80	; 0x50
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fc01 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 800297c:	e02c      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	f000 fbc7 	bl	800311e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2160      	movs	r1, #96	; 0x60
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fbf1 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 800299c:	e01c      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 fb88 	bl	80030c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fbe1 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 80029bc:	e00c      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f000 fbd8 	bl	800317e <TIM_ITRx_SetConfig>
      break;
 80029ce:	e003      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      break;
 80029d4:	e000      	b.n	80029d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80029d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <TIM_Base_SetConfig+0x104>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00f      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d00b      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a39      	ldr	r2, [pc, #228]	; (8002afc <TIM_Base_SetConfig+0x108>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a38      	ldr	r2, [pc, #224]	; (8002b00 <TIM_Base_SetConfig+0x10c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a37      	ldr	r2, [pc, #220]	; (8002b04 <TIM_Base_SetConfig+0x110>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <TIM_Base_SetConfig+0x104>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01b      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d017      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <TIM_Base_SetConfig+0x108>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <TIM_Base_SetConfig+0x10c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00f      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <TIM_Base_SetConfig+0x110>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <TIM_Base_SetConfig+0x118>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <TIM_Base_SetConfig+0x11c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <TIM_Base_SetConfig+0x104>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00f      	beq.n	8002adc <TIM_Base_SetConfig+0xe8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <TIM_Base_SetConfig+0x110>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <TIM_Base_SetConfig+0xe8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <TIM_Base_SetConfig+0xe8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <TIM_Base_SetConfig+0x118>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0xe8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <TIM_Base_SetConfig+0x11c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d103      	bne.n	8002ae4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40013400 	.word	0x40013400
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800

08002b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f023 0201 	bic.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f023 0302 	bic.w	r3, r3, #2
 8002b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a2c      	ldr	r2, [pc, #176]	; (8002c20 <TIM_OC1_SetConfig+0x10c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00f      	beq.n	8002b94 <TIM_OC1_SetConfig+0x80>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <TIM_OC1_SetConfig+0x110>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_OC1_SetConfig+0x80>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <TIM_OC1_SetConfig+0x114>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_OC1_SetConfig+0x80>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <TIM_OC1_SetConfig+0x118>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_OC1_SetConfig+0x80>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <TIM_OC1_SetConfig+0x11c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10c      	bne.n	8002bae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0308 	bic.w	r3, r3, #8
 8002b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 0304 	bic.w	r3, r3, #4
 8002bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <TIM_OC1_SetConfig+0x10c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_OC1_SetConfig+0xc2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <TIM_OC1_SetConfig+0x110>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_OC1_SetConfig+0xc2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <TIM_OC1_SetConfig+0x114>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_OC1_SetConfig+0xc2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <TIM_OC1_SetConfig+0x118>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_OC1_SetConfig+0xc2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <TIM_OC1_SetConfig+0x11c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d111      	bne.n	8002bfa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40013400 	.word	0x40013400
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40014400 	.word	0x40014400
 8002c30:	40014800 	.word	0x40014800

08002c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0210 	bic.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f023 0320 	bic.w	r3, r3, #32
 8002c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <TIM_OC2_SetConfig+0x100>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_OC2_SetConfig+0x6c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <TIM_OC2_SetConfig+0x104>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d10d      	bne.n	8002cbc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <TIM_OC2_SetConfig+0x100>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00f      	beq.n	8002ce4 <TIM_OC2_SetConfig+0xb0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <TIM_OC2_SetConfig+0x104>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_OC2_SetConfig+0xb0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <TIM_OC2_SetConfig+0x108>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_OC2_SetConfig+0xb0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <TIM_OC2_SetConfig+0x10c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_OC2_SetConfig+0xb0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <TIM_OC2_SetConfig+0x110>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d113      	bne.n	8002d0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40013400 	.word	0x40013400
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	40014400 	.word	0x40014400
 8002d44:	40014800 	.word	0x40014800

08002d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <TIM_OC3_SetConfig+0xfc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_OC3_SetConfig+0x6a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_OC3_SetConfig+0x100>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10d      	bne.n	8002dce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dcc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <TIM_OC3_SetConfig+0xfc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00f      	beq.n	8002df6 <TIM_OC3_SetConfig+0xae>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <TIM_OC3_SetConfig+0x100>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_OC3_SetConfig+0xae>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <TIM_OC3_SetConfig+0x104>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <TIM_OC3_SetConfig+0xae>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <TIM_OC3_SetConfig+0x108>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_OC3_SetConfig+0xae>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <TIM_OC3_SetConfig+0x10c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d113      	bne.n	8002e1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	621a      	str	r2, [r3, #32]
}
 8002e38:	bf00      	nop
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	031b      	lsls	r3, r3, #12
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <TIM_OC4_SetConfig+0xc0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00f      	beq.n	8002edc <TIM_OC4_SetConfig+0x84>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <TIM_OC4_SetConfig+0xc4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <TIM_OC4_SetConfig+0x84>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <TIM_OC4_SetConfig+0xc8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <TIM_OC4_SetConfig+0x84>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <TIM_OC4_SetConfig+0xcc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_OC4_SetConfig+0x84>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <TIM_OC4_SetConfig+0xd0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d109      	bne.n	8002ef0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40013400 	.word	0x40013400
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800

08002f2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <TIM_OC5_SetConfig+0xb4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00f      	beq.n	8002fa6 <TIM_OC5_SetConfig+0x7a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <TIM_OC5_SetConfig+0xb8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_OC5_SetConfig+0x7a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <TIM_OC5_SetConfig+0xbc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <TIM_OC5_SetConfig+0x7a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <TIM_OC5_SetConfig+0xc0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_OC5_SetConfig+0x7a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <TIM_OC5_SetConfig+0xc4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d109      	bne.n	8002fba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	621a      	str	r2, [r3, #32]
}
 8002fd4:	bf00      	nop
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800

08002ff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800303a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <TIM_OC6_SetConfig+0xb8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00f      	beq.n	8003070 <TIM_OC6_SetConfig+0x7c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <TIM_OC6_SetConfig+0xbc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00b      	beq.n	8003070 <TIM_OC6_SetConfig+0x7c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <TIM_OC6_SetConfig+0xc0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <TIM_OC6_SetConfig+0x7c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <TIM_OC6_SetConfig+0xc4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC6_SetConfig+0x7c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a14      	ldr	r2, [pc, #80]	; (80030bc <TIM_OC6_SetConfig+0xc8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d109      	bne.n	8003084 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40013400 	.word	0x40013400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800

080030c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 030a 	bic.w	r3, r3, #10
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311e:	b480      	push	{r7}
 8003120:	b087      	sub	sp, #28
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f023 0210 	bic.w	r2, r3, #16
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	031b      	lsls	r3, r3, #12
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800315a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	f043 0307 	orr.w	r3, r3, #7
 80031a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e063      	b.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003246:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003258:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d013      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10c      	bne.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40013400 	.word	0x40013400
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40014000 	.word	0x40014000

080032f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800330c:	2302      	movs	r3, #2
 800330e:	e065      	b.n	80033dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d115      	bne.n	80033ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	051b      	lsls	r3, r3, #20
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40013400 	.word	0x40013400

080033f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e040      	b.n	8003484 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd f8c6 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f82c 	bl	800348c <UART_SetConfig>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9f4 	bl	8003834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fa7b 	bl	8003978 <UART_CheckIdleState>
 8003482:	4603      	mov	r3, r0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034ba:	f023 030c 	bic.w	r3, r3, #12
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	6979      	ldr	r1, [r7, #20]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4aa7      	ldr	r2, [pc, #668]	; (80037a4 <UART_SetConfig+0x318>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d120      	bne.n	800354e <UART_SetConfig+0xc2>
 800350c:	4ba6      	ldr	r3, [pc, #664]	; (80037a8 <UART_SetConfig+0x31c>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b03      	cmp	r3, #3
 8003516:	d817      	bhi.n	8003548 <UART_SetConfig+0xbc>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <UART_SetConfig+0x94>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003531 	.word	0x08003531
 8003524:	0800353d 	.word	0x0800353d
 8003528:	08003543 	.word	0x08003543
 800352c:	08003537 	.word	0x08003537
 8003530:	2301      	movs	r3, #1
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e0b5      	b.n	80036a2 <UART_SetConfig+0x216>
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e0b2      	b.n	80036a2 <UART_SetConfig+0x216>
 800353c:	2304      	movs	r3, #4
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e0af      	b.n	80036a2 <UART_SetConfig+0x216>
 8003542:	2308      	movs	r3, #8
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e0ac      	b.n	80036a2 <UART_SetConfig+0x216>
 8003548:	2310      	movs	r3, #16
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e0a9      	b.n	80036a2 <UART_SetConfig+0x216>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a96      	ldr	r2, [pc, #600]	; (80037ac <UART_SetConfig+0x320>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d124      	bne.n	80035a2 <UART_SetConfig+0x116>
 8003558:	4b93      	ldr	r3, [pc, #588]	; (80037a8 <UART_SetConfig+0x31c>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003564:	d011      	beq.n	800358a <UART_SetConfig+0xfe>
 8003566:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800356a:	d817      	bhi.n	800359c <UART_SetConfig+0x110>
 800356c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003570:	d011      	beq.n	8003596 <UART_SetConfig+0x10a>
 8003572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003576:	d811      	bhi.n	800359c <UART_SetConfig+0x110>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <UART_SetConfig+0xf8>
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003580:	d006      	beq.n	8003590 <UART_SetConfig+0x104>
 8003582:	e00b      	b.n	800359c <UART_SetConfig+0x110>
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e08b      	b.n	80036a2 <UART_SetConfig+0x216>
 800358a:	2302      	movs	r3, #2
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e088      	b.n	80036a2 <UART_SetConfig+0x216>
 8003590:	2304      	movs	r3, #4
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e085      	b.n	80036a2 <UART_SetConfig+0x216>
 8003596:	2308      	movs	r3, #8
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e082      	b.n	80036a2 <UART_SetConfig+0x216>
 800359c:	2310      	movs	r3, #16
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e07f      	b.n	80036a2 <UART_SetConfig+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a82      	ldr	r2, [pc, #520]	; (80037b0 <UART_SetConfig+0x324>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d124      	bne.n	80035f6 <UART_SetConfig+0x16a>
 80035ac:	4b7e      	ldr	r3, [pc, #504]	; (80037a8 <UART_SetConfig+0x31c>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035b8:	d011      	beq.n	80035de <UART_SetConfig+0x152>
 80035ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035be:	d817      	bhi.n	80035f0 <UART_SetConfig+0x164>
 80035c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035c4:	d011      	beq.n	80035ea <UART_SetConfig+0x15e>
 80035c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035ca:	d811      	bhi.n	80035f0 <UART_SetConfig+0x164>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <UART_SetConfig+0x14c>
 80035d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d4:	d006      	beq.n	80035e4 <UART_SetConfig+0x158>
 80035d6:	e00b      	b.n	80035f0 <UART_SetConfig+0x164>
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e061      	b.n	80036a2 <UART_SetConfig+0x216>
 80035de:	2302      	movs	r3, #2
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e05e      	b.n	80036a2 <UART_SetConfig+0x216>
 80035e4:	2304      	movs	r3, #4
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e05b      	b.n	80036a2 <UART_SetConfig+0x216>
 80035ea:	2308      	movs	r3, #8
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e058      	b.n	80036a2 <UART_SetConfig+0x216>
 80035f0:	2310      	movs	r3, #16
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e055      	b.n	80036a2 <UART_SetConfig+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a6e      	ldr	r2, [pc, #440]	; (80037b4 <UART_SetConfig+0x328>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d124      	bne.n	800364a <UART_SetConfig+0x1be>
 8003600:	4b69      	ldr	r3, [pc, #420]	; (80037a8 <UART_SetConfig+0x31c>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360c:	d011      	beq.n	8003632 <UART_SetConfig+0x1a6>
 800360e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003612:	d817      	bhi.n	8003644 <UART_SetConfig+0x1b8>
 8003614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003618:	d011      	beq.n	800363e <UART_SetConfig+0x1b2>
 800361a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361e:	d811      	bhi.n	8003644 <UART_SetConfig+0x1b8>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <UART_SetConfig+0x1a0>
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d006      	beq.n	8003638 <UART_SetConfig+0x1ac>
 800362a:	e00b      	b.n	8003644 <UART_SetConfig+0x1b8>
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e037      	b.n	80036a2 <UART_SetConfig+0x216>
 8003632:	2302      	movs	r3, #2
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e034      	b.n	80036a2 <UART_SetConfig+0x216>
 8003638:	2304      	movs	r3, #4
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e031      	b.n	80036a2 <UART_SetConfig+0x216>
 800363e:	2308      	movs	r3, #8
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e02e      	b.n	80036a2 <UART_SetConfig+0x216>
 8003644:	2310      	movs	r3, #16
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e02b      	b.n	80036a2 <UART_SetConfig+0x216>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a5a      	ldr	r2, [pc, #360]	; (80037b8 <UART_SetConfig+0x32c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d124      	bne.n	800369e <UART_SetConfig+0x212>
 8003654:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <UART_SetConfig+0x31c>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800365c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003660:	d011      	beq.n	8003686 <UART_SetConfig+0x1fa>
 8003662:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003666:	d817      	bhi.n	8003698 <UART_SetConfig+0x20c>
 8003668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800366c:	d011      	beq.n	8003692 <UART_SetConfig+0x206>
 800366e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003672:	d811      	bhi.n	8003698 <UART_SetConfig+0x20c>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <UART_SetConfig+0x1f4>
 8003678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800367c:	d006      	beq.n	800368c <UART_SetConfig+0x200>
 800367e:	e00b      	b.n	8003698 <UART_SetConfig+0x20c>
 8003680:	2300      	movs	r3, #0
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e00d      	b.n	80036a2 <UART_SetConfig+0x216>
 8003686:	2302      	movs	r3, #2
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e00a      	b.n	80036a2 <UART_SetConfig+0x216>
 800368c:	2304      	movs	r3, #4
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e007      	b.n	80036a2 <UART_SetConfig+0x216>
 8003692:	2308      	movs	r3, #8
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e004      	b.n	80036a2 <UART_SetConfig+0x216>
 8003698:	2310      	movs	r3, #16
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e001      	b.n	80036a2 <UART_SetConfig+0x216>
 800369e:	2310      	movs	r3, #16
 80036a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036aa:	d15b      	bne.n	8003764 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d827      	bhi.n	8003702 <UART_SetConfig+0x276>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0x22c>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036ed 	.word	0x080036ed
 80036c4:	08003703 	.word	0x08003703
 80036c8:	080036f3 	.word	0x080036f3
 80036cc:	08003703 	.word	0x08003703
 80036d0:	08003703 	.word	0x08003703
 80036d4:	08003703 	.word	0x08003703
 80036d8:	080036fb 	.word	0x080036fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036dc:	f7fe fd00 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
 80036e0:	61b8      	str	r0, [r7, #24]
        break;
 80036e2:	e013      	b.n	800370c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e4:	f7fe fd1e 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e00f      	b.n	800370c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ec:	4b33      	ldr	r3, [pc, #204]	; (80037bc <UART_SetConfig+0x330>)
 80036ee:	61bb      	str	r3, [r7, #24]
        break;
 80036f0:	e00c      	b.n	800370c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f2:	f7fe fc7f 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 80036f6:	61b8      	str	r0, [r7, #24]
        break;
 80036f8:	e008      	b.n	800370c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fe:	61bb      	str	r3, [r7, #24]
        break;
 8003700:	e004      	b.n	800370c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	77bb      	strb	r3, [r7, #30]
        break;
 800370a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8082 	beq.w	8003818 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	005a      	lsls	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	441a      	add	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d916      	bls.n	800375e <UART_SetConfig+0x2d2>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003736:	d212      	bcs.n	800375e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f023 030f 	bic.w	r3, r3, #15
 8003740:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	b29b      	uxth	r3, r3
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	b29a      	uxth	r2, r3
 800374e:	89fb      	ldrh	r3, [r7, #14]
 8003750:	4313      	orrs	r3, r2
 8003752:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	89fa      	ldrh	r2, [r7, #14]
 800375a:	60da      	str	r2, [r3, #12]
 800375c:	e05c      	b.n	8003818 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	77bb      	strb	r3, [r7, #30]
 8003762:	e059      	b.n	8003818 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003764:	7ffb      	ldrb	r3, [r7, #31]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d835      	bhi.n	80037d6 <UART_SetConfig+0x34a>
 800376a:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0x2e4>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037c1 	.word	0x080037c1
 800377c:	080037d7 	.word	0x080037d7
 8003780:	080037c7 	.word	0x080037c7
 8003784:	080037d7 	.word	0x080037d7
 8003788:	080037d7 	.word	0x080037d7
 800378c:	080037d7 	.word	0x080037d7
 8003790:	080037cf 	.word	0x080037cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fca4 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
 8003798:	61b8      	str	r0, [r7, #24]
        break;
 800379a:	e021      	b.n	80037e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7fe fcc2 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 80037a0:	61b8      	str	r0, [r7, #24]
        break;
 80037a2:	e01d      	b.n	80037e0 <UART_SetConfig+0x354>
 80037a4:	40013800 	.word	0x40013800
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40004400 	.word	0x40004400
 80037b0:	40004800 	.word	0x40004800
 80037b4:	40004c00 	.word	0x40004c00
 80037b8:	40005000 	.word	0x40005000
 80037bc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <UART_SetConfig+0x3a4>)
 80037c2:	61bb      	str	r3, [r7, #24]
        break;
 80037c4:	e00c      	b.n	80037e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c6:	f7fe fc15 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 80037ca:	61b8      	str	r0, [r7, #24]
        break;
 80037cc:	e008      	b.n	80037e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d2:	61bb      	str	r3, [r7, #24]
        break;
 80037d4:	e004      	b.n	80037e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	77bb      	strb	r3, [r7, #30]
        break;
 80037de:	bf00      	nop
    }

    if (pclk != 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085a      	lsrs	r2, r3, #1
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d909      	bls.n	8003814 <UART_SetConfig+0x388>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d205      	bcs.n	8003814 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	e001      	b.n	8003818 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003824:	7fbb      	ldrb	r3, [r7, #30]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	007a1200 	.word	0x007a1200

08003834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003932:	d10a      	bne.n	800394a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b098      	sub	sp, #96	; 0x60
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003988:	f7fc ff0e 	bl	80007a8 <HAL_GetTick>
 800398c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d12e      	bne.n	80039fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f88c 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d021      	beq.n	80039fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ca:	653b      	str	r3, [r7, #80]	; 0x50
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d4:	647b      	str	r3, [r7, #68]	; 0x44
 80039d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e6      	bne.n	80039b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e062      	b.n	8003ac0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d149      	bne.n	8003a9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f856 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03c      	beq.n	8003a9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
 8003a42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e6      	bne.n	8003a22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a74:	61fa      	str	r2, [r7, #28]
 8003a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	617b      	str	r3, [r7, #20]
   return(result);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e011      	b.n	8003ac0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3758      	adds	r7, #88	; 0x58
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad8:	e049      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d045      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7fc fe61 	bl	80007a8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e048      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d031      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d110      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f838 	bl	8003b96 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e029      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b48:	d111      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f81e 	bl	8003b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e00f      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d0a6      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b095      	sub	sp, #84	; 0x54
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e6      	bne.n	8003b9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d118      	bne.n	8003c3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f023 0310 	bic.w	r3, r3, #16
 8003c20:	647b      	str	r3, [r7, #68]	; 0x44
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	613b      	str	r3, [r7, #16]
   return(result);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e6      	bne.n	8003c0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c52:	bf00      	nop
 8003c54:	3754      	adds	r7, #84	; 0x54
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	4d0d      	ldr	r5, [pc, #52]	; (8003c98 <__libc_init_array+0x38>)
 8003c64:	4c0d      	ldr	r4, [pc, #52]	; (8003c9c <__libc_init_array+0x3c>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	4d0b      	ldr	r5, [pc, #44]	; (8003ca0 <__libc_init_array+0x40>)
 8003c72:	4c0c      	ldr	r4, [pc, #48]	; (8003ca4 <__libc_init_array+0x44>)
 8003c74:	f000 f820 	bl	8003cb8 <_init>
 8003c78:	1b64      	subs	r4, r4, r5
 8003c7a:	10a4      	asrs	r4, r4, #2
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	42a6      	cmp	r6, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c88:	4798      	blx	r3
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c92:	4798      	blx	r3
 8003c94:	3601      	adds	r6, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08003d08 	.word	0x08003d08
 8003c9c:	08003d08 	.word	0x08003d08
 8003ca0:	08003d08 	.word	0x08003d08
 8003ca4:	08003d0c 	.word	0x08003d0c

08003ca8 <memset>:
 8003ca8:	4402      	add	r2, r0
 8003caa:	4603      	mov	r3, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <memset+0xa>
 8003cb0:	4770      	bx	lr
 8003cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb6:	e7f9      	b.n	8003cac <memset+0x4>

08003cb8 <_init>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr

08003cc4 <_fini>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr
