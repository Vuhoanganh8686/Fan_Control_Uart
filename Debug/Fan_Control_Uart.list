
Fan_Control_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008020  08008020  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008020  08008020  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008020  08008020  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000208  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015243  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003011  00000000  00000000  000352e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  000382f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  000394f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002098d  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017934  00000000  00000000  0005af3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1fb8  00000000  00000000  00072871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134829  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005370  00000000  00000000  0013487c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f04 	.word	0x08007f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007f04 	.word	0x08007f04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <flash_erase>:
FLASH_EraseInitTypeDef flash_erase_control_mode_init;
FLASH_EraseInitTypeDef flash_erase_wind_mode_init;


void flash_erase()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    /*
	 * @brief init flash erase variables
	 */
	flash_erase_power_init.TypeErase =  FLASH_TYPEERASE_PAGES;
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <flash_erase+0x44>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
	flash_erase_power_init.NbPages = 1;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <flash_erase+0x44>)
 800027c:	2201      	movs	r2, #1
 800027e:	609a      	str	r2, [r3, #8]
	flash_erase_power_init.PageAddress = ADDR_FLASH_PAGE_102;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <flash_erase+0x44>)
 8000282:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <flash_erase+0x48>)
 8000284:	605a      	str	r2, [r3, #4]

	flash_erase_control_mode_init.TypeErase = FLASH_TYPEERASE_PAGES ;
 8000286:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <flash_erase+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
	flash_erase_control_mode_init.NbPages = 1;
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <flash_erase+0x4c>)
 800028e:	2201      	movs	r2, #1
 8000290:	609a      	str	r2, [r3, #8]
	flash_erase_control_mode_init.PageAddress = ADDR_FLASH_PAGE_101;
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <flash_erase+0x4c>)
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_erase+0x50>)
 8000296:	605a      	str	r2, [r3, #4]

	flash_erase_wind_mode_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <flash_erase+0x54>)
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
	flash_erase_wind_mode_init.NbPages = 1;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <flash_erase+0x54>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	609a      	str	r2, [r3, #8]
	flash_erase_wind_mode_init.PageAddress = ADDR_FLASH_PAGE_100;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <flash_erase+0x54>)
 80002a6:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <flash_erase+0x58>)
 80002a8:	605a      	str	r2, [r3, #4]
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	20000090 	.word	0x20000090
 80002b8:	08033000 	.word	0x08033000
 80002bc:	2000009c 	.word	0x2000009c
 80002c0:	08032800 	.word	0x08032800
 80002c4:	200000a8 	.word	0x200000a8
 80002c8:	08032000 	.word	0x08032000

080002cc <modify_power>:

void modify_power(POWER power){
 80002cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002d0:	b097      	sub	sp, #92	; 0x5c
 80002d2:	af10      	add	r7, sp, #64	; 0x40
 80002d4:	4603      	mov	r3, r0
 80002d6:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Mutate power variable
	 * @param power set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80002d8:	4b29      	ldr	r3, [pc, #164]	; (8000380 <modify_power+0xb4>)
 80002da:	617b      	str	r3, [r7, #20]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80002dc:	4b29      	ldr	r3, [pc, #164]	; (8000384 <modify_power+0xb8>)
 80002de:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 80002e0:	4b29      	ldr	r3, [pc, #164]	; (8000388 <modify_power+0xbc>)
 80002e2:	60fb      	str	r3, [r7, #12]
	if(*p_power != power){
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d043      	beq.n	8000376 <modify_power+0xaa>
		if(power == OFF){
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d114      	bne.n	800031e <modify_power+0x52>
			wind_control(htim1, LEVEL_0);
 80002f4:	4e25      	ldr	r6, [pc, #148]	; (800038c <modify_power+0xc0>)
 80002f6:	2300      	movs	r3, #0
 80002f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80002fa:	466d      	mov	r5, sp
 80002fc:	f106 0410 	add.w	r4, r6, #16
 8000300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800030a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800030c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000310:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000314:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000318:	f000 f8f4 	bl	8000504 <wind_control>
 800031c:	e019      	b.n	8000352 <modify_power+0x86>
		}
		else{
			if(*p_control_mode == MANUAL){
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d115      	bne.n	8000352 <modify_power+0x86>
				wind_control(htim1, *p_wind_mode);
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	4e17      	ldr	r6, [pc, #92]	; (800038c <modify_power+0xc0>)
 800032e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000330:	466d      	mov	r5, sp
 8000332:	f106 0410 	add.w	r4, r6, #16
 8000336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800033c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000342:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000346:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800034a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800034e:	f000 f8d9 	bl	8000504 <wind_control>
			}
		}
		HAL_FLASH_Unlock();
 8000352:	f002 fc4f 	bl	8002bf4 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, &p_error_page);
 8000356:	490e      	ldr	r1, [pc, #56]	; (8000390 <modify_power+0xc4>)
 8000358:	480e      	ldr	r0, [pc, #56]	; (8000394 <modify_power+0xc8>)
 800035a:	f002 fd0f 	bl	8002d7c <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_102, power);
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2200      	movs	r2, #0
 8000362:	4698      	mov	r8, r3
 8000364:	4691      	mov	r9, r2
 8000366:	4642      	mov	r2, r8
 8000368:	464b      	mov	r3, r9
 800036a:	4907      	ldr	r1, [pc, #28]	; (8000388 <modify_power+0xbc>)
 800036c:	2003      	movs	r0, #3
 800036e:	f002 fbd1 	bl	8002b14 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000372:	f002 fc65 	bl	8002c40 <HAL_FLASH_Lock>
	}
}
 8000376:	bf00      	nop
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000380:	08032800 	.word	0x08032800
 8000384:	08032000 	.word	0x08032000
 8000388:	08033000 	.word	0x08033000
 800038c:	20000104 	.word	0x20000104
 8000390:	2000008c 	.word	0x2000008c
 8000394:	20000090 	.word	0x20000090

08000398 <modify_control_mode>:

void modify_control_mode(CONTROL_MODE control_mode){
 8000398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039a:	b095      	sub	sp, #84	; 0x54
 800039c:	af10      	add	r7, sp, #64	; 0x40
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate control mode variable
	 * @control_mode set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <modify_control_mode+0x7c>)
 80003a4:	60fb      	str	r3, [r7, #12]
	if(*p_control_mode != control_mode){
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d02c      	beq.n	800040a <modify_control_mode+0x72>
		HAL_FLASH_Unlock();
 80003b0:	f002 fc20 	bl	8002bf4 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, &p_error_page);
 80003b4:	4918      	ldr	r1, [pc, #96]	; (8000418 <modify_control_mode+0x80>)
 80003b6:	4819      	ldr	r0, [pc, #100]	; (800041c <modify_control_mode+0x84>)
 80003b8:	f002 fce0 	bl	8002d7c <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_101, control_mode);
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2200      	movs	r2, #0
 80003c0:	461c      	mov	r4, r3
 80003c2:	4615      	mov	r5, r2
 80003c4:	4622      	mov	r2, r4
 80003c6:	462b      	mov	r3, r5
 80003c8:	4912      	ldr	r1, [pc, #72]	; (8000414 <modify_control_mode+0x7c>)
 80003ca:	2003      	movs	r0, #3
 80003cc:	f002 fba2 	bl	8002b14 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80003d0:	f002 fc36 	bl	8002c40 <HAL_FLASH_Lock>
		if(control_mode == MANUAL){
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d117      	bne.n	800040a <modify_control_mode+0x72>
			uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <modify_control_mode+0x88>)
 80003dc:	60bb      	str	r3, [r7, #8]
			wind_control(htim1, *p_wind_mode);
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	4e0f      	ldr	r6, [pc, #60]	; (8000424 <modify_control_mode+0x8c>)
 80003e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80003e8:	466d      	mov	r5, sp
 80003ea:	f106 0410 	add.w	r4, r6, #16
 80003ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80003fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000402:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000406:	f000 f87d 	bl	8000504 <wind_control>
		}
	}
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000412:	bf00      	nop
 8000414:	08032800 	.word	0x08032800
 8000418:	2000008c 	.word	0x2000008c
 800041c:	2000009c 	.word	0x2000009c
 8000420:	08032000 	.word	0x08032000
 8000424:	20000104 	.word	0x20000104

08000428 <modify_wind_mode>:

void modify_wind_mode(WIND_MODE wind_mode){
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	b095      	sub	sp, #84	; 0x54
 800042c:	af10      	add	r7, sp, #64	; 0x40
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate wind mode variable
	 * @wind_mode set value
	 */

	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <modify_wind_mode+0x6c>)
 8000434:	60fb      	str	r3, [r7, #12]
	if(*p_wind_mode != wind_mode){
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	429a      	cmp	r2, r3
 800043e:	d025      	beq.n	800048c <modify_wind_mode+0x64>
		HAL_FLASH_Unlock();
 8000440:	f002 fbd8 	bl	8002bf4 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, &p_error_page);
 8000444:	4914      	ldr	r1, [pc, #80]	; (8000498 <modify_wind_mode+0x70>)
 8000446:	4815      	ldr	r0, [pc, #84]	; (800049c <modify_wind_mode+0x74>)
 8000448:	f002 fc98 	bl	8002d7c <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_100, wind_mode);
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2200      	movs	r2, #0
 8000450:	461c      	mov	r4, r3
 8000452:	4615      	mov	r5, r2
 8000454:	4622      	mov	r2, r4
 8000456:	462b      	mov	r3, r5
 8000458:	490e      	ldr	r1, [pc, #56]	; (8000494 <modify_wind_mode+0x6c>)
 800045a:	2003      	movs	r0, #3
 800045c:	f002 fb5a 	bl	8002b14 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000460:	f002 fbee 	bl	8002c40 <HAL_FLASH_Lock>
		wind_control(htim1, wind_mode);
 8000464:	4e0e      	ldr	r6, [pc, #56]	; (80004a0 <modify_wind_mode+0x78>)
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	930f      	str	r3, [sp, #60]	; 0x3c
 800046a:	466d      	mov	r5, sp
 800046c:	f106 0410 	add.w	r4, r6, #16
 8000470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800047a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800047c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000480:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000484:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000488:	f000 f83c 	bl	8000504 <wind_control>
	}
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000494:	08032000 	.word	0x08032000
 8000498:	2000008c 	.word	0x2000008c
 800049c:	200000a8 	.word	0x200000a8
 80004a0:	20000104 	.word	0x20000104

080004a4 <get_power>:

uint8_t get_power(){
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
	/*
	 * @return power
	 */
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <get_power+0x1c>)
 80004ac:	607b      	str	r3, [r7, #4]
	return *p_power;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	08033000 	.word	0x08033000

080004c4 <get_control_mode>:

uint8_t get_control_mode(){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
	/*
	 * @return control mode
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <get_control_mode+0x1c>)
 80004cc:	607b      	str	r3, [r7, #4]
	return * p_control_mode;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	08032800 	.word	0x08032800

080004e4 <get_wind_mode>:

uint8_t get_wind_mode(){
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
	/*
	 * @return wind mode
	 */
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <get_wind_mode+0x1c>)
 80004ec:	607b      	str	r3, [r7, #4]
	return *p_wind_mode;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	08032000 	.word	0x08032000

08000504 <wind_control>:

void wind_control(TIM_HandleTypeDef tim_handle, WIND_MODE wind_mode){
 8000504:	b084      	sub	sp, #16
 8000506:	b490      	push	{r4, r7}
 8000508:	af00      	add	r7, sp, #0
 800050a:	f107 0408 	add.w	r4, r7, #8
 800050e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * @brief Control PWM
	 * @param tim_handler timer handler
	 * @param wind_mode wind level to be controlled
	 */
	switch(wind_mode){
 8000512:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000516:	2b02      	cmp	r3, #2
 8000518:	d00f      	beq.n	800053a <wind_control+0x36>
 800051a:	2b02      	cmp	r3, #2
 800051c:	dc12      	bgt.n	8000544 <wind_control+0x40>
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <wind_control+0x24>
 8000522:	2b01      	cmp	r3, #1
 8000524:	d004      	beq.n	8000530 <wind_control+0x2c>
		break;
	case LEVEL_2:
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
		break;
	}
}
 8000526:	e00d      	b.n	8000544 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 0);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	2200      	movs	r2, #0
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800052e:	e009      	b.n	8000544 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 599);
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	f240 2257 	movw	r2, #599	; 0x257
 8000536:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000538:	e004      	b.n	8000544 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	f240 321f 	movw	r2, #799	; 0x31f
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000542:	bf00      	nop
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc90      	pop	{r4, r7}
 800054a:	b004      	add	sp, #16
 800054c:	4770      	bx	lr
	...

08000550 <default_state>:

void default_state(){
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
	/*
	 *@brief check correctness of the flash memory storing state variables and fix
	 */ 	
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <default_state+0x64>)
 8000558:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <default_state+0x68>)
 800055c:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <default_state+0x6c>)
 8000560:	607b      	str	r3, [r7, #4]
	if(*p_power != ON && *p_power != OFF){
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d006      	beq.n	8000578 <default_state+0x28>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <default_state+0x28>
		modify_power(OFF);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff feaa 	bl	80002cc <modify_power>
	}
	if(*p_control_mode != AUTOMATIC && *p_control_mode != MANUAL){
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d006      	beq.n	800058e <default_state+0x3e>
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d002      	beq.n	800058e <default_state+0x3e>
		modify_control_mode(AUTOMATIC);
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff ff05 	bl	8000398 <modify_control_mode>
	}
	if(*p_wind_mode != LEVEL_0 && *p_wind_mode != LEVEL_1 && *p_wind_mode != LEVEL_2){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d00a      	beq.n	80005ac <default_state+0x5c>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d006      	beq.n	80005ac <default_state+0x5c>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d002      	beq.n	80005ac <default_state+0x5c>
		modify_wind_mode(LEVEL_0);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff ff3e 	bl	8000428 <modify_wind_mode>
	}
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08033000 	.word	0x08033000
 80005b8:	08032800 	.word	0x08032800
 80005bc:	08032000 	.word	0x08032000

080005c0 <restart_before_state>:

void restart_before_state(){
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	b095      	sub	sp, #84	; 0x54
 80005c4:	af10      	add	r7, sp, #64	; 0x40
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <restart_before_state+0x58>)
 80005c8:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <restart_before_state+0x5c>)
 80005cc:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <restart_before_state+0x60>)
 80005d0:	607b      	str	r3, [r7, #4]
	if(*p_power == ON && *p_control_mode == MANUAL){
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d119      	bne.n	800060e <restart_before_state+0x4e>
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d115      	bne.n	800060e <restart_before_state+0x4e>
		wind_control(htim1, *p_wind_mode);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4e0e      	ldr	r6, [pc, #56]	; (8000624 <restart_before_state+0x64>)
 80005ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80005ec:	466d      	mov	r5, sp
 80005ee:	f106 0410 	add.w	r4, r6, #16
 80005f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000602:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000606:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800060a:	f7ff ff7b 	bl	8000504 <wind_control>
	}
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop
 8000618:	08033000 	.word	0x08033000
 800061c:	08032800 	.word	0x08032800
 8000620:	08032000 	.word	0x08032000
 8000624:	20000104 	.word	0x20000104

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 ff33 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f851 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 faa3 	bl	8000b80 <MX_GPIO_Init>
  MX_TIM1_Init();
 800063a:	f000 f919 	bl	8000870 <MX_TIM1_Init>
  MX_ADC1_Init();
 800063e:	f000 f8a7 	bl	8000790 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000642:	f000 fa6d 	bl	8000b20 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000646:	f000 f9bf 	bl	80009c8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  flash_erase();
 800064a:	f7ff fe11 	bl	8000270 <flash_erase>
  test_get();
 800064e:	f000 fed3 	bl	80013f8 <test_get>
  default_state();
 8000652:	f7ff ff7d 	bl	8000550 <default_state>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000656:	2100      	movs	r1, #0
 8000658:	4819      	ldr	r0, [pc, #100]	; (80006c0 <main+0x98>)
 800065a:	f004 faf5 	bl	8004c48 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 800065e:	4819      	ldr	r0, [pc, #100]	; (80006c4 <main+0x9c>)
 8000660:	f004 fa26 	bl	8004ab0 <HAL_TIM_Base_Start_IT>
  restart_before_state();
 8000664:	f7ff ffac 	bl	80005c0 <restart_before_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_UART_Receive(&huart1, receiveBuffer, 2, HAL_MAX_DELAY);
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	2202      	movs	r2, #2
 800066e:	4916      	ldr	r1, [pc, #88]	; (80006c8 <main+0xa0>)
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <main+0xa4>)
 8000672:	f005 fbc3 	bl	8005dfc <HAL_UART_Receive>
	  if(*(receiveBuffer+1) == 0x04){
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <main+0xa0>)
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	2b04      	cmp	r3, #4
 800067c:	d107      	bne.n	800068e <main+0x66>
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 2, HAL_MAX_DELAY);
 800067e:	4914      	ldr	r1, [pc, #80]	; (80006d0 <main+0xa8>)
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2202      	movs	r2, #2
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <main+0xa4>)
 8000688:	f005 fbb8 	bl	8005dfc <HAL_UART_Receive>
 800068c:	e006      	b.n	800069c <main+0x74>
	  }
	  else{
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 3, HAL_MAX_DELAY);
 800068e:	4910      	ldr	r1, [pc, #64]	; (80006d0 <main+0xa8>)
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	2203      	movs	r2, #3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <main+0xa4>)
 8000698:	f005 fbb0 	bl	8005dfc <HAL_UART_Receive>
	  }
	  uint8_t status = handle_message(receiveBuffer, sendBuffer);
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <main+0xac>)
 800069e:	480a      	ldr	r0, [pc, #40]	; (80006c8 <main+0xa0>)
 80006a0:	f000 fab0 	bl	8000c04 <handle_message>
 80006a4:	4603      	mov	r3, r0
 80006a6:	71fb      	strb	r3, [r7, #7]
	  if(status != 0){
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0dc      	beq.n	8000668 <main+0x40>
		  HAL_UART_Transmit(&huart1, sendBuffer, status, HAL_MAX_DELAY);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	4907      	ldr	r1, [pc, #28]	; (80006d4 <main+0xac>)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <main+0xa4>)
 80006ba:	f005 fb15 	bl	8005ce8 <HAL_UART_Transmit>
  {
 80006be:	e7d3      	b.n	8000668 <main+0x40>
 80006c0:	20000104 	.word	0x20000104
 80006c4:	20000150 	.word	0x20000150
 80006c8:	20000228 	.word	0x20000228
 80006cc:	2000019c 	.word	0x2000019c
 80006d0:	2000022a 	.word	0x2000022a
 80006d4:	20000230 	.word	0x20000230

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09e      	sub	sp, #120	; 0x78
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006e2:	2228      	movs	r2, #40	; 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fba2 	bl	8006e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	223c      	movs	r2, #60	; 0x3c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 fb94 	bl	8006e30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800071c:	2300      	movs	r3, #0
 800071e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fd47 	bl	80031b8 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000730:	f000 fa62 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fd70 	bl	8004234 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800075a:	f000 fa4d 	bl	8000bf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800075e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000762:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800076e:	2300      	movs	r3, #0
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000772:	2300      	movs	r3, #0
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f003 ff91 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000784:	f000 fa38 	bl	8000bf8 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3778      	adds	r7, #120	; 0x78
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_ADC1_Init+0xdc>)
 80007b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ba:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_ADC1_Init+0xdc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_ADC1_Init+0xdc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_ADC1_Init+0xdc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_ADC1_Init+0xdc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_ADC1_Init+0xdc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_ADC1_Init+0xdc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_ADC1_Init+0xdc>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_ADC1_Init+0xdc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_ADC1_Init+0xdc>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_ADC1_Init+0xdc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC1_Init+0xdc>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC1_Init+0xdc>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_ADC1_Init+0xdc>)
 8000808:	2200      	movs	r2, #0
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080c:	4817      	ldr	r0, [pc, #92]	; (800086c <MX_ADC1_Init+0xdc>)
 800080e:	f000 fec7 	bl	80015a0 <HAL_ADC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000818:	f000 f9ee 	bl	8000bf8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_ADC1_Init+0xdc>)
 8000828:	f001 fe94 	bl	8002554 <HAL_ADCEx_MultiModeConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000832:	f000 f9e1 	bl	8000bf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000836:	2308      	movs	r3, #8
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083a:	2301      	movs	r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_ADC1_Init+0xdc>)
 8000854:	f001 fb92 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800085e:	f000 f9cb 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	; 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000b4 	.word	0x200000b4

08000870 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09a      	sub	sp, #104	; 0x68
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]
 80008a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	222c      	movs	r2, #44	; 0x2c
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f006 fac0 	bl	8006e30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b0:	4b43      	ldr	r3, [pc, #268]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008b2:	4a44      	ldr	r2, [pc, #272]	; (80009c4 <MX_TIM1_Init+0x154>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80008b6:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008b8:	224f      	movs	r2, #79	; 0x4f
 80008ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b40      	ldr	r3, [pc, #256]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008c2:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b3d      	ldr	r3, [pc, #244]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d0:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b3a      	ldr	r3, [pc, #232]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008dc:	4838      	ldr	r0, [pc, #224]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008de:	f004 f88f 	bl	8004a00 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f986 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008f6:	4619      	mov	r1, r3
 80008f8:	4831      	ldr	r0, [pc, #196]	; (80009c0 <MX_TIM1_Init+0x150>)
 80008fa:	f004 fbb9 	bl	8005070 <HAL_TIM_ConfigClockSource>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000904:	f000 f978 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000908:	482d      	ldr	r0, [pc, #180]	; (80009c0 <MX_TIM1_Init+0x150>)
 800090a:	f004 f93b 	bl	8004b84 <HAL_TIM_PWM_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000914:	f000 f970 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000924:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000928:	4619      	mov	r1, r3
 800092a:	4825      	ldr	r0, [pc, #148]	; (80009c0 <MX_TIM1_Init+0x150>)
 800092c:	f005 f890 	bl	8005a50 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000936:	f000 f95f 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000942:	2300      	movs	r3, #0
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <MX_TIM1_Init+0x150>)
 8000960:	f004 fa72 	bl	8004e48 <HAL_TIM_PWM_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800096a:	f000 f945 	bl	8000bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000986:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <MX_TIM1_Init+0x150>)
 80009a4:	f005 f8d4 	bl	8005b50 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009ae:	f000 f923 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_TIM1_Init+0x150>)
 80009b4:	f000 fb72 	bl	800109c <HAL_TIM_MspPostInit>

}
 80009b8:	bf00      	nop
 80009ba:	3768      	adds	r7, #104	; 0x68
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000104 	.word	0x20000104
 80009c4:	40012c00 	.word	0x40012c00

080009c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09a      	sub	sp, #104	; 0x68
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	222c      	movs	r2, #44	; 0x2c
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f006 fa14 	bl	8006e30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a0a:	4a44      	ldr	r2, [pc, #272]	; (8000b1c <MX_TIM8_Init+0x154>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000a0e:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a10:	224f      	movs	r2, #79	; 0x4f
 8000a12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49999;
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a1c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a28:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a34:	4838      	ldr	r0, [pc, #224]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a36:	f003 ffe3 	bl	8004a00 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f8da 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4831      	ldr	r0, [pc, #196]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a52:	f004 fb0d 	bl	8005070 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000a5c:	f000 f8cc 	bl	8000bf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a60:	482d      	ldr	r0, [pc, #180]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a62:	f004 f88f 	bl	8004b84 <HAL_TIM_PWM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a6c:	f000 f8c4 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a80:	4619      	mov	r1, r3
 8000a82:	4825      	ldr	r0, [pc, #148]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000a84:	f004 ffe4 	bl	8005a50 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000a8e:	f000 f8b3 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a92:	2360      	movs	r3, #96	; 0x60
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4818      	ldr	r0, [pc, #96]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000ab8:	f004 f9c6 	bl	8004e48 <HAL_TIM_PWM_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000ac2:	f000 f899 	bl	8000bf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000afc:	f005 f828 	bl	8005b50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000b06:	f000 f877 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM8_Init+0x150>)
 8000b0c:	f000 fac6 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000b10:	bf00      	nop
 8000b12:	3768      	adds	r7, #104	; 0x68
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000150 	.word	0x20000150
 8000b1c:	40013400 	.word	0x40013400

08000b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART1_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b64:	f005 f872 	bl	8005c4c <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f843 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000019c 	.word	0x2000019c
 8000b7c:	40013800 	.word	0x40013800

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd8:	6153      	str	r3, [r2, #20]
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_GPIO_Init+0x74>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <handle_message>:
// POWER power = OFF;
// WIND_MODE wind_mode = LEVEL_0;
// CONTROL_MODE control_mode = AUTOMATIC;


uint8_t handle_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]


    uint8_t send_length;
    uint8_t* stx = received_buffer;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	623b      	str	r3, [r7, #32]
    if(*stx != 0x02){
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d003      	beq.n	8000c22 <handle_message+0x1e>
        send_length = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error_msg;
 8000c20:	e072      	b.n	8000d08 <handle_message+0x104>
    }

    uint8_t* txRxID  = received_buffer + 1;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buffer + 1;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buffer + 2;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3302      	adds	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
    
	*sent_buffer = 0x02;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2202      	movs	r2, #2
 8000c38:	701a      	strb	r2, [r3, #0]
    switch (*txRxID) {
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d837      	bhi.n	8000cb4 <handle_message+0xb0>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <handle_message+0x48>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c5d 	.word	0x08000c5d
 8000c50:	08000c73 	.word	0x08000c73
 8000c54:	08000c89 	.word	0x08000c89
 8000c58:	08000c9f 	.word	0x08000c9f
        case FRAME_TURN_ON_OFF:
            process_power_message(received_buffer, sent_buffer);
 8000c5c:	6839      	ldr	r1, [r7, #0]
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 f858 	bl	8000d14 <process_power_message>
            received_data_length = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000c70:	e024      	b.n	8000cbc <handle_message+0xb8>
        
        case FRAME_SELECT_MODE:
            process_control_mode_message(received_buffer, sent_buffer);
 8000c72:	6839      	ldr	r1, [r7, #0]
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 f87e 	bl	8000d76 <process_control_mode_message>
            received_data_length = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000c86:	e019      	b.n	8000cbc <handle_message+0xb8>
        
        case FRAME_SELECT_FAN_SPEED:
            process_wind_mode_message(received_buffer, sent_buffer);
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f8a8 	bl	8000de0 <process_wind_mode_message>
            received_data_length = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000c9c:	e00e      	b.n	8000cbc <handle_message+0xb8>
        
        case FRAME_READ_STATUS:
            received_data_length = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length =  process_states_request_message(received_buffer, sent_buffer);
 8000ca4:	6839      	ldr	r1, [r7, #0]
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f8d6 	bl	8000e58 <process_states_request_message>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 8000cb2:	e003      	b.n	8000cbc <handle_message+0xb8>
        
        default:
            send_length = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            goto error_msg;
 8000cba:	e025      	b.n	8000d08 <handle_message+0x104>
    }

    *sent_frame_type = *txRxID + 0x80;
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3b80      	subs	r3, #128	; 0x80
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000cce:	701a      	strb	r2, [r3, #0]

    uint8_t* received_ETX = received_buffer + 3 + received_data_length;
 8000cd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d003      	beq.n	8000cec <handle_message+0xe8>
		send_length = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto error_msg;
 8000cea:	e00d      	b.n	8000d08 <handle_message+0x104>
    }

    uint8_t* sent_ETX = sent_buffer + 3 + sent_data_length; 
 8000cec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cf0:	3303      	adds	r3, #3
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	701a      	strb	r2, [r3, #0]
	send_length = sent_data_length + 4;
 8000cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d02:	3304      	adds	r3, #4
 8000d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    error_msg : return send_length;
 8000d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <process_power_message>:

void process_power_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    if (check_message_data_length(received_buffer, 1))
 8000d1e:	2101      	movs	r1, #1
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f8ed 	bl	8000f00 <check_message_data_length>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d11f      	bne.n	8000d6c <process_power_message+0x58>
	{
		goto error_msg;
	}
    uint8_t* received_data = received_buffer + 3;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3303      	adds	r3, #3
 8000d30:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	3303      	adds	r3, #3
 8000d36:	60bb      	str	r3, [r7, #8]
	if(*received_data == OFF){
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d106      	bne.n	8000d4e <process_power_message+0x3a>
		modify_power(OFF);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fac3 	bl	80002cc <modify_power>
		*sent_data = 0x00;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
	}
	else{
		*sent_data = 0xFF;
	}
	error_msg : return;
 8000d4c:	e010      	b.n	8000d70 <process_power_message+0x5c>
	else if(*received_data == ON){
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d106      	bne.n	8000d64 <process_power_message+0x50>
		modify_power(ON);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fab8 	bl	80002cc <modify_power>
		*sent_data = 0x00;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	error_msg : return;
 8000d62:	e005      	b.n	8000d70 <process_power_message+0x5c>
		*sent_data = 0xFF;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	22ff      	movs	r2, #255	; 0xff
 8000d68:	701a      	strb	r2, [r3, #0]
	error_msg : return;
 8000d6a:	e000      	b.n	8000d6e <process_power_message+0x5a>
		goto error_msg;
 8000d6c:	bf00      	nop
	error_msg : return;
 8000d6e:	bf00      	nop
} 
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <process_control_mode_message>:


void process_control_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
    // Implement logic to process control mode message
    // Update control_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1))
 8000d80:	2101      	movs	r1, #1
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f8bc 	bl	8000f00 <check_message_data_length>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d123      	bne.n	8000dd6 <process_control_mode_message+0x60>
	{
		goto error_msg;
	}
    uint8_t* received_data = received_buffer + 3;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3303      	adds	r3, #3
 8000d92:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	3303      	adds	r3, #3
 8000d98:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000d9a:	f7ff fb83 	bl	80004a4 <get_power>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d103      	bne.n	8000dac <process_control_mode_message+0x36>
		*sent_data = 0xFF;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	22ff      	movs	r2, #255	; 0xff
 8000da8:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000daa:	e015      	b.n	8000dd8 <process_control_mode_message+0x62>
	}
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <process_control_mode_message+0x46>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <process_control_mode_message+0x58>
		modify_control_mode(*received_data);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fae9 	bl	8000398 <modify_control_mode>
		*sent_data = 0x00;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e004      	b.n	8000dd8 <process_control_mode_message+0x62>
	}
	else{
		*sent_data = 0xFF;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	22ff      	movs	r2, #255	; 0xff
 8000dd2:	701a      	strb	r2, [r3, #0]
	}
	error_msg : return;
 8000dd4:	e000      	b.n	8000dd8 <process_control_mode_message+0x62>
		goto error_msg;
 8000dd6:	bf00      	nop
	error_msg : return;
 8000dd8:	bf00      	nop
} 
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <process_wind_mode_message>:




void process_wind_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
    // Implement logic to process wind mode message
    // Update wind_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1))
 8000dea:	2101      	movs	r1, #1
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f887 	bl	8000f00 <check_message_data_length>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12a      	bne.n	8000e4e <process_wind_mode_message+0x6e>
	{
		goto error_msg;
	}
    uint8_t* received_data = received_buffer + 3;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3303      	adds	r3, #3
 8000dfc:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	3303      	adds	r3, #3
 8000e02:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000e04:	f7ff fb4e 	bl	80004a4 <get_power>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d103      	bne.n	8000e16 <process_wind_mode_message+0x36>
		*sent_data = 0xFF;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000e14:	e01c      	b.n	8000e50 <process_wind_mode_message+0x70>
	}

	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <process_wind_mode_message+0x4e>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d003      	beq.n	8000e2e <process_wind_mode_message+0x4e>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d10b      	bne.n	8000e46 <process_wind_mode_message+0x66>
		modify_wind_mode(*received_data);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff faf8 	bl	8000428 <modify_wind_mode>
		*sent_data = 0x00;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
		modify_control_mode(MANUAL);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff faaa 	bl	8000398 <modify_control_mode>
 8000e44:	e004      	b.n	8000e50 <process_wind_mode_message+0x70>
	}
	else{
		*sent_data = 0xFF;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	22ff      	movs	r2, #255	; 0xff
 8000e4a:	701a      	strb	r2, [r3, #0]
	}
	error_msg: return;
 8000e4c:	e000      	b.n	8000e50 <process_wind_mode_message+0x70>
		goto error_msg;
 8000e4e:	bf00      	nop
	error_msg: return;
 8000e50:	bf00      	nop
}
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <process_states_request_message>:


uint8_t process_states_request_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
    // Implement logic to process states request message
    // Update sent_buf accordingly
    uint8_t* sent_data = sent_buffer + 3;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	3303      	adds	r3, #3
 8000e66:	61fb      	str	r3, [r7, #28]
	uint8_t* power_state = sent_data + 1;
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
	uint8_t* control_mode_state = sent_data + 2;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3302      	adds	r3, #2
 8000e72:	617b      	str	r3, [r7, #20]
	uint8_t* wind_mode_state = sent_data + 3;	
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3303      	adds	r3, #3
 8000e78:	613b      	str	r3, [r7, #16]
	uint8_t* temperature_state = sent_data + 4;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buffer, 0)){
 8000e80:	2100      	movs	r1, #0
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f83c 	bl	8000f00 <check_message_data_length>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d106      	bne.n	8000e9c <process_states_request_message+0x44>
		sent_data_length = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		*sent_data = 0xFF;
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e028      	b.n	8000eee <process_states_request_message+0x96>
	}
	else{
		*sent_data = 0x00;
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
		*power_state = get_power();
 8000ea2:	f7ff faff 	bl	80004a4 <get_power>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	701a      	strb	r2, [r3, #0]
		*control_mode_state = get_control_mode();
 8000eae:	f7ff fb09 	bl	80004c4 <get_control_mode>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	701a      	strb	r2, [r3, #0]
		*wind_mode_state = get_wind_mode();
 8000eba:	f7ff fb13 	bl	80004e4 <get_wind_mode>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	701a      	strb	r2, [r3, #0]
		int temp = (int) temperature;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <process_states_request_message+0xa4>)
 8000ec8:	edd3 7a00 	vldr	s15, [r3]
 8000ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed0:	ee17 3a90 	vmov	r3, s15
 8000ed4:	623b      	str	r3, [r7, #32]
		if(temp < 0){
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da01      	bge.n	8000ee0 <process_states_request_message+0x88>
			temp = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
		}
		*temperature_state = (uint8_t) temp;
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	701a      	strb	r2, [r3, #0]
		sent_data_length = 5;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return sent_data_length;
 8000eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000224 	.word	0x20000224

08000f00 <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buffer, uint8_t expected_value) {
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
    uint8_t* length = received_buffer + 2;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3302      	adds	r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
    if (*length == expected_value) {
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d101      	bne.n	8000f20 <check_message_data_length+0x20>
        return 1; // Data length is correct
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <check_message_data_length+0x22>
    } else {
        return 0; // Data length is incorrect
 8000f20:	2300      	movs	r3, #0
    }
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f98:	d144      	bne.n	8001024 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_ADC_MspInit+0xb4>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480e      	ldr	r0, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0xb8>)
 8000ff6:	f001 ff65 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	2303      	movs	r3, #3
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f001 ff58 	bl	8002ec4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2012      	movs	r0, #18
 800101a:	f001 fcce 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800101e:	2012      	movs	r0, #18
 8001020:	f001 fce7 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	48000800 	.word	0x48000800

08001034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <HAL_TIM_Base_MspInit+0x5c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10c      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_TIM_Base_MspInit+0x60>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <HAL_TIM_Base_MspInit+0x60>)
 800104c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_TIM_Base_MspInit+0x60>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800105e:	e010      	b.n	8001082 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_TIM_Base_MspInit+0x64>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x60>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0x60>)
 8001070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_TIM_Base_MspInit+0x60>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40012c00 	.word	0x40012c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40013400 	.word	0x40013400

0800109c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_TIM_MspPostInit+0xa8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d11d      	bne.n	80010fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010e8:	2302      	movs	r3, #2
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4816      	ldr	r0, [pc, #88]	; (800114c <HAL_TIM_MspPostInit+0xb0>)
 80010f4:	f001 fee6 	bl	8002ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80010f8:	e020      	b.n	800113c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_TIM_MspPostInit+0xb4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d11b      	bne.n	800113c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 800110a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800110e:	6153      	str	r3, [r2, #20]
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800112c:	2304      	movs	r3, #4
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <HAL_TIM_MspPostInit+0xb8>)
 8001138:	f001 fec4 	bl	8002ec4 <HAL_GPIO_Init>
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40012c00 	.word	0x40012c00
 8001148:	40021000 	.word	0x40021000
 800114c:	48001000 	.word	0x48001000
 8001150:	40013400 	.word	0x40013400
 8001154:	48000800 	.word	0x48000800

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12f      	bne.n	80011da <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_UART_MspInit+0x90>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_UART_MspInit+0x90>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x90>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x90>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <HAL_UART_MspInit+0x90>)
 8001198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_UART_MspInit+0x90>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011aa:	2330      	movs	r3, #48	; 0x30
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ba:	2307      	movs	r3, #7
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <HAL_UART_MspInit+0x94>)
 80011c6:	f001 fe7d 	bl	8002ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2025      	movs	r0, #37	; 0x25
 80011d0:	f001 fbf3 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011d4:	2025      	movs	r0, #37	; 0x25
 80011d6:	f001 fc0c 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000800 	.word	0x48000800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f972 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <ADC1_2_IRQHandler+0x10>)
 800124a:	f000 fb89 	bl	8001960 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000b4 	.word	0x200000b4

08001258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <USART1_IRQHandler+0x10>)
 800125e:	f004 fe83 	bl	8005f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000019c 	.word	0x2000019c

0800126c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e00a      	b.n	8001294 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127e:	f3af 8000 	nop.w
 8001282:	4601      	mov	r1, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	60ba      	str	r2, [r7, #8]
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf0      	blt.n	800127e <_read+0x12>
  }

  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e009      	b.n	80012cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	60ba      	str	r2, [r7, #8]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf1      	blt.n	80012b8 <_write+0x12>
  }
  return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_close>:

int _close(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001306:	605a      	str	r2, [r3, #4]
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_isatty>:

int _isatty(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f005 fd30 	bl	8006ddc <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000a000 	.word	0x2000a000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	2000023c 	.word	0x2000023c
 80013b0:	20000278 	.word	0x20000278

080013b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <print_state>:
 *      Author: Acer
 */

#include "test_flash.h"

void print_state(uint8_t state){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	printf("Actual:   %d\n", state);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <print_state+0x1c>)
 80013e8:	f005 fd2a 	bl	8006e40 <iprintf>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08007f1c 	.word	0x08007f1c

080013f8 <test_get>:
void test_get(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	// Test case 1
	modify_power(OFF);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7fe ff65 	bl	80002cc <modify_power>
	printf("Expected: 0\n");
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <test_get+0x44>)
 8001404:	f005 fdb8 	bl	8006f78 <puts>
	print_state(get_power());
 8001408:	f7ff f84c 	bl	80004a4 <get_power>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ffe2 	bl	80013d8 <print_state>
	printf("\n");
 8001414:	200a      	movs	r0, #10
 8001416:	f005 fd2b 	bl	8006e70 <putchar>

	// Test case 2
	modify_power(ON);
 800141a:	2001      	movs	r0, #1
 800141c:	f7fe ff56 	bl	80002cc <modify_power>
	printf("Expected: 1\n");
 8001420:	4807      	ldr	r0, [pc, #28]	; (8001440 <test_get+0x48>)
 8001422:	f005 fda9 	bl	8006f78 <puts>
	print_state(get_power());
 8001426:	f7ff f83d 	bl	80004a4 <get_power>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ffd3 	bl	80013d8 <print_state>
	printf("\n");
 8001432:	200a      	movs	r0, #10
 8001434:	f005 fd1c 	bl	8006e70 <putchar>

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	08007f2c 	.word	0x08007f2c
 8001440:	08007f38 	.word	0x08007f38

08001444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001448:	f7ff ffb4 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	; (8001484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	; (8001490 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f005 fcb9 	bl	8006de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001476:	f7ff f8d7 	bl	8000628 <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800147c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001488:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 800148c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001490:	20000278 	.word	0x20000278

08001494 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC3_IRQHandler>
	...

08001498 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f001 fa7b 	bl	80029a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fd3c 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fa93 	bl	8002a0e <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f001 fa5b 	bl	80029ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	20000008 	.word	0x20000008
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	20000240 	.word	0x20000240

0800154c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000240 	.word	0x20000240

08001564 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b09a      	sub	sp, #104	; 0x68
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e1c9      	b.n	8001954 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d176      	bne.n	80016c0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d152      	bne.n	8001680 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fcbf 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d13b      	bne.n	8001680 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f001 f895 	bl	8002738 <ADC_Disable>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b00      	cmp	r3, #0
 800161e:	d12f      	bne.n	8001680 <HAL_ADC_Init+0xe0>
 8001620:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001624:	2b00      	cmp	r3, #0
 8001626:	d12b      	bne.n	8001680 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001630:	f023 0302 	bic.w	r3, r3, #2
 8001634:	f043 0202 	orr.w	r2, r3, #2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800164a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800165a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800165c:	4b86      	ldr	r3, [pc, #536]	; (8001878 <HAL_ADC_Init+0x2d8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a86      	ldr	r2, [pc, #536]	; (800187c <HAL_ADC_Init+0x2dc>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9a      	lsrs	r2, r3, #18
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001672:	e002      	b.n	800167a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3b01      	subs	r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f9      	bne.n	8001674 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169c:	d110      	bne.n	80016c0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f023 0312 	bic.w	r3, r3, #18
 80016a6:	f043 0210 	orr.w	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f040 8136 	bne.w	800193a <HAL_ADC_Init+0x39a>
 80016ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8131 	bne.w	800193a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 8129 	bne.w	800193a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016f0:	f043 0202 	orr.w	r2, r3, #2
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001700:	d004      	beq.n	800170c <HAL_ADC_Init+0x16c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a5e      	ldr	r2, [pc, #376]	; (8001880 <HAL_ADC_Init+0x2e0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_ADC_Init+0x170>
 800170c:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_ADC_Init+0x2e4>)
 800170e:	e000      	b.n	8001712 <HAL_ADC_Init+0x172>
 8001710:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <HAL_ADC_Init+0x2e8>)
 8001712:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800171c:	d102      	bne.n	8001724 <HAL_ADC_Init+0x184>
 800171e:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_ADC_Init+0x2e0>)
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	e01a      	b.n	800175a <HAL_ADC_Init+0x1ba>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a55      	ldr	r2, [pc, #340]	; (8001880 <HAL_ADC_Init+0x2e0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d103      	bne.n	8001736 <HAL_ADC_Init+0x196>
 800172e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e011      	b.n	800175a <HAL_ADC_Init+0x1ba>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_ADC_Init+0x2ec>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d102      	bne.n	8001746 <HAL_ADC_Init+0x1a6>
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_ADC_Init+0x2f0>)
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e009      	b.n	800175a <HAL_ADC_Init+0x1ba>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a51      	ldr	r2, [pc, #324]	; (8001890 <HAL_ADC_Init+0x2f0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d102      	bne.n	8001756 <HAL_ADC_Init+0x1b6>
 8001750:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_ADC_Init+0x2ec>)
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e001      	b.n	800175a <HAL_ADC_Init+0x1ba>
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_ADC_Init+0x1da>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x1da>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_ADC_Init+0x1dc>
 800177a:	2300      	movs	r3, #0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11c      	bne.n	80017ba <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001780:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001782:	2b00      	cmp	r3, #0
 8001784:	d010      	beq.n	80017a8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_ADC_Init+0x202>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Init+0x202>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_ADC_Init+0x204>
 80017a2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d108      	bne.n	80017ba <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80017a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e5b      	ldrb	r3, [r3, #25]
 80017be:	035b      	lsls	r3, r3, #13
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c4:	2a01      	cmp	r2, #1
 80017c6:	d002      	beq.n	80017ce <HAL_ADC_Init+0x22e>
 80017c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017cc:	e000      	b.n	80017d0 <HAL_ADC_Init+0x230>
 80017ce:	2200      	movs	r2, #0
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4313      	orrs	r3, r2
 80017de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e0:	4313      	orrs	r3, r2
 80017e2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d11b      	bne.n	8001826 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7e5b      	ldrb	r3, [r3, #25]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	3b01      	subs	r3, #1
 80017fc:	045a      	lsls	r2, r3, #17
 80017fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001800:	4313      	orrs	r3, r2
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	663b      	str	r3, [r7, #96]	; 0x60
 8001808:	e00d      	b.n	8001826 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001812:	f043 0220 	orr.w	r2, r3, #32
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	2b01      	cmp	r3, #1
 800182c:	d03a      	beq.n	80018a4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_ADC_Init+0x2ec>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d004      	beq.n	8001842 <HAL_ADC_Init+0x2a2>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_ADC_Init+0x2f0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d128      	bne.n	8001894 <HAL_ADC_Init+0x2f4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800184a:	d012      	beq.n	8001872 <HAL_ADC_Init+0x2d2>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001854:	d00a      	beq.n	800186c <HAL_ADC_Init+0x2cc>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800185e:	d002      	beq.n	8001866 <HAL_ADC_Init+0x2c6>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	e018      	b.n	8001898 <HAL_ADC_Init+0x2f8>
 8001866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186a:	e015      	b.n	8001898 <HAL_ADC_Init+0x2f8>
 800186c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001870:	e012      	b.n	8001898 <HAL_ADC_Init+0x2f8>
 8001872:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001876:	e00f      	b.n	8001898 <HAL_ADC_Init+0x2f8>
 8001878:	20000000 	.word	0x20000000
 800187c:	431bde83 	.word	0x431bde83
 8001880:	50000100 	.word	0x50000100
 8001884:	50000300 	.word	0x50000300
 8001888:	50000700 	.word	0x50000700
 800188c:	50000400 	.word	0x50000400
 8001890:	50000500 	.word	0x50000500
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800189c:	4313      	orrs	r3, r2
 800189e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a0:	4313      	orrs	r3, r2
 80018a2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d114      	bne.n	80018dc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c0:	f023 0302 	bic.w	r3, r3, #2
 80018c4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e1b      	ldrb	r3, [r3, #24]
 80018ca:	039a      	lsls	r2, r3, #14
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4313      	orrs	r3, r2
 80018d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018d8:	4313      	orrs	r3, r2
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_ADC_Init+0x3bc>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018ec:	430b      	orrs	r3, r1
 80018ee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10c      	bne.n	8001912 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f023 010f 	bic.w	r1, r3, #15
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	1e5a      	subs	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
 8001910:	e007      	b.n	8001922 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 020f 	bic.w	r2, r2, #15
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f023 0303 	bic.w	r3, r3, #3
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
 8001938:	e00a      	b.n	8001950 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f023 0312 	bic.w	r3, r3, #18
 8001942:	f043 0210 	orr.w	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800194a:	2301      	movs	r3, #1
 800194c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001950:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001954:	4618      	mov	r0, r3
 8001956:	3768      	adds	r7, #104	; 0x68
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	fff0c007 	.word	0xfff0c007

08001960 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_ADC_IRQHandler+0x38>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80bc 	beq.w	8001b1c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80b6 	beq.w	8001b1c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d0:	d004      	beq.n	80019dc <HAL_ADC_IRQHandler+0x7c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a90      	ldr	r2, [pc, #576]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d106      	bne.n	80019ea <HAL_ADC_IRQHandler+0x8a>
 80019dc:	4b8f      	ldr	r3, [pc, #572]	; (8001c1c <HAL_ADC_IRQHandler+0x2bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d03e      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x106>
 80019e8:	e005      	b.n	80019f6 <HAL_ADC_IRQHandler+0x96>
 80019ea:	4b8d      	ldr	r3, [pc, #564]	; (8001c20 <HAL_ADC_IRQHandler+0x2c0>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d037      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x106>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fe:	d004      	beq.n	8001a0a <HAL_ADC_IRQHandler+0xaa>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a84      	ldr	r2, [pc, #528]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d106      	bne.n	8001a18 <HAL_ADC_IRQHandler+0xb8>
 8001a0a:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <HAL_ADC_IRQHandler+0x2bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d027      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x106>
 8001a16:	e005      	b.n	8001a24 <HAL_ADC_IRQHandler+0xc4>
 8001a18:	4b81      	ldr	r3, [pc, #516]	; (8001c20 <HAL_ADC_IRQHandler+0x2c0>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d020      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x106>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a2c:	d004      	beq.n	8001a38 <HAL_ADC_IRQHandler+0xd8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a79      	ldr	r2, [pc, #484]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d106      	bne.n	8001a46 <HAL_ADC_IRQHandler+0xe6>
 8001a38:	4b78      	ldr	r3, [pc, #480]	; (8001c1c <HAL_ADC_IRQHandler+0x2bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d010      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x106>
 8001a44:	e005      	b.n	8001a52 <HAL_ADC_IRQHandler+0xf2>
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_ADC_IRQHandler+0x2c0>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	d009      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x106>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a5a:	d004      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x106>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a70      	ldr	r2, [pc, #448]	; (8001c24 <HAL_ADC_IRQHandler+0x2c4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d104      	bne.n	8001a70 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	e00f      	b.n	8001a90 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a78:	d004      	beq.n	8001a84 <HAL_ADC_IRQHandler+0x124>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a66      	ldr	r2, [pc, #408]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d102      	bne.n	8001a8a <HAL_ADC_IRQHandler+0x12a>
 8001a84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a88:	e000      	b.n	8001a8c <HAL_ADC_IRQHandler+0x12c>
 8001a8a:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <HAL_ADC_IRQHandler+0x2c4>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d137      	bne.n	8001b0e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d132      	bne.n	8001b0e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d02d      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11a      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 020c 	bic.w	r2, r2, #12
 8001ace:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d112      	bne.n	8001b0e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
 8001af4:	e00b      	b.n	8001b0e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f043 0210 	orr.w	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fd28 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	220c      	movs	r2, #12
 8001b1a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x1d0>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10b      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8138 	beq.w	8001dac <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8132 	beq.w	8001dac <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5c:	d004      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x208>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a2d      	ldr	r2, [pc, #180]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d106      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x216>
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_ADC_IRQHandler+0x2bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d03e      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x292>
 8001b74:	e005      	b.n	8001b82 <HAL_ADC_IRQHandler+0x222>
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_ADC_IRQHandler+0x2c0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d037      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x292>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x236>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d106      	bne.n	8001ba4 <HAL_ADC_IRQHandler+0x244>
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_ADC_IRQHandler+0x2bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d027      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x292>
 8001ba2:	e005      	b.n	8001bb0 <HAL_ADC_IRQHandler+0x250>
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <HAL_ADC_IRQHandler+0x2c0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d020      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x292>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x264>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x272>
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_ADC_IRQHandler+0x2bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	d010      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x292>
 8001bd0:	e005      	b.n	8001bde <HAL_ADC_IRQHandler+0x27e>
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_ADC_IRQHandler+0x2c0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	d009      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x292>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x292>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_ADC_IRQHandler+0x2c4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d104      	bne.n	8001bfc <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	e018      	b.n	8001c2e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c04:	d004      	beq.n	8001c10 <HAL_ADC_IRQHandler+0x2b0>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <HAL_ADC_IRQHandler+0x2b8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d10b      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x2c8>
 8001c10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c14:	e009      	b.n	8001c2a <HAL_ADC_IRQHandler+0x2ca>
 8001c16:	bf00      	nop
 8001c18:	50000100 	.word	0x50000100
 8001c1c:	50000300 	.word	0x50000300
 8001c20:	50000700 	.word	0x50000700
 8001c24:	50000400 	.word	0x50000400
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_ADC_IRQHandler+0x514>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 80b0 	bne.w	8001d9e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 80a3 	bne.w	8001d9e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 809d 	bne.w	8001d9e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8097 	beq.w	8001d9e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c78:	d004      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x324>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7e      	ldr	r2, [pc, #504]	; (8001e78 <HAL_ADC_IRQHandler+0x518>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d106      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x332>
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <HAL_ADC_IRQHandler+0x51c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03e      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x3ae>
 8001c90:	e005      	b.n	8001c9e <HAL_ADC_IRQHandler+0x33e>
 8001c92:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <HAL_ADC_IRQHandler+0x520>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d037      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x3ae>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_IRQHandler+0x352>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a72      	ldr	r2, [pc, #456]	; (8001e78 <HAL_ADC_IRQHandler+0x518>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d106      	bne.n	8001cc0 <HAL_ADC_IRQHandler+0x360>
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_ADC_IRQHandler+0x51c>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d027      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x3ae>
 8001cbe:	e005      	b.n	8001ccc <HAL_ADC_IRQHandler+0x36c>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_ADC_IRQHandler+0x520>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	2b06      	cmp	r3, #6
 8001cca:	d020      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x3ae>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd4:	d004      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0x380>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a67      	ldr	r2, [pc, #412]	; (8001e78 <HAL_ADC_IRQHandler+0x518>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d106      	bne.n	8001cee <HAL_ADC_IRQHandler+0x38e>
 8001ce0:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_ADC_IRQHandler+0x51c>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	d010      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x3ae>
 8001cec:	e005      	b.n	8001cfa <HAL_ADC_IRQHandler+0x39a>
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <HAL_ADC_IRQHandler+0x520>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2b07      	cmp	r3, #7
 8001cf8:	d009      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x3ae>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d02:	d004      	beq.n	8001d0e <HAL_ADC_IRQHandler+0x3ae>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a5a      	ldr	r2, [pc, #360]	; (8001e74 <HAL_ADC_IRQHandler+0x514>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d104      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e00f      	b.n	8001d38 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d20:	d004      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x3cc>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_ADC_IRQHandler+0x518>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x3d2>
 8001d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_IRQHandler+0x3d4>
 8001d32:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_ADC_IRQHandler+0x514>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d12d      	bne.n	8001d9e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d11a      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d5e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d112      	bne.n	8001d9e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
 8001d84:	e00b      	b.n	8001d9e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8c4 	bl	8001f2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2260      	movs	r2, #96	; 0x60
 8001daa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d011      	beq.n	8001dda <HAL_ADC_IRQHandler+0x47a>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00c      	beq.n	8001dda <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fbd3 	bl	8001578 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x4aa>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8aa 	bl	8001f54 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e08:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x4da>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f89c 	bl	8001f68 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e38:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d04f      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x584>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d04a      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e02d      	b.n	8001eb8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e64:	d004      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x510>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_ADC_IRQHandler+0x518>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d109      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x524>
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_ADC_IRQHandler+0x51c>)
 8001e72:	e008      	b.n	8001e86 <HAL_ADC_IRQHandler+0x526>
 8001e74:	50000400 	.word	0x50000400
 8001e78:	50000100 	.word	0x50000100
 8001e7c:	50000300 	.word	0x50000300
 8001e80:	50000700 	.word	0x50000700
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_ADC_IRQHandler+0x5c8>)
 8001e86:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d10a      	bne.n	8001eb8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e007      	b.n	8001eb8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d10e      	bne.n	8001edc <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f043 0202 	orr.w	r2, r3, #2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fb58 	bl	800158c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d018      	beq.n	8001f20 <HAL_ADC_IRQHandler+0x5c0>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f043 0208 	orr.w	r2, r3, #8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f810 	bl	8001f40 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	50000700 	.word	0x50000700

08001f2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b09b      	sub	sp, #108	; 0x6c
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x22>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e2ca      	b.n	8002534 <HAL_ADC_ConfigChannel+0x5b8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 82ae 	bne.w	8002512 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d81c      	bhi.n	8001ff8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	231f      	movs	r3, #31
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4019      	ands	r1, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa00 f203 	lsl.w	r2, r0, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff6:	e063      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d81e      	bhi.n	800203e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	3b1e      	subs	r3, #30
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4019      	ands	r1, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	3b1e      	subs	r3, #30
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
 800203c:	e040      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b0e      	cmp	r3, #14
 8002044:	d81e      	bhi.n	8002084 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	3b3c      	subs	r3, #60	; 0x3c
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4019      	ands	r1, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	3b3c      	subs	r3, #60	; 0x3c
 8002076:	fa00 f203 	lsl.w	r2, r0, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
 8002082:	e01d      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	3b5a      	subs	r3, #90	; 0x5a
 8002098:	221f      	movs	r2, #31
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	4019      	ands	r1, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	3b5a      	subs	r3, #90	; 0x5a
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 80e5 	bne.w	800229a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	d91c      	bls.n	8002112 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6999      	ldr	r1, [r3, #24]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	3b1e      	subs	r3, #30
 80020ea:	2207      	movs	r2, #7
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4019      	ands	r1, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6898      	ldr	r0, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	3b1e      	subs	r3, #30
 8002104:	fa00 f203 	lsl.w	r2, r0, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	619a      	str	r2, [r3, #24]
 8002110:	e019      	b.n	8002146 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6959      	ldr	r1, [r3, #20]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	2207      	movs	r2, #7
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	4019      	ands	r1, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6898      	ldr	r0, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	fa00 f203 	lsl.w	r2, r0, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	3b01      	subs	r3, #1
 8002164:	2b03      	cmp	r3, #3
 8002166:	d84f      	bhi.n	8002208 <HAL_ADC_ConfigChannel+0x28c>
 8002168:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <HAL_ADC_ConfigChannel+0x1f4>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	08002181 	.word	0x08002181
 8002174:	080021a3 	.word	0x080021a3
 8002178:	080021c5 	.word	0x080021c5
 800217c:	080021e7 	.word	0x080021e7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002186:	4b9a      	ldr	r3, [pc, #616]	; (80023f0 <HAL_ADC_ConfigChannel+0x474>)
 8002188:	4013      	ands	r3, r2
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	0691      	lsls	r1, r2, #26
 8002190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002192:	430a      	orrs	r2, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800219e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021a0:	e07e      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021a8:	4b91      	ldr	r3, [pc, #580]	; (80023f0 <HAL_ADC_ConfigChannel+0x474>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	0691      	lsls	r1, r2, #26
 80021b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b4:	430a      	orrs	r2, r1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021c0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021c2:	e06d      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <HAL_ADC_ConfigChannel+0x474>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	0691      	lsls	r1, r2, #26
 80021d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021d6:	430a      	orrs	r2, r1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021e2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021e4:	e05c      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ec:	4b80      	ldr	r3, [pc, #512]	; (80023f0 <HAL_ADC_ConfigChannel+0x474>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	0691      	lsls	r1, r2, #26
 80021f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021f8:	430a      	orrs	r2, r1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002204:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002206:	e04b      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	429a      	cmp	r2, r3
 800221a:	d107      	bne.n	800222c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800222a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	429a      	cmp	r2, r3
 800223e:	d107      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	069b      	lsls	r3, r3, #26
 8002260:	429a      	cmp	r2, r3
 8002262:	d107      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002272:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800227a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	429a      	cmp	r2, r3
 8002286:	d10a      	bne.n	800229e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002296:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002298:	e001      	b.n	800229e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x324>
      break;
 800229e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x344>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x344>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x346>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8130 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d00f      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2201      	movs	r2, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	400a      	ands	r2, r1
 80022ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022ee:	e049      	b.n	8002384 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	409a      	lsls	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b09      	cmp	r3, #9
 8002310:	d91c      	bls.n	800234c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6999      	ldr	r1, [r3, #24]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	3b1b      	subs	r3, #27
 8002324:	2207      	movs	r2, #7
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	4019      	ands	r1, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6898      	ldr	r0, [r3, #8]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1b      	subs	r3, #27
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	619a      	str	r2, [r3, #24]
 800234a:	e01b      	b.n	8002384 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6959      	ldr	r1, [r3, #20]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	2207      	movs	r2, #7
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	4019      	ands	r1, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6898      	ldr	r0, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	fa00 f203 	lsl.w	r2, r0, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238c:	d004      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x41c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_ADC_ConfigChannel+0x478>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x420>
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_ADC_ConfigChannel+0x47c>)
 800239a:	e000      	b.n	800239e <HAL_ADC_ConfigChannel+0x422>
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_ADC_ConfigChannel+0x480>)
 800239e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d105      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023b8:	2b11      	cmp	r3, #17
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	f040 80ab 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80023d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 80a4 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x484>
 80023ea:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <HAL_ADC_ConfigChannel+0x478>)
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e022      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4ba>
 80023f0:	83fff000 	.word	0x83fff000
 80023f4:	50000100 	.word	0x50000100
 80023f8:	50000300 	.word	0x50000300
 80023fc:	50000700 	.word	0x50000700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <HAL_ADC_ConfigChannel+0x5c4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d103      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x496>
 800240a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e011      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4ba>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a4b      	ldr	r2, [pc, #300]	; (8002544 <HAL_ADC_ConfigChannel+0x5c8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x4a6>
 800241c:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_ADC_ConfigChannel+0x5cc>)
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e009      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4ba>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_ADC_ConfigChannel+0x5cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d102      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x4b6>
 800242c:	4b45      	ldr	r3, [pc, #276]	; (8002544 <HAL_ADC_ConfigChannel+0x5c8>)
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e001      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4ba>
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d108      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x4da>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x4da>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_ADC_ConfigChannel+0x4dc>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d150      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800245c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_ADC_ConfigChannel+0x502>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x502>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_ADC_ConfigChannel+0x504>
 800247e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002480:	2b00      	cmp	r3, #0
 8002482:	d13c      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b10      	cmp	r3, #16
 800248a:	d11d      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x54c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002494:	d118      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800249e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_ADC_ConfigChannel+0x5d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <HAL_ADC_ConfigChannel+0x5d4>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	0c9a      	lsrs	r2, r3, #18
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024b8:	e002      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3b01      	subs	r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f9      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024c6:	e02e      	b.n	8002526 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b11      	cmp	r3, #17
 80024ce:	d10b      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x56c>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d8:	d106      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80024da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80024e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024e6:	e01e      	b.n	8002526 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b12      	cmp	r3, #18
 80024ee:	d11a      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024fc:	e013      	b.n	8002526 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0220 	orr.w	r2, r3, #32
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002510:	e00a      	b.n	8002528 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002524:	e000      	b.n	8002528 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002526:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002530:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002534:	4618      	mov	r0, r3
 8002536:	376c      	adds	r7, #108	; 0x6c
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	50000100 	.word	0x50000100
 8002544:	50000400 	.word	0x50000400
 8002548:	50000500 	.word	0x50000500
 800254c:	20000000 	.word	0x20000000
 8002550:	431bde83 	.word	0x431bde83

08002554 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002554:	b480      	push	{r7}
 8002556:	b099      	sub	sp, #100	; 0x64
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256c:	d102      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800256e:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	e01a      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6a      	ldr	r2, [pc, #424]	; (8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d103      	bne.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800257e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e011      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a67      	ldr	r2, [pc, #412]	; (8002728 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d102      	bne.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	e009      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a64      	ldr	r2, [pc, #400]	; (800272c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025a0:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	e001      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b0      	b.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80025be:	2302      	movs	r3, #2
 80025c0:	e0a9      	b.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 808d 	bne.w	80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 8086 	bne.w	80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f0:	d004      	beq.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025fc:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80025fe:	e000      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002600:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002602:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d040      	beq.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800260c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800261e:	035b      	lsls	r3, r3, #13
 8002620:	430b      	orrs	r3, r1
 8002622:	431a      	orrs	r2, r3
 8002624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002626:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d108      	bne.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002648:	2300      	movs	r3, #0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d15c      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800266a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800266c:	2b00      	cmp	r3, #0
 800266e:	d14b      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002678:	f023 030f 	bic.w	r3, r3, #15
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	6811      	ldr	r1, [r2, #0]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	6892      	ldr	r2, [r2, #8]
 8002684:	430a      	orrs	r2, r1
 8002686:	431a      	orrs	r2, r3
 8002688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800268a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	e03c      	b.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800268e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002698:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d108      	bne.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d123      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80026dc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d112      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80026e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026ea:	f023 030f 	bic.w	r3, r3, #15
 80026ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026f2:	e009      	b.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002706:	e000      	b.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002708:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002716:	4618      	mov	r0, r3
 8002718:	3764      	adds	r7, #100	; 0x64
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	50000100 	.word	0x50000100
 8002728:	50000400 	.word	0x50000400
 800272c:	50000500 	.word	0x50000500
 8002730:	50000300 	.word	0x50000300
 8002734:	50000700 	.word	0x50000700

08002738 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <ADC_Disable+0x2c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <ADC_Disable+0x2c>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <ADC_Disable+0x2e>
 8002764:	2300      	movs	r3, #0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d047      	beq.n	80027fa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030d 	and.w	r3, r3, #13
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10f      	bne.n	8002798 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0202 	orr.w	r2, r2, #2
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2203      	movs	r2, #3
 800278e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002790:	f7fe fedc 	bl	800154c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002796:	e029      	b.n	80027ec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0210 	orr.w	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e023      	b.n	80027fc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027b4:	f7fe feca 	bl	800154c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d914      	bls.n	80027ec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d10d      	bne.n	80027ec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e007      	b.n	80027fc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d0dc      	beq.n	80027b4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0b      	blt.n	8002892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <__NVIC_EnableIRQ+0x38>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	; (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	; (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002970:	d301      	bcc.n	8002976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <SysTick_Config+0x40>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297e:	210f      	movs	r1, #15
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f7ff ff8e 	bl	80028a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <SysTick_Config+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <SysTick_Config+0x40>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff29 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029cc:	f7ff ff3e 	bl	800284c <__NVIC_GetPriorityGrouping>
 80029d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7ff ff8e 	bl	80028f8 <NVIC_EncodePriority>
 80029dc:	4602      	mov	r2, r0
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff5d 	bl	80028a4 <__NVIC_SetPriority>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff31 	bl	8002868 <__NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffa2 	bl	8002960 <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d008      	beq.n	8002a4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e020      	b.n	8002a8c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 020e 	bic.w	r2, r2, #14
 8002a58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d005      	beq.n	8002aba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	e027      	b.n	8002b0a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 020e 	bic.w	r2, r2, #14
 8002ac8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
    } 
  }
  return status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_FLASH_Program+0xd8>)
 8002b30:	7e1b      	ldrb	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_FLASH_Program+0x26>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e054      	b.n	8002be4 <HAL_FLASH_Program+0xd0>
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <HAL_FLASH_Program+0xd8>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b44:	f000 f8a8 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d144      	bne.n	8002bdc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	757b      	strb	r3, [r7, #21]
 8002b5c:	e007      	b.n	8002b6e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d102      	bne.n	8002b6a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002b64:	2302      	movs	r3, #2
 8002b66:	757b      	strb	r3, [r7, #21]
 8002b68:	e001      	b.n	8002b6e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75bb      	strb	r3, [r7, #22]
 8002b72:	e02d      	b.n	8002bd0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002b74:	7dbb      	ldrb	r3, [r7, #22]
 8002b76:	005a      	lsls	r2, r3, #1
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	eb02 0c03 	add.w	ip, r2, r3
 8002b7e:	7dbb      	ldrb	r3, [r7, #22]
 8002b80:	0119      	lsls	r1, r3, #4
 8002b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b86:	f1c1 0620 	rsb	r6, r1, #32
 8002b8a:	f1a1 0020 	sub.w	r0, r1, #32
 8002b8e:	fa22 f401 	lsr.w	r4, r2, r1
 8002b92:	fa03 f606 	lsl.w	r6, r3, r6
 8002b96:	4334      	orrs	r4, r6
 8002b98:	fa23 f000 	lsr.w	r0, r3, r0
 8002b9c:	4304      	orrs	r4, r0
 8002b9e:	fa23 f501 	lsr.w	r5, r3, r1
 8002ba2:	b2a3      	uxth	r3, r4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4660      	mov	r0, ip
 8002ba8:	f000 f85a 	bl	8002c60 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bb0:	f000 f872 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_FLASH_Program+0xdc>)
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <HAL_FLASH_Program+0xdc>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002bca:	7dbb      	ldrb	r3, [r7, #22]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	75bb      	strb	r3, [r7, #22]
 8002bd0:	7dba      	ldrb	r2, [r7, #22]
 8002bd2:	7d7b      	ldrb	r3, [r7, #21]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3cd      	bcc.n	8002b74 <HAL_FLASH_Program+0x60>
 8002bd8:	e000      	b.n	8002bdc <HAL_FLASH_Program+0xc8>
      {
        break;
 8002bda:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_FLASH_Program+0xd8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	761a      	strb	r2, [r3, #24]

  return status;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bec:	20000248 	.word	0x20000248
 8002bf0:	40022000 	.word	0x40022000

08002bf4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_FLASH_Unlock+0x40>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_FLASH_Unlock+0x40>)
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_FLASH_Unlock+0x44>)
 8002c0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_FLASH_Unlock+0x40>)
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_FLASH_Unlock+0x48>)
 8002c14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_FLASH_Unlock+0x40>)
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002c26:	79fb      	ldrb	r3, [r7, #7]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40022000 	.word	0x40022000
 8002c38:	45670123 	.word	0x45670123
 8002c3c:	cdef89ab 	.word	0xcdef89ab

08002c40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_FLASH_Lock+0x1c>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_FLASH_Lock+0x1c>)
 8002c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40022000 	.word	0x40022000

08002c60 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <FLASH_Program_HalfWord+0x30>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <FLASH_Program_HalfWord+0x34>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <FLASH_Program_HalfWord+0x34>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	887a      	ldrh	r2, [r7, #2]
 8002c82:	801a      	strh	r2, [r3, #0]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	20000248 	.word	0x20000248
 8002c94:	40022000 	.word	0x40022000

08002c98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7fe fc54 	bl	800154c <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ca6:	e010      	b.n	8002cca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d00c      	beq.n	8002cca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <FLASH_WaitForLastOperation+0x2e>
 8002cb6:	f7fe fc49 	bl	800154c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d201      	bcs.n	8002cca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e01f      	b.n	8002d0a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d0e8      	beq.n	8002ca8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d102      	bne.n	8002ce8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d005      	beq.n	8002d00 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d103      	bne.n	8002d08 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d00:	f000 f80a 	bl	8002d18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40022000 	.word	0x40022000

08002d18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <FLASH_SetErrorCode+0x5c>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d109      	bne.n	8002d42 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <FLASH_SetErrorCode+0x60>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <FLASH_SetErrorCode+0x60>)
 8002d38:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f043 0310 	orr.w	r3, r3, #16
 8002d40:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <FLASH_SetErrorCode+0x5c>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d109      	bne.n	8002d62 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <FLASH_SetErrorCode+0x60>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <FLASH_SetErrorCode+0x60>)
 8002d58:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d62:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <FLASH_SetErrorCode+0x5c>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	60d3      	str	r3, [r2, #12]
}  
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40022000 	.word	0x40022000
 8002d78:	20000248 	.word	0x20000248

08002d7c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_FLASHEx_Erase+0xcc>)
 8002d90:	7e1b      	ldrb	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_FLASHEx_Erase+0x1e>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e052      	b.n	8002e40 <HAL_FLASHEx_Erase+0xc4>
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <HAL_FLASHEx_Erase+0xcc>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d115      	bne.n	8002dd4 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002da8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dac:	f7ff ff74 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d140      	bne.n	8002e38 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002db6:	f000 f84b 	bl	8002e50 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dbe:	f7ff ff6b 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_FLASHEx_Erase+0xd0>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <HAL_FLASHEx_Erase+0xd0>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6113      	str	r3, [r2, #16]
 8002dd2:	e031      	b.n	8002e38 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002dd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dd8:	f7ff ff5e 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d12a      	bne.n	8002e38 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	e019      	b.n	8002e26 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002df2:	68b8      	ldr	r0, [r7, #8]
 8002df4:	f000 f846 	bl	8002e84 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002df8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dfc:	f7ff ff4c 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_FLASHEx_Erase+0xd0>)
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HAL_FLASHEx_Erase+0xd0>)
 8002e0a:	f023 0302 	bic.w	r3, r3, #2
 8002e0e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	601a      	str	r2, [r3, #0]
            break;
 8002e1c:	e00c      	b.n	8002e38 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e24:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	02da      	lsls	r2, r3, #11
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d3dc      	bcc.n	8002df2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_FLASHEx_Erase+0xcc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	761a      	strb	r2, [r3, #24]

  return status;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000248 	.word	0x20000248
 8002e4c:	40022000 	.word	0x40022000

08002e50 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <FLASH_MassErase+0x2c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <FLASH_MassErase+0x30>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <FLASH_MassErase+0x30>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <FLASH_MassErase+0x30>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <FLASH_MassErase+0x30>)
 8002e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e70:	6113      	str	r3, [r2, #16]
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	20000248 	.word	0x20000248
 8002e80:	40022000 	.word	0x40022000

08002e84 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <FLASH_PageErase+0x38>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <FLASH_PageErase+0x3c>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <FLASH_PageErase+0x3c>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <FLASH_PageErase+0x3c>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <FLASH_PageErase+0x3c>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <FLASH_PageErase+0x3c>)
 8002eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eae:	6113      	str	r3, [r2, #16]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	20000248 	.word	0x20000248
 8002ec0:	40022000 	.word	0x40022000

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed2:	e154      	b.n	800317e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8146 	beq.w	8003178 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d005      	beq.n	8002f04 <HAL_GPIO_Init+0x40>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d130      	bne.n	8002f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 0201 	and.w	r2, r3, #1
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d017      	beq.n	8002fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d123      	bne.n	8002ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	6939      	ldr	r1, [r7, #16]
 8002ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0203 	and.w	r2, r3, #3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80a0 	beq.w	8003178 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_GPIO_Init+0x2d8>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_GPIO_Init+0x2d8>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6193      	str	r3, [r2, #24]
 8003044:	4b55      	ldr	r3, [pc, #340]	; (800319c <HAL_GPIO_Init+0x2d8>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003050:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <HAL_GPIO_Init+0x2dc>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800307a:	d019      	beq.n	80030b0 <HAL_GPIO_Init+0x1ec>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a49      	ldr	r2, [pc, #292]	; (80031a4 <HAL_GPIO_Init+0x2e0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <HAL_GPIO_Init+0x1e8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a48      	ldr	r2, [pc, #288]	; (80031a8 <HAL_GPIO_Init+0x2e4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00d      	beq.n	80030a8 <HAL_GPIO_Init+0x1e4>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a47      	ldr	r2, [pc, #284]	; (80031ac <HAL_GPIO_Init+0x2e8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <HAL_GPIO_Init+0x1e0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a46      	ldr	r2, [pc, #280]	; (80031b0 <HAL_GPIO_Init+0x2ec>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_GPIO_Init+0x1dc>
 800309c:	2304      	movs	r3, #4
 800309e:	e008      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030a0:	2305      	movs	r3, #5
 80030a2:	e006      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030a4:	2303      	movs	r3, #3
 80030a6:	e004      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030b0:	2300      	movs	r3, #0
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	f002 0203 	and.w	r2, r2, #3
 80030b8:	0092      	lsls	r2, r2, #2
 80030ba:	4093      	lsls	r3, r2
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030c2:	4937      	ldr	r1, [pc, #220]	; (80031a0 <HAL_GPIO_Init+0x2dc>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d0:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030f4:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030fa:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800311e:	4a25      	ldr	r2, [pc, #148]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003148:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_GPIO_Init+0x2f0>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f aea3 	bne.w	8002ed4 <HAL_GPIO_Init+0x10>
  }
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	48000400 	.word	0x48000400
 80031a8:	48000800 	.word	0x48000800
 80031ac:	48000c00 	.word	0x48000c00
 80031b0:	48001000 	.word	0x48001000
 80031b4:	40010400 	.word	0x40010400

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031be:	af00      	add	r7, sp, #0
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f001 b823 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 817d 	beq.w	80034ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031f4:	4bbc      	ldr	r3, [pc, #752]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d00c      	beq.n	800321a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003200:	4bb9      	ldr	r3, [pc, #740]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	d15c      	bne.n	80032c6 <HAL_RCC_OscConfig+0x10e>
 800320c:	4bb6      	ldr	r3, [pc, #728]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d155      	bne.n	80032c6 <HAL_RCC_OscConfig+0x10e>
 800321a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800322e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_RCC_OscConfig+0x94>
 8003246:	4ba8      	ldr	r3, [pc, #672]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	e015      	b.n	8003278 <HAL_RCC_OscConfig+0xc0>
 800324c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003250:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003264:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003268:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003274:	4b9c      	ldr	r3, [pc, #624]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800327c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003280:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003284:	fa92 f2a2 	rbit	r2, r2
 8003288:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800328c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f002 021f 	and.w	r2, r2, #31
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 811f 	beq.w	80034ec <HAL_RCC_OscConfig+0x334>
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 8116 	bne.w	80034ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f000 bfaf 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x12e>
 80032d8:	4b83      	ldr	r3, [pc, #524]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a82      	ldr	r2, [pc, #520]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e036      	b.n	8003354 <HAL_RCC_OscConfig+0x19c>
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x158>
 80032f6:	4b7c      	ldr	r3, [pc, #496]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7b      	ldr	r2, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a78      	ldr	r2, [pc, #480]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e021      	b.n	8003354 <HAL_RCC_OscConfig+0x19c>
 8003310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003314:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0x184>
 8003322:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a70      	ldr	r2, [pc, #448]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6d      	ldr	r2, [pc, #436]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	e00b      	b.n	8003354 <HAL_RCC_OscConfig+0x19c>
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a69      	ldr	r2, [pc, #420]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a66      	ldr	r2, [pc, #408]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 800334e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003352:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003354:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f023 020f 	bic.w	r2, r3, #15
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	495f      	ldr	r1, [pc, #380]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 800336a:	4313      	orrs	r3, r2
 800336c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d059      	beq.n	8003432 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fe f8e5 	bl	800154c <HAL_GetTick>
 8003382:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe f8e0 	bl	800154c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	; 0x64
 8003396:	d902      	bls.n	800339e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	f000 bf43 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
 800339e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80033b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <HAL_RCC_OscConfig+0x218>
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	e015      	b.n	80033fc <HAL_RCC_OscConfig+0x244>
 80033d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033f8:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003400:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003404:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003408:	fa92 f2a2 	rbit	r2, r2
 800340c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003410:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	f042 0220 	orr.w	r2, r2, #32
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f002 021f 	and.w	r2, r2, #31
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f202 	lsl.w	r2, r1, r2
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ab      	beq.n	8003388 <HAL_RCC_OscConfig+0x1d0>
 8003430:	e05d      	b.n	80034ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003432:	f7fe f88b 	bl	800154c <HAL_GetTick>
 8003436:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe f886 	bl	800154c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d902      	bls.n	8003452 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	f000 bee9 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
 8003452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003456:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003466:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_RCC_OscConfig+0x2cc>
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	e015      	b.n	80034b0 <HAL_RCC_OscConfig+0x2f8>
 8003484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003488:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCC_OscConfig+0x330>)
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034bc:	fa92 f2a2 	rbit	r2, r2
 80034c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f002 021f 	and.w	r2, r2, #31
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f202 	lsl.w	r2, r1, r2
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ab      	bne.n	800343c <HAL_RCC_OscConfig+0x284>
 80034e4:	e003      	b.n	80034ee <HAL_RCC_OscConfig+0x336>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 817d 	beq.w	80037fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003504:	4ba6      	ldr	r3, [pc, #664]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003510:	4ba3      	ldr	r3, [pc, #652]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d172      	bne.n	8003602 <HAL_RCC_OscConfig+0x44a>
 800351c:	4ba0      	ldr	r3, [pc, #640]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d16c      	bne.n	8003602 <HAL_RCC_OscConfig+0x44a>
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800353a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_OscConfig+0x3a0>
 8003552:	4b93      	ldr	r3, [pc, #588]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e013      	b.n	8003580 <HAL_RCC_OscConfig+0x3c8>
 8003558:	2302      	movs	r3, #2
 800355a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800356a:	2302      	movs	r3, #2
 800356c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003570:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2202      	movs	r2, #2
 8003582:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003586:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800358a:	fa92 f2a2 	rbit	r2, r2
 800358e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003592:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003596:	fab2 f282 	clz	r2, r2
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f042 0220 	orr.w	r2, r2, #32
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f002 021f 	and.w	r2, r2, #31
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCC_OscConfig+0x410>
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d002      	beq.n	80035c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f000 be2e 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	21f8      	movs	r1, #248	; 0xf8
 80035de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035e6:	fa91 f1a1 	rbit	r1, r1
 80035ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035f2:	fab1 f181 	clz	r1, r1
 80035f6:	b2c9      	uxtb	r1, r1
 80035f8:	408b      	lsls	r3, r1
 80035fa:	4969      	ldr	r1, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003600:	e0fd      	b.n	80037fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8088 	beq.w	8003724 <HAL_RCC_OscConfig+0x56c>
 8003614:	2301      	movs	r3, #1
 8003616:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003626:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	2301      	movs	r3, #1
 800363e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fd ff84 	bl	800154c <HAL_GetTick>
 8003644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364a:	f7fd ff7f 	bl	800154c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d902      	bls.n	8003660 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	f000 bde2 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003672:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d102      	bne.n	8003690 <HAL_RCC_OscConfig+0x4d8>
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	e013      	b.n	80036b8 <HAL_RCC_OscConfig+0x500>
 8003690:	2302      	movs	r3, #2
 8003692:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036a2:	2302      	movs	r3, #2
 80036a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036b4:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	2202      	movs	r2, #2
 80036ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036c2:	fa92 f2a2 	rbit	r2, r2
 80036c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80036ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036ce:	fab2 f282 	clz	r2, r2
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f042 0220 	orr.w	r2, r2, #32
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	f002 021f 	and.w	r2, r2, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f202 	lsl.w	r2, r1, r2
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0af      	beq.n	800364a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	21f8      	movs	r1, #248	; 0xf8
 8003700:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003708:	fa91 f1a1 	rbit	r1, r1
 800370c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003710:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003714:	fab1 f181 	clz	r1, r1
 8003718:	b2c9      	uxtb	r1, r1
 800371a:	408b      	lsls	r3, r1
 800371c:	4920      	ldr	r1, [pc, #128]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
 8003722:	e06c      	b.n	80037fe <HAL_RCC_OscConfig+0x646>
 8003724:	2301      	movs	r3, #1
 8003726:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003736:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003744:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fd fefc 	bl	800154c <HAL_GetTick>
 8003754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375a:	f7fd fef7 	bl	800154c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d902      	bls.n	8003770 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	f000 bd5a 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
 8003770:	2302      	movs	r3, #2
 8003772:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d104      	bne.n	80037a4 <HAL_RCC_OscConfig+0x5ec>
 800379a:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <HAL_RCC_OscConfig+0x5e8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	e015      	b.n	80037cc <HAL_RCC_OscConfig+0x614>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	2302      	movs	r3, #2
 80037a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037b6:	2302      	movs	r3, #2
 80037b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037c8:	4bc8      	ldr	r3, [pc, #800]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2202      	movs	r2, #2
 80037ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037d6:	fa92 f2a2 	rbit	r2, r2
 80037da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037e2:	fab2 f282 	clz	r2, r2
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f042 0220 	orr.w	r2, r2, #32
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	f002 021f 	and.w	r2, r2, #31
 80037f2:	2101      	movs	r1, #1
 80037f4:	fa01 f202 	lsl.w	r2, r1, r2
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ad      	bne.n	800375a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8110 	beq.w	8003a34 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d079      	beq.n	8003918 <HAL_RCC_OscConfig+0x760>
 8003824:	2301      	movs	r3, #1
 8003826:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	4bab      	ldr	r3, [pc, #684]	; (8003af0 <HAL_RCC_OscConfig+0x938>)
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	461a      	mov	r2, r3
 800384a:	2301      	movs	r3, #1
 800384c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7fd fe7d 	bl	800154c <HAL_GetTick>
 8003852:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003858:	f7fd fe78 	bl	800154c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d902      	bls.n	800386e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	f000 bcdb 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
 800386e:	2302      	movs	r3, #2
 8003870:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003888:	2202      	movs	r2, #2
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f2a3 	rbit	r2, r3
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038ac:	2202      	movs	r2, #2
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	fa93 f2a3 	rbit	r2, r3
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c8:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 80038ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038d4:	2102      	movs	r1, #2
 80038d6:	6019      	str	r1, [r3, #0]
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f1a3 	rbit	r1, r3
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038ee:	6019      	str	r1, [r3, #0]
  return result;
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0a0      	beq.n	8003858 <HAL_RCC_OscConfig+0x6a0>
 8003916:	e08d      	b.n	8003a34 <HAL_RCC_OscConfig+0x87c>
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003928:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f2a3 	rbit	r2, r3
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800393a:	601a      	str	r2, [r3, #0]
  return result;
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003944:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_OscConfig+0x938>)
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	461a      	mov	r2, r3
 8003956:	2300      	movs	r3, #0
 8003958:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395a:	f7fd fdf7 	bl	800154c <HAL_GetTick>
 800395e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003964:	f7fd fdf2 	bl	800154c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d902      	bls.n	800397a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	f000 bc55 	b.w	8004224 <HAL_RCC_OscConfig+0x106c>
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003982:	2202      	movs	r2, #2
 8003984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	fa93 f2a3 	rbit	r2, r3
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039a6:	2202      	movs	r2, #2
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039ca:	2202      	movs	r2, #2
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fa93 f2a3 	rbit	r2, r3
 80039dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e6:	4b41      	ldr	r3, [pc, #260]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 80039e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039f2:	2102      	movs	r1, #2
 80039f4:	6019      	str	r1, [r3, #0]
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	fa93 f1a3 	rbit	r1, r3
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a0c:	6019      	str	r1, [r3, #0]
  return result;
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2101      	movs	r1, #1
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d197      	bne.n	8003964 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 81a1 	beq.w	8003d8c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	4a22      	ldr	r2, [pc, #136]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	61d3      	str	r3, [r2, #28]
 8003a68:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a74:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x93c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11a      	bne.n	8003acc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_RCC_OscConfig+0x93c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <HAL_RCC_OscConfig+0x93c>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fd fd53 	bl	800154c <HAL_GetTick>
 8003aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	e009      	b.n	8003ac0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aac:	f7fd fd4e 	bl	800154c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b64      	cmp	r3, #100	; 0x64
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e3b1      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_OscConfig+0x93c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ef      	beq.n	8003aac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCC_OscConfig+0x940>
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4a02      	ldr	r2, [pc, #8]	; (8003aec <HAL_RCC_OscConfig+0x934>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6213      	str	r3, [r2, #32]
 8003ae8:	e03c      	b.n	8003b64 <HAL_RCC_OscConfig+0x9ac>
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	10908120 	.word	0x10908120
 8003af4:	40007000 	.word	0x40007000
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x96a>
 8003b08:	4bc1      	ldr	r3, [pc, #772]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4ac0      	ldr	r2, [pc, #768]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6213      	str	r3, [r2, #32]
 8003b14:	4bbe      	ldr	r3, [pc, #760]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4abd      	ldr	r2, [pc, #756]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b1a:	f023 0304 	bic.w	r3, r3, #4
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	e020      	b.n	8003b64 <HAL_RCC_OscConfig+0x9ac>
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x994>
 8003b32:	4bb7      	ldr	r3, [pc, #732]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	4ab6      	ldr	r2, [pc, #728]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6213      	str	r3, [r2, #32]
 8003b3e:	4bb4      	ldr	r3, [pc, #720]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4ab3      	ldr	r2, [pc, #716]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6213      	str	r3, [r2, #32]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x9ac>
 8003b4c:	4bb0      	ldr	r3, [pc, #704]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4aaf      	ldr	r2, [pc, #700]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	4bad      	ldr	r3, [pc, #692]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4aac      	ldr	r2, [pc, #688]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8081 	beq.w	8003c78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b76:	f7fd fce9 	bl	800154c <HAL_GetTick>
 8003b7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd fce4 	bl	800154c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e345      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	fa93 f2a3 	rbit	r2, r3
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bde:	601a      	str	r2, [r3, #0]
  return result;
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003be8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d102      	bne.n	8003c04 <HAL_RCC_OscConfig+0xa4c>
 8003bfe:	4b84      	ldr	r3, [pc, #528]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	e013      	b.n	8003c2c <HAL_RCC_OscConfig+0xa74>
 8003c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	fa93 f2a3 	rbit	r2, r3
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c34:	2102      	movs	r1, #2
 8003c36:	6011      	str	r1, [r2, #0]
 8003c38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	fa92 f1a2 	rbit	r1, r2
 8003c46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c4e:	6011      	str	r1, [r2, #0]
  return result;
 8003c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c54:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d084      	beq.n	8003b80 <HAL_RCC_OscConfig+0x9c8>
 8003c76:	e07f      	b.n	8003d78 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c78:	f7fd fc68 	bl	800154c <HAL_GetTick>
 8003c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c80:	e00b      	b.n	8003c9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd fc63 	bl	800154c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e2c4      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003caa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f2a3 	rbit	r2, r3
 8003cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cdc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ce0:	601a      	str	r2, [r3, #0]
  return result;
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_OscConfig+0xb4e>
 8003d00:	4b43      	ldr	r3, [pc, #268]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	e013      	b.n	8003d2e <HAL_RCC_OscConfig+0xb76>
 8003d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d0e:	2202      	movs	r2, #2
 8003d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	fa93 f2a3 	rbit	r2, r3
 8003d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d36:	2102      	movs	r1, #2
 8003d38:	6011      	str	r1, [r2, #0]
 8003d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	fa92 f1a2 	rbit	r1, r2
 8003d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d50:	6011      	str	r1, [r2, #0]
  return result;
 8003d52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	fab2 f282 	clz	r2, r2
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	f002 021f 	and.w	r2, r2, #31
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d184      	bne.n	8003c82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d80:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8242 	beq.w	8004222 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_RCC_OscConfig+0xc58>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	f000 8213 	beq.w	80041d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f040 8162 	bne.w	8004082 <HAL_RCC_OscConfig+0xeca>
 8003dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003dc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fa93 f2a3 	rbit	r2, r3
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003de2:	601a      	str	r2, [r3, #0]
  return result;
 8003de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003dec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003df8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2300      	movs	r3, #0
 8003e02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd fba2 	bl	800154c <HAL_GetTick>
 8003e08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0c:	e00c      	b.n	8003e28 <HAL_RCC_OscConfig+0xc70>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd fb9a 	bl	800154c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e1fd      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	fa93 f2a3 	rbit	r2, r3
 8003e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e48:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e4c:	601a      	str	r2, [r3, #0]
  return result;
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <HAL_RCC_OscConfig+0xcba>
 8003e6c:	4bb0      	ldr	r3, [pc, #704]	; (8004130 <HAL_RCC_OscConfig+0xf78>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	e027      	b.n	8003ec2 <HAL_RCC_OscConfig+0xd0a>
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fa93 f2a3 	rbit	r2, r3
 8003e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e92:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eaa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	fa93 f2a3 	rbit	r2, r3
 8003eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	4b9c      	ldr	r3, [pc, #624]	; (8004130 <HAL_RCC_OscConfig+0xf78>)
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ec6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003eca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ece:	6011      	str	r1, [r2, #0]
 8003ed0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	fa92 f1a2 	rbit	r1, r2
 8003ede:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ee6:	6011      	str	r1, [r2, #0]
  return result;
 8003ee8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	fab2 f282 	clz	r2, r2
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	f042 0220 	orr.w	r2, r2, #32
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	f002 021f 	and.w	r2, r2, #31
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f202 	lsl.w	r2, r1, r2
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d182      	bne.n	8003e14 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0xf78>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	497f      	ldr	r1, [pc, #508]	; (8004130 <HAL_RCC_OscConfig+0xf78>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	604b      	str	r3, [r1, #4]
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	fa93 f2a3 	rbit	r2, r3
 8003f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f5a:	601a      	str	r2, [r3, #0]
  return result;
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f64:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	461a      	mov	r2, r3
 8003f78:	2301      	movs	r3, #1
 8003f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fae6 	bl	800154c <HAL_GetTick>
 8003f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f84:	e009      	b.n	8003f9a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fd fae1 	bl	800154c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e144      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fa93 f2a3 	rbit	r2, r3
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fbe:	601a      	str	r2, [r3, #0]
  return result;
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xe2c>
 8003fde:	4b54      	ldr	r3, [pc, #336]	; (8004130 <HAL_RCC_OscConfig+0xf78>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	e027      	b.n	8004034 <HAL_RCC_OscConfig+0xe7c>
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	fa93 f2a3 	rbit	r2, r3
 8004000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004004:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	fa93 f2a3 	rbit	r2, r3
 8004026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCC_OscConfig+0xf78>)
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004038:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800403c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004046:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	fa92 f1a2 	rbit	r1, r2
 8004050:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004054:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004058:	6011      	str	r1, [r2, #0]
  return result;
 800405a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800405e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	fab2 f282 	clz	r2, r2
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	f042 0220 	orr.w	r2, r2, #32
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	f002 021f 	and.w	r2, r2, #31
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f202 	lsl.w	r2, r1, r2
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d082      	beq.n	8003f86 <HAL_RCC_OscConfig+0xdce>
 8004080:	e0cf      	b.n	8004222 <HAL_RCC_OscConfig+0x106a>
 8004082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004086:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800408a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800408e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	fa93 f2a3 	rbit	r2, r3
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040a6:	601a      	str	r2, [r3, #0]
  return result;
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	461a      	mov	r2, r3
 80040c4:	2300      	movs	r3, #0
 80040c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fd fa40 	bl	800154c <HAL_GetTick>
 80040cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d0:	e009      	b.n	80040e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fd fa3b 	bl	800154c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e09e      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
 80040e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	fa93 f2a3 	rbit	r2, r3
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800410a:	601a      	str	r2, [r3, #0]
  return result;
 800410c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004110:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004114:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d104      	bne.n	8004134 <HAL_RCC_OscConfig+0xf7c>
 800412a:	4b01      	ldr	r3, [pc, #4]	; (8004130 <HAL_RCC_OscConfig+0xf78>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	e029      	b.n	8004184 <HAL_RCC_OscConfig+0xfcc>
 8004130:	40021000 	.word	0x40021000
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800413c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004146:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	fa93 f2a3 	rbit	r2, r3
 8004150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004154:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f2a3 	rbit	r2, r3
 8004176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_OscConfig+0x1078>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004188:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800418c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004190:	6011      	str	r1, [r2, #0]
 8004192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004196:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	fa92 f1a2 	rbit	r1, r2
 80041a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041a8:	6011      	str	r1, [r2, #0]
  return result;
 80041aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	fab2 f282 	clz	r2, r2
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	f042 0220 	orr.w	r2, r2, #32
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	f002 021f 	and.w	r2, r2, #31
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d180      	bne.n	80040d2 <HAL_RCC_OscConfig+0xf1a>
 80041d0:	e027      	b.n	8004222 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e01e      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_OscConfig+0x1078>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	429a      	cmp	r2, r3
 8004204:	d10b      	bne.n	800421e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004206:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800420a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b09e      	sub	sp, #120	; 0x78
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e162      	b.n	8004512 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b90      	ldr	r3, [pc, #576]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d910      	bls.n	800427c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b8d      	ldr	r3, [pc, #564]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 0207 	bic.w	r2, r3, #7
 8004262:	498b      	ldr	r1, [pc, #556]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b89      	ldr	r3, [pc, #548]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e14a      	b.n	8004512 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004288:	4b82      	ldr	r3, [pc, #520]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	497f      	ldr	r1, [pc, #508]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 8004296:	4313      	orrs	r3, r2
 8004298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80dc 	beq.w	8004460 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d13c      	bne.n	800432a <HAL_RCC_ClockConfig+0xf6>
 80042b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c0:	fab3 f383 	clz	r3, r3
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <HAL_RCC_ClockConfig+0xa6>
 80042d4:	4b6f      	ldr	r3, [pc, #444]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	e00f      	b.n	80042fa <HAL_RCC_ClockConfig+0xc6>
 80042da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	667b      	str	r3, [r7, #100]	; 0x64
 80042e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ec:	663b      	str	r3, [r7, #96]	; 0x60
 80042ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f6:	4b67      	ldr	r3, [pc, #412]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004302:	fa92 f2a2 	rbit	r2, r2
 8004306:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800430a:	fab2 f282 	clz	r2, r2
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	f042 0220 	orr.w	r2, r2, #32
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	f002 021f 	and.w	r2, r2, #31
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f202 	lsl.w	r2, r1, r2
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d17b      	bne.n	800441e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0f3      	b.n	8004512 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d13c      	bne.n	80043ac <HAL_RCC_ClockConfig+0x178>
 8004332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004336:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_RCC_ClockConfig+0x128>
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	e00f      	b.n	800437c <HAL_RCC_ClockConfig+0x148>
 800435c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004360:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	647b      	str	r3, [r7, #68]	; 0x44
 800436a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800436e:	643b      	str	r3, [r7, #64]	; 0x40
 8004370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004378:	4b46      	ldr	r3, [pc, #280]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004380:	63ba      	str	r2, [r7, #56]	; 0x38
 8004382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004384:	fa92 f2a2 	rbit	r2, r2
 8004388:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800438a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800438c:	fab2 f282 	clz	r2, r2
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	f042 0220 	orr.w	r2, r2, #32
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	f002 021f 	and.w	r2, r2, #31
 800439c:	2101      	movs	r1, #1
 800439e:	fa01 f202 	lsl.w	r2, r1, r2
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d13a      	bne.n	800441e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0b2      	b.n	8004512 <HAL_RCC_ClockConfig+0x2de>
 80043ac:	2302      	movs	r3, #2
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x1a0>
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	e00d      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1bc>
 80043d4:	2302      	movs	r3, #2
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	2302      	movs	r3, #2
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	4b29      	ldr	r3, [pc, #164]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	2202      	movs	r2, #2
 80043f2:	61ba      	str	r2, [r7, #24]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	fa92 f2a2 	rbit	r2, r2
 80043fa:	617a      	str	r2, [r7, #20]
  return result;
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	fab2 f282 	clz	r2, r2
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	f042 0220 	orr.w	r2, r2, #32
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	f002 021f 	and.w	r2, r2, #31
 800440e:	2101      	movs	r1, #1
 8004410:	fa01 f202 	lsl.w	r2, r1, r2
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e079      	b.n	8004512 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	491a      	ldr	r1, [pc, #104]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fd f88c 	bl	800154c <HAL_GetTick>
 8004434:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fd f888 	bl	800154c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e061      	b.n	8004512 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b11      	ldr	r3, [pc, #68]	; (8004494 <HAL_RCC_ClockConfig+0x260>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d214      	bcs.n	8004498 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4906      	ldr	r1, [pc, #24]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <HAL_RCC_ClockConfig+0x25c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e040      	b.n	8004512 <HAL_RCC_ClockConfig+0x2de>
 8004490:	40022000 	.word	0x40022000
 8004494:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_ClockConfig+0x2e8>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	491a      	ldr	r1, [pc, #104]	; (800451c <HAL_RCC_ClockConfig+0x2e8>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044c2:	4b16      	ldr	r3, [pc, #88]	; (800451c <HAL_RCC_ClockConfig+0x2e8>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4912      	ldr	r1, [pc, #72]	; (800451c <HAL_RCC_ClockConfig+0x2e8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044d6:	f000 f829 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80044da:	4601      	mov	r1, r0
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCC_ClockConfig+0x2e8>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e4:	22f0      	movs	r2, #240	; 0xf0
 80044e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	fa92 f2a2 	rbit	r2, r2
 80044ee:	60fa      	str	r2, [r7, #12]
  return result;
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	fab2 f282 	clz	r2, r2
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	40d3      	lsrs	r3, r2
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <HAL_RCC_ClockConfig+0x2ec>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <HAL_RCC_ClockConfig+0x2f0>)
 8004504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004506:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_RCC_ClockConfig+0x2f4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc ffda 	bl	80014c4 <HAL_InitTick>
  
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3778      	adds	r7, #120	; 0x78
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	08007f50 	.word	0x08007f50
 8004524:	20000000 	.word	0x20000000
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b08b      	sub	sp, #44	; 0x2c
 8004530:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b04      	cmp	r3, #4
 8004554:	d002      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x30>
 8004556:	2b08      	cmp	r3, #8
 8004558:	d003      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x36>
 800455a:	e03c      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800455c:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800455e:	623b      	str	r3, [r7, #32]
      break;
 8004560:	e03c      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004568:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800456c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	fa92 f2a2 	rbit	r2, r2
 8004574:	607a      	str	r2, [r7, #4]
  return result;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	fab2 f282 	clz	r2, r2
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	40d3      	lsrs	r3, r2
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	220f      	movs	r2, #15
 8004590:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	fa92 f2a2 	rbit	r2, r2
 8004598:	60fa      	str	r2, [r7, #12]
  return result;
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	fab2 f282 	clz	r2, r2
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	40d3      	lsrs	r3, r2
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045b4:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fb02 f303 	mul.w	r3, r2, r3
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	e004      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	623b      	str	r3, [r7, #32]
      break;
 80045d4:	e002      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045d8:	623b      	str	r3, [r7, #32]
      break;
 80045da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045dc:	6a3b      	ldr	r3, [r7, #32]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	372c      	adds	r7, #44	; 0x2c
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	007a1200 	.word	0x007a1200
 80045f4:	08007f68 	.word	0x08007f68
 80045f8:	08007f78 	.word	0x08007f78
 80045fc:	003d0900 	.word	0x003d0900

08004600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000000 	.word	0x20000000

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800461e:	f7ff ffef 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004622:	4601      	mov	r1, r0
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800462c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004630:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	fa92 f2a2 	rbit	r2, r2
 8004638:	603a      	str	r2, [r7, #0]
  return result;
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	fab2 f282 	clz	r2, r2
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	40d3      	lsrs	r3, r2
 8004644:	4a04      	ldr	r2, [pc, #16]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004646:	5cd3      	ldrb	r3, [r2, r3]
 8004648:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	08007f60 	.word	0x08007f60

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004662:	f7ff ffcd 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004666:	4601      	mov	r1, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004670:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004674:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	fa92 f2a2 	rbit	r2, r2
 800467c:	603a      	str	r2, [r7, #0]
  return result;
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	fab2 f282 	clz	r2, r2
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	40d3      	lsrs	r3, r2
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_RCC_GetPCLK2Freq+0x40>)
 800468a:	5cd3      	ldrb	r3, [r2, r3]
 800468c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	08007f60 	.word	0x08007f60

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b092      	sub	sp, #72	; 0x48
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80d4 	beq.w	800486c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c4:	4b4e      	ldr	r3, [pc, #312]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10e      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d0:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4a4a      	ldr	r2, [pc, #296]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046da:	61d3      	str	r3, [r2, #28]
 80046dc:	4b48      	ldr	r3, [pc, #288]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b45      	ldr	r3, [pc, #276]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b42      	ldr	r3, [pc, #264]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a41      	ldr	r2, [pc, #260]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004706:	f7fc ff21 	bl	800154c <HAL_GetTick>
 800470a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	e008      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470e:	f7fc ff1d 	bl	800154c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e169      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b38      	ldr	r3, [pc, #224]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800472c:	4b34      	ldr	r3, [pc, #208]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8084 	beq.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004748:	429a      	cmp	r2, r3
 800474a:	d07c      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800474c:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800475a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	461a      	mov	r2, r3
 8004776:	2301      	movs	r3, #1
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800477e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478a:	fab3 f383 	clz	r3, r3
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	461a      	mov	r2, r3
 800479a:	2300      	movs	r3, #0
 800479c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800479e:	4a18      	ldr	r2, [pc, #96]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04b      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fc fecd 	bl	800154c <HAL_GetTick>
 80047b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fc fec9 	bl	800154c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e113      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80047cc:	2302      	movs	r3, #2
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	2302      	movs	r3, #2
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	61fb      	str	r3, [r7, #28]
  return result;
 80047e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d108      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047fa:	4b01      	ldr	r3, [pc, #4]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	e00d      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
 8004808:	10908100 	.word	0x10908100
 800480c:	2302      	movs	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	4b78      	ldr	r3, [pc, #480]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2202      	movs	r2, #2
 800481e:	613a      	str	r2, [r7, #16]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	fa92 f2a2 	rbit	r2, r2
 8004826:	60fa      	str	r2, [r7, #12]
  return result;
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	fab2 f282 	clz	r2, r2
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	f002 021f 	and.w	r2, r2, #31
 800483a:	2101      	movs	r1, #1
 800483c:	fa01 f202 	lsl.w	r2, r1, r2
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0b7      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004846:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	496a      	ldr	r1, [pc, #424]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004858:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b66      	ldr	r3, [pc, #408]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4a65      	ldr	r2, [pc, #404]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004878:	4b60      	ldr	r3, [pc, #384]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f023 0203 	bic.w	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	495d      	ldr	r1, [pc, #372]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004896:	4b59      	ldr	r3, [pc, #356]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4956      	ldr	r1, [pc, #344]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048b4:	4b51      	ldr	r3, [pc, #324]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	494e      	ldr	r1, [pc, #312]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048d2:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	4947      	ldr	r1, [pc, #284]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048f0:	4b42      	ldr	r3, [pc, #264]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	493f      	ldr	r1, [pc, #252]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800490e:	4b3b      	ldr	r3, [pc, #236]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f023 0220 	bic.w	r2, r3, #32
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4938      	ldr	r1, [pc, #224]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800492c:	4b33      	ldr	r3, [pc, #204]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	4930      	ldr	r1, [pc, #192]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	4929      	ldr	r1, [pc, #164]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004958:	4313      	orrs	r3, r2
 800495a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004968:	4b24      	ldr	r3, [pc, #144]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	4921      	ldr	r1, [pc, #132]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	491a      	ldr	r1, [pc, #104]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004994:	4313      	orrs	r3, r2
 8004996:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	4912      	ldr	r1, [pc, #72]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	490b      	ldr	r1, [pc, #44]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	4903      	ldr	r1, [pc, #12]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3748      	adds	r7, #72	; 0x48
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000

08004a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e049      	b.n	8004aa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc fb04 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f000 fbe0 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d001      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e04a      	b.n	8004b5e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a21      	ldr	r2, [pc, #132]	; (8004b6c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x6c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d013      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x6c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <HAL_TIM_Base_Start_IT+0xc0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x6c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x6c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x6c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <HAL_TIM_Base_Start_IT+0xcc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d115      	bne.n	8004b48 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	d015      	beq.n	8004b5a <HAL_TIM_Base_Start_IT+0xaa>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d011      	beq.n	8004b5a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b46:	e008      	b.n	8004b5a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e000      	b.n	8004b5c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40013400 	.word	0x40013400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	00010007 	.word	0x00010007

08004b84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e049      	b.n	8004c2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f841 	bl	8004c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f000 fb1e 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_TIM_PWM_Start+0x24>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e03c      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d109      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x3e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e02f      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d109      	bne.n	8004ca0 <HAL_TIM_PWM_Start+0x58>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e022      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b0c      	cmp	r3, #12
 8004ca4:	d109      	bne.n	8004cba <HAL_TIM_PWM_Start+0x72>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e015      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d109      	bne.n	8004cd4 <HAL_TIM_PWM_Start+0x8c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e008      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e097      	b.n	8004e1e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0xb6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfc:	e023      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0xc6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d0c:	e01b      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_PWM_Start+0xd6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d1c:	e013      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_PWM_Start+0xe6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d2c:	e00b      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d104      	bne.n	8004d3e <HAL_TIM_PWM_Start+0xf6>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3c:	e003      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fe58 	bl	8005a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a33      	ldr	r2, [pc, #204]	; (8004e28 <HAL_TIM_PWM_Start+0x1e0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a32      	ldr	r2, [pc, #200]	; (8004e2c <HAL_TIM_PWM_Start+0x1e4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a30      	ldr	r2, [pc, #192]	; (8004e30 <HAL_TIM_PWM_Start+0x1e8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <HAL_TIM_PWM_Start+0x1ec>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <HAL_TIM_PWM_Start+0x1f0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_Start+0x142>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_PWM_Start+0x144>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <HAL_TIM_PWM_Start+0x1e0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d018      	beq.n	8004ddc <HAL_TIM_PWM_Start+0x194>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d013      	beq.n	8004ddc <HAL_TIM_PWM_Start+0x194>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_TIM_PWM_Start+0x1f4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_TIM_PWM_Start+0x194>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <HAL_TIM_PWM_Start+0x1f8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_TIM_PWM_Start+0x194>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_TIM_PWM_Start+0x1e4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_TIM_PWM_Start+0x194>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <HAL_TIM_PWM_Start+0x1e8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d115      	bne.n	8004e08 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_TIM_PWM_Start+0x1fc>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	d015      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x1d2>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d011      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e06:	e008      	b.n	8004e1a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e000      	b.n	8004e1c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	00010007 	.word	0x00010007

08004e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0ff      	b.n	8005066 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b14      	cmp	r3, #20
 8004e72:	f200 80f0 	bhi.w	8005056 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004ed1 	.word	0x08004ed1
 8004e80:	08005057 	.word	0x08005057
 8004e84:	08005057 	.word	0x08005057
 8004e88:	08005057 	.word	0x08005057
 8004e8c:	08004f11 	.word	0x08004f11
 8004e90:	08005057 	.word	0x08005057
 8004e94:	08005057 	.word	0x08005057
 8004e98:	08005057 	.word	0x08005057
 8004e9c:	08004f53 	.word	0x08004f53
 8004ea0:	08005057 	.word	0x08005057
 8004ea4:	08005057 	.word	0x08005057
 8004ea8:	08005057 	.word	0x08005057
 8004eac:	08004f93 	.word	0x08004f93
 8004eb0:	08005057 	.word	0x08005057
 8004eb4:	08005057 	.word	0x08005057
 8004eb8:	08005057 	.word	0x08005057
 8004ebc:	08004fd5 	.word	0x08004fd5
 8004ec0:	08005057 	.word	0x08005057
 8004ec4:	08005057 	.word	0x08005057
 8004ec8:	08005057 	.word	0x08005057
 8004ecc:	08005015 	.word	0x08005015
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fa24 	bl	8005324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0208 	orr.w	r2, r2, #8
 8004eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0204 	bic.w	r2, r2, #4
 8004efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6999      	ldr	r1, [r3, #24]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	619a      	str	r2, [r3, #24]
      break;
 8004f0e:	e0a5      	b.n	800505c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fa94 	bl	8005444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	021a      	lsls	r2, r3, #8
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	619a      	str	r2, [r3, #24]
      break;
 8004f50:	e084      	b.n	800505c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fafd 	bl	8005558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0208 	orr.w	r2, r2, #8
 8004f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0204 	bic.w	r2, r2, #4
 8004f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69d9      	ldr	r1, [r3, #28]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	61da      	str	r2, [r3, #28]
      break;
 8004f90:	e064      	b.n	800505c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fb65 	bl	8005668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69d9      	ldr	r1, [r3, #28]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	021a      	lsls	r2, r3, #8
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	61da      	str	r2, [r3, #28]
      break;
 8004fd2:	e043      	b.n	800505c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fbae 	bl	800573c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0208 	orr.w	r2, r2, #8
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0204 	bic.w	r2, r2, #4
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005012:	e023      	b.n	800505c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fbf2 	bl	8005804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005054:	e002      	b.n	800505c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
      break;
 800505a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop

08005070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_TIM_ConfigClockSource+0x1c>
 8005088:	2302      	movs	r3, #2
 800508a:	e0b6      	b.n	80051fa <HAL_TIM_ConfigClockSource+0x18a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c8:	d03e      	beq.n	8005148 <HAL_TIM_ConfigClockSource+0xd8>
 80050ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ce:	f200 8087 	bhi.w	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	f000 8086 	beq.w	80051e6 <HAL_TIM_ConfigClockSource+0x176>
 80050da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050de:	d87f      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 80050e0:	2b70      	cmp	r3, #112	; 0x70
 80050e2:	d01a      	beq.n	800511a <HAL_TIM_ConfigClockSource+0xaa>
 80050e4:	2b70      	cmp	r3, #112	; 0x70
 80050e6:	d87b      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 80050e8:	2b60      	cmp	r3, #96	; 0x60
 80050ea:	d050      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x11e>
 80050ec:	2b60      	cmp	r3, #96	; 0x60
 80050ee:	d877      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 80050f0:	2b50      	cmp	r3, #80	; 0x50
 80050f2:	d03c      	beq.n	800516e <HAL_TIM_ConfigClockSource+0xfe>
 80050f4:	2b50      	cmp	r3, #80	; 0x50
 80050f6:	d873      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d058      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0x13e>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d86f      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	d064      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x15e>
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d86b      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 8005108:	2b20      	cmp	r3, #32
 800510a:	d060      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x15e>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d867      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05c      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x15e>
 8005114:	2b10      	cmp	r3, #16
 8005116:	d05a      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x15e>
 8005118:	e062      	b.n	80051e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6899      	ldr	r1, [r3, #8]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f000 fc4b 	bl	80059c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800513c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	609a      	str	r2, [r3, #8]
      break;
 8005146:	e04f      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6899      	ldr	r1, [r3, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f000 fc34 	bl	80059c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800516a:	609a      	str	r2, [r3, #8]
      break;
 800516c:	e03c      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6859      	ldr	r1, [r3, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	461a      	mov	r2, r3
 800517c:	f000 fba8 	bl	80058d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2150      	movs	r1, #80	; 0x50
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fc01 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 800518c:	e02c      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	461a      	mov	r2, r3
 800519c:	f000 fbc7 	bl	800592e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2160      	movs	r1, #96	; 0x60
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fbf1 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 80051ac:	e01c      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6859      	ldr	r1, [r3, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f000 fb88 	bl	80058d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2140      	movs	r1, #64	; 0x40
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fbe1 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 80051cc:	e00c      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f000 fbd8 	bl	800598e <TIM_ITRx_SetConfig>
      break;
 80051de:	e003      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      break;
 80051e4:	e000      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80051e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a3c      	ldr	r2, [pc, #240]	; (8005308 <TIM_Base_SetConfig+0x104>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a39      	ldr	r2, [pc, #228]	; (800530c <TIM_Base_SetConfig+0x108>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a38      	ldr	r2, [pc, #224]	; (8005310 <TIM_Base_SetConfig+0x10c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x38>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a37      	ldr	r2, [pc, #220]	; (8005314 <TIM_Base_SetConfig+0x110>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2d      	ldr	r2, [pc, #180]	; (8005308 <TIM_Base_SetConfig+0x104>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01b      	beq.n	800528e <TIM_Base_SetConfig+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525c:	d017      	beq.n	800528e <TIM_Base_SetConfig+0x8a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2a      	ldr	r2, [pc, #168]	; (800530c <TIM_Base_SetConfig+0x108>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <TIM_Base_SetConfig+0x8a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a29      	ldr	r2, [pc, #164]	; (8005310 <TIM_Base_SetConfig+0x10c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00f      	beq.n	800528e <TIM_Base_SetConfig+0x8a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a28      	ldr	r2, [pc, #160]	; (8005314 <TIM_Base_SetConfig+0x110>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_Base_SetConfig+0x8a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <TIM_Base_SetConfig+0x114>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_Base_SetConfig+0x8a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a26      	ldr	r2, [pc, #152]	; (800531c <TIM_Base_SetConfig+0x118>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a25      	ldr	r2, [pc, #148]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d108      	bne.n	80052a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a10      	ldr	r2, [pc, #64]	; (8005308 <TIM_Base_SetConfig+0x104>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00f      	beq.n	80052ec <TIM_Base_SetConfig+0xe8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a11      	ldr	r2, [pc, #68]	; (8005314 <TIM_Base_SetConfig+0x110>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00b      	beq.n	80052ec <TIM_Base_SetConfig+0xe8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a10      	ldr	r2, [pc, #64]	; (8005318 <TIM_Base_SetConfig+0x114>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_Base_SetConfig+0xe8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a0f      	ldr	r2, [pc, #60]	; (800531c <TIM_Base_SetConfig+0x118>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_Base_SetConfig+0xe8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a0e      	ldr	r2, [pc, #56]	; (8005320 <TIM_Base_SetConfig+0x11c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d103      	bne.n	80052f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	615a      	str	r2, [r3, #20]
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40013400 	.word	0x40013400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800

08005324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0201 	bic.w	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0302 	bic.w	r3, r3, #2
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2c      	ldr	r2, [pc, #176]	; (8005430 <TIM_OC1_SetConfig+0x10c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <TIM_OC1_SetConfig+0x110>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <TIM_OC1_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a29      	ldr	r2, [pc, #164]	; (800543c <TIM_OC1_SetConfig+0x118>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a28      	ldr	r2, [pc, #160]	; (8005440 <TIM_OC1_SetConfig+0x11c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10c      	bne.n	80053be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0308 	bic.w	r3, r3, #8
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <TIM_OC1_SetConfig+0x10c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <TIM_OC1_SetConfig+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <TIM_OC1_SetConfig+0x114>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <TIM_OC1_SetConfig+0x118>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a17      	ldr	r2, [pc, #92]	; (8005440 <TIM_OC1_SetConfig+0x11c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d111      	bne.n	800540a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40013400 	.word	0x40013400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800

08005444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0210 	bic.w	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0320 	bic.w	r3, r3, #32
 8005492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a28      	ldr	r2, [pc, #160]	; (8005544 <TIM_OC2_SetConfig+0x100>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC2_SetConfig+0x6c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_OC2_SetConfig+0x104>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10d      	bne.n	80054cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <TIM_OC2_SetConfig+0x100>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <TIM_OC2_SetConfig+0x104>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1b      	ldr	r2, [pc, #108]	; (800554c <TIM_OC2_SetConfig+0x108>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <TIM_OC2_SetConfig+0x10c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a19      	ldr	r2, [pc, #100]	; (8005554 <TIM_OC2_SetConfig+0x110>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005502:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800

08005558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <TIM_OC3_SetConfig+0xfc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC3_SetConfig+0x6a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a26      	ldr	r2, [pc, #152]	; (8005658 <TIM_OC3_SetConfig+0x100>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10d      	bne.n	80055de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055dc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <TIM_OC3_SetConfig+0xfc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <TIM_OC3_SetConfig+0x100>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1a      	ldr	r2, [pc, #104]	; (800565c <TIM_OC3_SetConfig+0x104>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a19      	ldr	r2, [pc, #100]	; (8005660 <TIM_OC3_SetConfig+0x108>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <TIM_OC3_SetConfig+0x10c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d113      	bne.n	800562e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <TIM_OC4_SetConfig+0xc0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00f      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <TIM_OC4_SetConfig+0xc4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <TIM_OC4_SetConfig+0xc8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <TIM_OC4_SetConfig+0xcc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a14      	ldr	r2, [pc, #80]	; (8005738 <TIM_OC4_SetConfig+0xd0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d109      	bne.n	8005700 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40013400 	.word	0x40013400
 8005730:	40014000 	.word	0x40014000
 8005734:	40014400 	.word	0x40014400
 8005738:	40014800 	.word	0x40014800

0800573c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005780:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <TIM_OC5_SetConfig+0xb4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <TIM_OC5_SetConfig+0xb8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <TIM_OC5_SetConfig+0xbc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <TIM_OC5_SetConfig+0xc0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <TIM_OC5_SetConfig+0xc4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d109      	bne.n	80057ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800584a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	051b      	lsls	r3, r3, #20
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <TIM_OC6_SetConfig+0xb8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <TIM_OC6_SetConfig+0xbc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <TIM_OC6_SetConfig+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <TIM_OC6_SetConfig+0xc4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a14      	ldr	r2, [pc, #80]	; (80058cc <TIM_OC6_SetConfig+0xc8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40013400 	.word	0x40013400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 030a 	bic.w	r3, r3, #10
 800590c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800592e:	b480      	push	{r7}
 8005930:	b087      	sub	sp, #28
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0210 	bic.w	r2, r3, #16
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	031b      	lsls	r3, r3, #12
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800596a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f043 0307 	orr.w	r3, r3, #7
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	609a      	str	r2, [r3, #8]
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	021a      	lsls	r2, r3, #8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	2201      	movs	r2, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1a      	ldr	r2, [r3, #32]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	401a      	ands	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e063      	b.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d108      	bne.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d018      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ada:	d013      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00e      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a13      	ldr	r2, [pc, #76]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40014000 	.word	0x40014000

08005b50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e065      	b.n	8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d115      	bne.n	8005c26 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	051b      	lsls	r3, r3, #20
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400

08005c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e040      	b.n	8005ce0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fb fa72 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	; 0x24
 8005c78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fc72 	bl	8006574 <UART_SetConfig>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e022      	b.n	8005ce0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fe3a 	bl	800691c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fec1 	bl	8006a60 <UART_CheckIdleState>
 8005cde:	4603      	mov	r3, r0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d178      	bne.n	8005df2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_UART_Transmit+0x24>
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e071      	b.n	8005df4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2221      	movs	r2, #33	; 0x21
 8005d1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d1e:	f7fb fc15 	bl	800154c <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	88fa      	ldrh	r2, [r7, #6]
 8005d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d108      	bne.n	8005d50 <HAL_UART_Transmit+0x68>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e003      	b.n	8005d58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d58:	e030      	b.n	8005dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2200      	movs	r2, #0
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 ff23 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e03c      	b.n	8005df4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	881a      	ldrh	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d8c:	b292      	uxth	r2, r2
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	3302      	adds	r3, #2
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e008      	b.n	8005daa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	781a      	ldrb	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	b292      	uxth	r2, r2
 8005da2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	3301      	adds	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1c8      	bne.n	8005d5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 feec 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d004      	beq.n	8005de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e005      	b.n	8005df4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e000      	b.n	8005df4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	f040 80a3 	bne.w	8005f5e <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_UART_Receive+0x28>
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e09b      	b.n	8005f60 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2222      	movs	r2, #34	; 0x22
 8005e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e3e:	f7fb fb85 	bl	800154c <HAL_GetTick>
 8005e42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5c:	d10e      	bne.n	8005e7c <HAL_UART_Receive+0x80>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d105      	bne.n	8005e72 <HAL_UART_Receive+0x76>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e70:	e01a      	b.n	8005ea8 <HAL_UART_Receive+0xac>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e7a:	e015      	b.n	8005ea8 <HAL_UART_Receive+0xac>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <HAL_UART_Receive+0xa4>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_UART_Receive+0x9a>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	22ff      	movs	r2, #255	; 0xff
 8005e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e94:	e008      	b.n	8005ea8 <HAL_UART_Receive+0xac>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	227f      	movs	r2, #127	; 0x7f
 8005e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e9e:	e003      	b.n	8005ea8 <HAL_UART_Receive+0xac>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005eae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb8:	d108      	bne.n	8005ecc <HAL_UART_Receive+0xd0>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e003      	b.n	8005ed4 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ed4:	e037      	b.n	8005f46 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2200      	movs	r2, #0
 8005ede:	2120      	movs	r1, #32
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fe65 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e033      	b.n	8005f60 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10c      	bne.n	8005f18 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	8a7b      	ldrh	r3, [r7, #18]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	3302      	adds	r3, #2
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e00d      	b.n	8005f34 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	8a7b      	ldrh	r3, [r7, #18]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4013      	ands	r3, r2
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1c1      	bne.n	8005ed6 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b0ba      	sub	sp, #232	; 0xe8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f92:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f96:	4013      	ands	r3, r2
 8005f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d115      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00f      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 82ab 	beq.w	800651c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
      }
      return;
 8005fce:	e2a5      	b.n	800651c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8117 	beq.w	8006208 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fea:	4b85      	ldr	r3, [pc, #532]	; (8006200 <HAL_UART_IRQHandler+0x298>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 810a 	beq.w	8006208 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d011      	beq.n	8006024 <HAL_UART_IRQHandler+0xbc>
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2201      	movs	r2, #1
 8006012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601a:	f043 0201 	orr.w	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d011      	beq.n	8006054 <HAL_UART_IRQHandler+0xec>
 8006030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2202      	movs	r2, #2
 8006042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800604a:	f043 0204 	orr.w	r2, r3, #4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d011      	beq.n	8006084 <HAL_UART_IRQHandler+0x11c>
 8006060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2204      	movs	r2, #4
 8006072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607a:	f043 0202 	orr.w	r2, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d017      	beq.n	80060c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800609c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2208      	movs	r2, #8
 80060ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b6:	f043 0208 	orr.w	r2, r3, #8
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d012      	beq.n	80060f2 <HAL_UART_IRQHandler+0x18a>
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00c      	beq.n	80060f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8211 	beq.w	8006520 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800610a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800612c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d005      	beq.n	800614a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800613e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006142:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006146:	2b00      	cmp	r3, #0
 8006148:	d04f      	beq.n	80061ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fd97 	bl	8006c7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d141      	bne.n	80061e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3308      	adds	r3, #8
 8006186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800618a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800618e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1d9      	bne.n	800615e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d013      	beq.n	80061da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b6:	4a13      	ldr	r2, [pc, #76]	; (8006204 <HAL_UART_IRQHandler+0x29c>)
 80061b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fc fc6a 	bl	8002a98 <HAL_DMA_Abort_IT>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d017      	beq.n	80061fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	e00f      	b.n	80061fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9b4 	bl	8006548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	e00b      	b.n	80061fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9b0 	bl	8006548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	e007      	b.n	80061fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9ac 	bl	8006548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80061f8:	e192      	b.n	8006520 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fa:	bf00      	nop
    return;
 80061fc:	e190      	b.n	8006520 <HAL_UART_IRQHandler+0x5b8>
 80061fe:	bf00      	nop
 8006200:	04000120 	.word	0x04000120
 8006204:	08006d47 	.word	0x08006d47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620c:	2b01      	cmp	r3, #1
 800620e:	f040 814b 	bne.w	80064a8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 8144 	beq.w	80064a8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 813d 	beq.w	80064a8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2210      	movs	r2, #16
 8006234:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	f040 80b5 	bne.w	80063b0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006252:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8164 	beq.w	8006524 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006266:	429a      	cmp	r2, r3
 8006268:	f080 815c 	bcs.w	8006524 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	2b20      	cmp	r3, #32
 800627e:	f000 8086 	beq.w	800638e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800629a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1da      	bne.n	8006282 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3308      	adds	r3, #8
 80062d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e1      	bne.n	80062cc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800632c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800632e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006332:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800633a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e3      	bne.n	8006308 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800635c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635e:	f023 0310 	bic.w	r3, r3, #16
 8006362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006370:	65bb      	str	r3, [r7, #88]	; 0x58
 8006372:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800637e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e4      	bne.n	800634e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006388:	4618      	mov	r0, r3
 800638a:	f7fc fb4c 	bl	8002a26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f8d7 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063ae:	e0b9      	b.n	8006524 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80ab 	beq.w	8006528 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80063d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 80a6 	beq.w	8006528 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006400:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e4      	bne.n	80063dc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3308      	adds	r3, #8
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	623b      	str	r3, [r7, #32]
   return(result);
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006436:	633a      	str	r2, [r7, #48]	; 0x30
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800643c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e3      	bne.n	8006412 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60fb      	str	r3, [r7, #12]
   return(result);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	69b9      	ldr	r1, [r7, #24]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	617b      	str	r3, [r7, #20]
   return(result);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e4      	bne.n	800645e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800649a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f85b 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064a6:	e03f      	b.n	8006528 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00e      	beq.n	80064d2 <HAL_UART_IRQHandler+0x56a>
 80064b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d008      	beq.n	80064d2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fc7b 	bl	8006dc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064d0:	e02d      	b.n	800652e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01c      	beq.n	800652c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
    }
    return;
 80064fa:	e017      	b.n	800652c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d012      	beq.n	800652e <HAL_UART_IRQHandler+0x5c6>
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00c      	beq.n	800652e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc2c 	bl	8006d72 <UART_EndTransmit_IT>
    return;
 800651a:	e008      	b.n	800652e <HAL_UART_IRQHandler+0x5c6>
      return;
 800651c:	bf00      	nop
 800651e:	e006      	b.n	800652e <HAL_UART_IRQHandler+0x5c6>
    return;
 8006520:	bf00      	nop
 8006522:	e004      	b.n	800652e <HAL_UART_IRQHandler+0x5c6>
      return;
 8006524:	bf00      	nop
 8006526:	e002      	b.n	800652e <HAL_UART_IRQHandler+0x5c6>
      return;
 8006528:	bf00      	nop
 800652a:	e000      	b.n	800652e <HAL_UART_IRQHandler+0x5c6>
    return;
 800652c:	bf00      	nop
  }

}
 800652e:	37e8      	adds	r7, #232	; 0xe8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065a2:	f023 030c 	bic.w	r3, r3, #12
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	6979      	ldr	r1, [r7, #20]
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4aa7      	ldr	r2, [pc, #668]	; (800688c <UART_SetConfig+0x318>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d120      	bne.n	8006636 <UART_SetConfig+0xc2>
 80065f4:	4ba6      	ldr	r3, [pc, #664]	; (8006890 <UART_SetConfig+0x31c>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d817      	bhi.n	8006630 <UART_SetConfig+0xbc>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x94>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	08006619 	.word	0x08006619
 800660c:	08006625 	.word	0x08006625
 8006610:	0800662b 	.word	0x0800662b
 8006614:	0800661f 	.word	0x0800661f
 8006618:	2301      	movs	r3, #1
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e0b5      	b.n	800678a <UART_SetConfig+0x216>
 800661e:	2302      	movs	r3, #2
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e0b2      	b.n	800678a <UART_SetConfig+0x216>
 8006624:	2304      	movs	r3, #4
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e0af      	b.n	800678a <UART_SetConfig+0x216>
 800662a:	2308      	movs	r3, #8
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e0ac      	b.n	800678a <UART_SetConfig+0x216>
 8006630:	2310      	movs	r3, #16
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e0a9      	b.n	800678a <UART_SetConfig+0x216>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a96      	ldr	r2, [pc, #600]	; (8006894 <UART_SetConfig+0x320>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d124      	bne.n	800668a <UART_SetConfig+0x116>
 8006640:	4b93      	ldr	r3, [pc, #588]	; (8006890 <UART_SetConfig+0x31c>)
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006648:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800664c:	d011      	beq.n	8006672 <UART_SetConfig+0xfe>
 800664e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006652:	d817      	bhi.n	8006684 <UART_SetConfig+0x110>
 8006654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006658:	d011      	beq.n	800667e <UART_SetConfig+0x10a>
 800665a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665e:	d811      	bhi.n	8006684 <UART_SetConfig+0x110>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <UART_SetConfig+0xf8>
 8006664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006668:	d006      	beq.n	8006678 <UART_SetConfig+0x104>
 800666a:	e00b      	b.n	8006684 <UART_SetConfig+0x110>
 800666c:	2300      	movs	r3, #0
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e08b      	b.n	800678a <UART_SetConfig+0x216>
 8006672:	2302      	movs	r3, #2
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e088      	b.n	800678a <UART_SetConfig+0x216>
 8006678:	2304      	movs	r3, #4
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e085      	b.n	800678a <UART_SetConfig+0x216>
 800667e:	2308      	movs	r3, #8
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e082      	b.n	800678a <UART_SetConfig+0x216>
 8006684:	2310      	movs	r3, #16
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e07f      	b.n	800678a <UART_SetConfig+0x216>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a82      	ldr	r2, [pc, #520]	; (8006898 <UART_SetConfig+0x324>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d124      	bne.n	80066de <UART_SetConfig+0x16a>
 8006694:	4b7e      	ldr	r3, [pc, #504]	; (8006890 <UART_SetConfig+0x31c>)
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800669c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066a0:	d011      	beq.n	80066c6 <UART_SetConfig+0x152>
 80066a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066a6:	d817      	bhi.n	80066d8 <UART_SetConfig+0x164>
 80066a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066ac:	d011      	beq.n	80066d2 <UART_SetConfig+0x15e>
 80066ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066b2:	d811      	bhi.n	80066d8 <UART_SetConfig+0x164>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <UART_SetConfig+0x14c>
 80066b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066bc:	d006      	beq.n	80066cc <UART_SetConfig+0x158>
 80066be:	e00b      	b.n	80066d8 <UART_SetConfig+0x164>
 80066c0:	2300      	movs	r3, #0
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e061      	b.n	800678a <UART_SetConfig+0x216>
 80066c6:	2302      	movs	r3, #2
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e05e      	b.n	800678a <UART_SetConfig+0x216>
 80066cc:	2304      	movs	r3, #4
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e05b      	b.n	800678a <UART_SetConfig+0x216>
 80066d2:	2308      	movs	r3, #8
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e058      	b.n	800678a <UART_SetConfig+0x216>
 80066d8:	2310      	movs	r3, #16
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e055      	b.n	800678a <UART_SetConfig+0x216>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6e      	ldr	r2, [pc, #440]	; (800689c <UART_SetConfig+0x328>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d124      	bne.n	8006732 <UART_SetConfig+0x1be>
 80066e8:	4b69      	ldr	r3, [pc, #420]	; (8006890 <UART_SetConfig+0x31c>)
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80066f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066f4:	d011      	beq.n	800671a <UART_SetConfig+0x1a6>
 80066f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066fa:	d817      	bhi.n	800672c <UART_SetConfig+0x1b8>
 80066fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006700:	d011      	beq.n	8006726 <UART_SetConfig+0x1b2>
 8006702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006706:	d811      	bhi.n	800672c <UART_SetConfig+0x1b8>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <UART_SetConfig+0x1a0>
 800670c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006710:	d006      	beq.n	8006720 <UART_SetConfig+0x1ac>
 8006712:	e00b      	b.n	800672c <UART_SetConfig+0x1b8>
 8006714:	2300      	movs	r3, #0
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e037      	b.n	800678a <UART_SetConfig+0x216>
 800671a:	2302      	movs	r3, #2
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e034      	b.n	800678a <UART_SetConfig+0x216>
 8006720:	2304      	movs	r3, #4
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e031      	b.n	800678a <UART_SetConfig+0x216>
 8006726:	2308      	movs	r3, #8
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e02e      	b.n	800678a <UART_SetConfig+0x216>
 800672c:	2310      	movs	r3, #16
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e02b      	b.n	800678a <UART_SetConfig+0x216>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a5a      	ldr	r2, [pc, #360]	; (80068a0 <UART_SetConfig+0x32c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d124      	bne.n	8006786 <UART_SetConfig+0x212>
 800673c:	4b54      	ldr	r3, [pc, #336]	; (8006890 <UART_SetConfig+0x31c>)
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006744:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006748:	d011      	beq.n	800676e <UART_SetConfig+0x1fa>
 800674a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800674e:	d817      	bhi.n	8006780 <UART_SetConfig+0x20c>
 8006750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006754:	d011      	beq.n	800677a <UART_SetConfig+0x206>
 8006756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800675a:	d811      	bhi.n	8006780 <UART_SetConfig+0x20c>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <UART_SetConfig+0x1f4>
 8006760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006764:	d006      	beq.n	8006774 <UART_SetConfig+0x200>
 8006766:	e00b      	b.n	8006780 <UART_SetConfig+0x20c>
 8006768:	2300      	movs	r3, #0
 800676a:	77fb      	strb	r3, [r7, #31]
 800676c:	e00d      	b.n	800678a <UART_SetConfig+0x216>
 800676e:	2302      	movs	r3, #2
 8006770:	77fb      	strb	r3, [r7, #31]
 8006772:	e00a      	b.n	800678a <UART_SetConfig+0x216>
 8006774:	2304      	movs	r3, #4
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e007      	b.n	800678a <UART_SetConfig+0x216>
 800677a:	2308      	movs	r3, #8
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e004      	b.n	800678a <UART_SetConfig+0x216>
 8006780:	2310      	movs	r3, #16
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e001      	b.n	800678a <UART_SetConfig+0x216>
 8006786:	2310      	movs	r3, #16
 8006788:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006792:	d15b      	bne.n	800684c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006794:	7ffb      	ldrb	r3, [r7, #31]
 8006796:	2b08      	cmp	r3, #8
 8006798:	d827      	bhi.n	80067ea <UART_SetConfig+0x276>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x22c>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067db 	.word	0x080067db
 80067b4:	080067eb 	.word	0x080067eb
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	080067e3 	.word	0x080067e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fd ff28 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61b8      	str	r0, [r7, #24]
        break;
 80067ca:	e013      	b.n	80067f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fd ff46 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 80067d0:	61b8      	str	r0, [r7, #24]
        break;
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b33      	ldr	r3, [pc, #204]	; (80068a4 <UART_SetConfig+0x330>)
 80067d6:	61bb      	str	r3, [r7, #24]
        break;
 80067d8:	e00c      	b.n	80067f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fd fea7 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80067de:	61b8      	str	r0, [r7, #24]
        break;
 80067e0:	e008      	b.n	80067f4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e6:	61bb      	str	r3, [r7, #24]
        break;
 80067e8:	e004      	b.n	80067f4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	77bb      	strb	r3, [r7, #30]
        break;
 80067f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8082 	beq.w	8006900 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	005a      	lsls	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	441a      	add	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d916      	bls.n	8006846 <UART_SetConfig+0x2d2>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681e:	d212      	bcs.n	8006846 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f023 030f 	bic.w	r3, r3, #15
 8006828:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	b29a      	uxth	r2, r3
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	4313      	orrs	r3, r2
 800683a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	89fa      	ldrh	r2, [r7, #14]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e05c      	b.n	8006900 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	77bb      	strb	r3, [r7, #30]
 800684a:	e059      	b.n	8006900 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800684c:	7ffb      	ldrb	r3, [r7, #31]
 800684e:	2b08      	cmp	r3, #8
 8006850:	d835      	bhi.n	80068be <UART_SetConfig+0x34a>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x2e4>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006885 	.word	0x08006885
 8006860:	080068a9 	.word	0x080068a9
 8006864:	080068bf 	.word	0x080068bf
 8006868:	080068af 	.word	0x080068af
 800686c:	080068bf 	.word	0x080068bf
 8006870:	080068bf 	.word	0x080068bf
 8006874:	080068bf 	.word	0x080068bf
 8006878:	080068b7 	.word	0x080068b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687c:	f7fd fecc 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8006880:	61b8      	str	r0, [r7, #24]
        break;
 8006882:	e021      	b.n	80068c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006884:	f7fd feea 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 8006888:	61b8      	str	r0, [r7, #24]
        break;
 800688a:	e01d      	b.n	80068c8 <UART_SetConfig+0x354>
 800688c:	40013800 	.word	0x40013800
 8006890:	40021000 	.word	0x40021000
 8006894:	40004400 	.word	0x40004400
 8006898:	40004800 	.word	0x40004800
 800689c:	40004c00 	.word	0x40004c00
 80068a0:	40005000 	.word	0x40005000
 80068a4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <UART_SetConfig+0x3a4>)
 80068aa:	61bb      	str	r3, [r7, #24]
        break;
 80068ac:	e00c      	b.n	80068c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fd fe3d 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80068b2:	61b8      	str	r0, [r7, #24]
        break;
 80068b4:	e008      	b.n	80068c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	61bb      	str	r3, [r7, #24]
        break;
 80068bc:	e004      	b.n	80068c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	77bb      	strb	r3, [r7, #30]
        break;
 80068c6:	bf00      	nop
    }

    if (pclk != 0U)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d018      	beq.n	8006900 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	085a      	lsrs	r2, r3, #1
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	441a      	add	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b0f      	cmp	r3, #15
 80068e6:	d909      	bls.n	80068fc <UART_SetConfig+0x388>
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ee:	d205      	bcs.n	80068fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60da      	str	r2, [r3, #12]
 80068fa:	e001      	b.n	8006900 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800690c:	7fbb      	ldrb	r3, [r7, #30]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	007a1200 	.word	0x007a1200

0800691c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1a:	d10a      	bne.n	8006a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b098      	sub	sp, #96	; 0x60
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a70:	f7fa fd6c 	bl	800154c <HAL_GetTick>
 8006a74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d12e      	bne.n	8006ae2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f88c 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d021      	beq.n	8006ae2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006abc:	647b      	str	r3, [r7, #68]	; 0x44
 8006abe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e6      	bne.n	8006a9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e062      	b.n	8006ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d149      	bne.n	8006b84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af8:	2200      	movs	r2, #0
 8006afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f856 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d03c      	beq.n	8006b84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	623b      	str	r3, [r7, #32]
   return(result);
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b28:	633b      	str	r3, [r7, #48]	; 0x30
 8006b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e6      	bne.n	8006b0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3308      	adds	r3, #8
 8006b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b5c:	61fa      	str	r2, [r7, #28]
 8006b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	69b9      	ldr	r1, [r7, #24]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	617b      	str	r3, [r7, #20]
   return(result);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e5      	bne.n	8006b3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e011      	b.n	8006ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3758      	adds	r7, #88	; 0x58
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc0:	e049      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc8:	d045      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bca:	f7fa fcbf 	bl	800154c <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e048      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d031      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d110      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2208      	movs	r2, #8
 8006c06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f838 	bl	8006c7e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2208      	movs	r2, #8
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e029      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d111      	bne.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f81e 	bl	8006c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e00f      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	bf0c      	ite	eq
 8006c66:	2301      	moveq	r3, #1
 8006c68:	2300      	movne	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d0a6      	beq.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b095      	sub	sp, #84	; 0x54
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d118      	bne.n	8006d26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f023 0310 	bic.w	r3, r3, #16
 8006d08:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6979      	ldr	r1, [r7, #20]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d3a:	bf00      	nop
 8006d3c:	3754      	adds	r7, #84	; 0x54
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff fbef 	bl	8006548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b088      	sub	sp, #32
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6979      	ldr	r1, [r7, #20]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	613b      	str	r3, [r7, #16]
   return(result);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fbbb 	bl	8006534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dbe:	bf00      	nop
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
	...

08006ddc <__errno>:
 8006ddc:	4b01      	ldr	r3, [pc, #4]	; (8006de4 <__errno+0x8>)
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	2000000c 	.word	0x2000000c

08006de8 <__libc_init_array>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	4d0d      	ldr	r5, [pc, #52]	; (8006e20 <__libc_init_array+0x38>)
 8006dec:	4c0d      	ldr	r4, [pc, #52]	; (8006e24 <__libc_init_array+0x3c>)
 8006dee:	1b64      	subs	r4, r4, r5
 8006df0:	10a4      	asrs	r4, r4, #2
 8006df2:	2600      	movs	r6, #0
 8006df4:	42a6      	cmp	r6, r4
 8006df6:	d109      	bne.n	8006e0c <__libc_init_array+0x24>
 8006df8:	4d0b      	ldr	r5, [pc, #44]	; (8006e28 <__libc_init_array+0x40>)
 8006dfa:	4c0c      	ldr	r4, [pc, #48]	; (8006e2c <__libc_init_array+0x44>)
 8006dfc:	f001 f882 	bl	8007f04 <_init>
 8006e00:	1b64      	subs	r4, r4, r5
 8006e02:	10a4      	asrs	r4, r4, #2
 8006e04:	2600      	movs	r6, #0
 8006e06:	42a6      	cmp	r6, r4
 8006e08:	d105      	bne.n	8006e16 <__libc_init_array+0x2e>
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e10:	4798      	blx	r3
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7ee      	b.n	8006df4 <__libc_init_array+0xc>
 8006e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1a:	4798      	blx	r3
 8006e1c:	3601      	adds	r6, #1
 8006e1e:	e7f2      	b.n	8006e06 <__libc_init_array+0x1e>
 8006e20:	08008020 	.word	0x08008020
 8006e24:	08008020 	.word	0x08008020
 8006e28:	08008020 	.word	0x08008020
 8006e2c:	08008024 	.word	0x08008024

08006e30 <memset>:
 8006e30:	4402      	add	r2, r0
 8006e32:	4603      	mov	r3, r0
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d100      	bne.n	8006e3a <memset+0xa>
 8006e38:	4770      	bx	lr
 8006e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3e:	e7f9      	b.n	8006e34 <memset+0x4>

08006e40 <iprintf>:
 8006e40:	b40f      	push	{r0, r1, r2, r3}
 8006e42:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <iprintf+0x2c>)
 8006e44:	b513      	push	{r0, r1, r4, lr}
 8006e46:	681c      	ldr	r4, [r3, #0]
 8006e48:	b124      	cbz	r4, 8006e54 <iprintf+0x14>
 8006e4a:	69a3      	ldr	r3, [r4, #24]
 8006e4c:	b913      	cbnz	r3, 8006e54 <iprintf+0x14>
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fa74 	bl	800733c <__sinit>
 8006e54:	ab05      	add	r3, sp, #20
 8006e56:	9a04      	ldr	r2, [sp, #16]
 8006e58:	68a1      	ldr	r1, [r4, #8]
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 fc7d 	bl	800775c <_vfiprintf_r>
 8006e62:	b002      	add	sp, #8
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	b004      	add	sp, #16
 8006e6a:	4770      	bx	lr
 8006e6c:	2000000c 	.word	0x2000000c

08006e70 <putchar>:
 8006e70:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <putchar+0x28>)
 8006e72:	b513      	push	{r0, r1, r4, lr}
 8006e74:	681c      	ldr	r4, [r3, #0]
 8006e76:	4601      	mov	r1, r0
 8006e78:	b134      	cbz	r4, 8006e88 <putchar+0x18>
 8006e7a:	69a3      	ldr	r3, [r4, #24]
 8006e7c:	b923      	cbnz	r3, 8006e88 <putchar+0x18>
 8006e7e:	9001      	str	r0, [sp, #4]
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fa5b 	bl	800733c <__sinit>
 8006e86:	9901      	ldr	r1, [sp, #4]
 8006e88:	68a2      	ldr	r2, [r4, #8]
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	b002      	add	sp, #8
 8006e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e92:	f000 bf27 	b.w	8007ce4 <_putc_r>
 8006e96:	bf00      	nop
 8006e98:	2000000c 	.word	0x2000000c

08006e9c <_puts_r>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	460e      	mov	r6, r1
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	b118      	cbz	r0, 8006eac <_puts_r+0x10>
 8006ea4:	6983      	ldr	r3, [r0, #24]
 8006ea6:	b90b      	cbnz	r3, 8006eac <_puts_r+0x10>
 8006ea8:	f000 fa48 	bl	800733c <__sinit>
 8006eac:	69ab      	ldr	r3, [r5, #24]
 8006eae:	68ac      	ldr	r4, [r5, #8]
 8006eb0:	b913      	cbnz	r3, 8006eb8 <_puts_r+0x1c>
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 fa42 	bl	800733c <__sinit>
 8006eb8:	4b2c      	ldr	r3, [pc, #176]	; (8006f6c <_puts_r+0xd0>)
 8006eba:	429c      	cmp	r4, r3
 8006ebc:	d120      	bne.n	8006f00 <_puts_r+0x64>
 8006ebe:	686c      	ldr	r4, [r5, #4]
 8006ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ec2:	07db      	lsls	r3, r3, #31
 8006ec4:	d405      	bmi.n	8006ed2 <_puts_r+0x36>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	0598      	lsls	r0, r3, #22
 8006eca:	d402      	bmi.n	8006ed2 <_puts_r+0x36>
 8006ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ece:	f000 fad3 	bl	8007478 <__retarget_lock_acquire_recursive>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	0719      	lsls	r1, r3, #28
 8006ed6:	d51d      	bpl.n	8006f14 <_puts_r+0x78>
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	b1db      	cbz	r3, 8006f14 <_puts_r+0x78>
 8006edc:	3e01      	subs	r6, #1
 8006ede:	68a3      	ldr	r3, [r4, #8]
 8006ee0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	60a3      	str	r3, [r4, #8]
 8006ee8:	bb39      	cbnz	r1, 8006f3a <_puts_r+0x9e>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da38      	bge.n	8006f60 <_puts_r+0xc4>
 8006eee:	4622      	mov	r2, r4
 8006ef0:	210a      	movs	r1, #10
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f848 	bl	8006f88 <__swbuf_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d011      	beq.n	8006f20 <_puts_r+0x84>
 8006efc:	250a      	movs	r5, #10
 8006efe:	e011      	b.n	8006f24 <_puts_r+0x88>
 8006f00:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <_puts_r+0xd4>)
 8006f02:	429c      	cmp	r4, r3
 8006f04:	d101      	bne.n	8006f0a <_puts_r+0x6e>
 8006f06:	68ac      	ldr	r4, [r5, #8]
 8006f08:	e7da      	b.n	8006ec0 <_puts_r+0x24>
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <_puts_r+0xd8>)
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	bf08      	it	eq
 8006f10:	68ec      	ldreq	r4, [r5, #12]
 8006f12:	e7d5      	b.n	8006ec0 <_puts_r+0x24>
 8006f14:	4621      	mov	r1, r4
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 f888 	bl	800702c <__swsetup_r>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d0dd      	beq.n	8006edc <_puts_r+0x40>
 8006f20:	f04f 35ff 	mov.w	r5, #4294967295
 8006f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f26:	07da      	lsls	r2, r3, #31
 8006f28:	d405      	bmi.n	8006f36 <_puts_r+0x9a>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	059b      	lsls	r3, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_puts_r+0x9a>
 8006f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f32:	f000 faa2 	bl	800747a <__retarget_lock_release_recursive>
 8006f36:	4628      	mov	r0, r5
 8006f38:	bd70      	pop	{r4, r5, r6, pc}
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da04      	bge.n	8006f48 <_puts_r+0xac>
 8006f3e:	69a2      	ldr	r2, [r4, #24]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	dc06      	bgt.n	8006f52 <_puts_r+0xb6>
 8006f44:	290a      	cmp	r1, #10
 8006f46:	d004      	beq.n	8006f52 <_puts_r+0xb6>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	7019      	strb	r1, [r3, #0]
 8006f50:	e7c5      	b.n	8006ede <_puts_r+0x42>
 8006f52:	4622      	mov	r2, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 f817 	bl	8006f88 <__swbuf_r>
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d1bf      	bne.n	8006ede <_puts_r+0x42>
 8006f5e:	e7df      	b.n	8006f20 <_puts_r+0x84>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	250a      	movs	r5, #10
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	6022      	str	r2, [r4, #0]
 8006f68:	701d      	strb	r5, [r3, #0]
 8006f6a:	e7db      	b.n	8006f24 <_puts_r+0x88>
 8006f6c:	08007fac 	.word	0x08007fac
 8006f70:	08007fcc 	.word	0x08007fcc
 8006f74:	08007f8c 	.word	0x08007f8c

08006f78 <puts>:
 8006f78:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <puts+0xc>)
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	f7ff bf8d 	b.w	8006e9c <_puts_r>
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c

08006f88 <__swbuf_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	460e      	mov	r6, r1
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	4605      	mov	r5, r0
 8006f90:	b118      	cbz	r0, 8006f9a <__swbuf_r+0x12>
 8006f92:	6983      	ldr	r3, [r0, #24]
 8006f94:	b90b      	cbnz	r3, 8006f9a <__swbuf_r+0x12>
 8006f96:	f000 f9d1 	bl	800733c <__sinit>
 8006f9a:	4b21      	ldr	r3, [pc, #132]	; (8007020 <__swbuf_r+0x98>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d12b      	bne.n	8006ff8 <__swbuf_r+0x70>
 8006fa0:	686c      	ldr	r4, [r5, #4]
 8006fa2:	69a3      	ldr	r3, [r4, #24]
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	071a      	lsls	r2, r3, #28
 8006faa:	d52f      	bpl.n	800700c <__swbuf_r+0x84>
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	b36b      	cbz	r3, 800700c <__swbuf_r+0x84>
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	6820      	ldr	r0, [r4, #0]
 8006fb4:	1ac0      	subs	r0, r0, r3
 8006fb6:	6963      	ldr	r3, [r4, #20]
 8006fb8:	b2f6      	uxtb	r6, r6
 8006fba:	4283      	cmp	r3, r0
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	dc04      	bgt.n	8006fca <__swbuf_r+0x42>
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f926 	bl	8007214 <_fflush_r>
 8006fc8:	bb30      	cbnz	r0, 8007018 <__swbuf_r+0x90>
 8006fca:	68a3      	ldr	r3, [r4, #8]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	60a3      	str	r3, [r4, #8]
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	6022      	str	r2, [r4, #0]
 8006fd6:	701e      	strb	r6, [r3, #0]
 8006fd8:	6963      	ldr	r3, [r4, #20]
 8006fda:	3001      	adds	r0, #1
 8006fdc:	4283      	cmp	r3, r0
 8006fde:	d004      	beq.n	8006fea <__swbuf_r+0x62>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	07db      	lsls	r3, r3, #31
 8006fe4:	d506      	bpl.n	8006ff4 <__swbuf_r+0x6c>
 8006fe6:	2e0a      	cmp	r6, #10
 8006fe8:	d104      	bne.n	8006ff4 <__swbuf_r+0x6c>
 8006fea:	4621      	mov	r1, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	f000 f911 	bl	8007214 <_fflush_r>
 8006ff2:	b988      	cbnz	r0, 8007018 <__swbuf_r+0x90>
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <__swbuf_r+0x9c>)
 8006ffa:	429c      	cmp	r4, r3
 8006ffc:	d101      	bne.n	8007002 <__swbuf_r+0x7a>
 8006ffe:	68ac      	ldr	r4, [r5, #8]
 8007000:	e7cf      	b.n	8006fa2 <__swbuf_r+0x1a>
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <__swbuf_r+0xa0>)
 8007004:	429c      	cmp	r4, r3
 8007006:	bf08      	it	eq
 8007008:	68ec      	ldreq	r4, [r5, #12]
 800700a:	e7ca      	b.n	8006fa2 <__swbuf_r+0x1a>
 800700c:	4621      	mov	r1, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f80c 	bl	800702c <__swsetup_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	d0cb      	beq.n	8006fb0 <__swbuf_r+0x28>
 8007018:	f04f 37ff 	mov.w	r7, #4294967295
 800701c:	e7ea      	b.n	8006ff4 <__swbuf_r+0x6c>
 800701e:	bf00      	nop
 8007020:	08007fac 	.word	0x08007fac
 8007024:	08007fcc 	.word	0x08007fcc
 8007028:	08007f8c 	.word	0x08007f8c

0800702c <__swsetup_r>:
 800702c:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <__swsetup_r+0xcc>)
 800702e:	b570      	push	{r4, r5, r6, lr}
 8007030:	681d      	ldr	r5, [r3, #0]
 8007032:	4606      	mov	r6, r0
 8007034:	460c      	mov	r4, r1
 8007036:	b125      	cbz	r5, 8007042 <__swsetup_r+0x16>
 8007038:	69ab      	ldr	r3, [r5, #24]
 800703a:	b913      	cbnz	r3, 8007042 <__swsetup_r+0x16>
 800703c:	4628      	mov	r0, r5
 800703e:	f000 f97d 	bl	800733c <__sinit>
 8007042:	4b2e      	ldr	r3, [pc, #184]	; (80070fc <__swsetup_r+0xd0>)
 8007044:	429c      	cmp	r4, r3
 8007046:	d10f      	bne.n	8007068 <__swsetup_r+0x3c>
 8007048:	686c      	ldr	r4, [r5, #4]
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007050:	0719      	lsls	r1, r3, #28
 8007052:	d42c      	bmi.n	80070ae <__swsetup_r+0x82>
 8007054:	06dd      	lsls	r5, r3, #27
 8007056:	d411      	bmi.n	800707c <__swsetup_r+0x50>
 8007058:	2309      	movs	r3, #9
 800705a:	6033      	str	r3, [r6, #0]
 800705c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	f04f 30ff 	mov.w	r0, #4294967295
 8007066:	e03e      	b.n	80070e6 <__swsetup_r+0xba>
 8007068:	4b25      	ldr	r3, [pc, #148]	; (8007100 <__swsetup_r+0xd4>)
 800706a:	429c      	cmp	r4, r3
 800706c:	d101      	bne.n	8007072 <__swsetup_r+0x46>
 800706e:	68ac      	ldr	r4, [r5, #8]
 8007070:	e7eb      	b.n	800704a <__swsetup_r+0x1e>
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <__swsetup_r+0xd8>)
 8007074:	429c      	cmp	r4, r3
 8007076:	bf08      	it	eq
 8007078:	68ec      	ldreq	r4, [r5, #12]
 800707a:	e7e6      	b.n	800704a <__swsetup_r+0x1e>
 800707c:	0758      	lsls	r0, r3, #29
 800707e:	d512      	bpl.n	80070a6 <__swsetup_r+0x7a>
 8007080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007082:	b141      	cbz	r1, 8007096 <__swsetup_r+0x6a>
 8007084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007088:	4299      	cmp	r1, r3
 800708a:	d002      	beq.n	8007092 <__swsetup_r+0x66>
 800708c:	4630      	mov	r0, r6
 800708e:	f000 fa5b 	bl	8007548 <_free_r>
 8007092:	2300      	movs	r3, #0
 8007094:	6363      	str	r3, [r4, #52]	; 0x34
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800709c:	81a3      	strh	r3, [r4, #12]
 800709e:	2300      	movs	r3, #0
 80070a0:	6063      	str	r3, [r4, #4]
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	f043 0308 	orr.w	r3, r3, #8
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	6923      	ldr	r3, [r4, #16]
 80070b0:	b94b      	cbnz	r3, 80070c6 <__swsetup_r+0x9a>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070bc:	d003      	beq.n	80070c6 <__swsetup_r+0x9a>
 80070be:	4621      	mov	r1, r4
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 fa01 	bl	80074c8 <__smakebuf_r>
 80070c6:	89a0      	ldrh	r0, [r4, #12]
 80070c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070cc:	f010 0301 	ands.w	r3, r0, #1
 80070d0:	d00a      	beq.n	80070e8 <__swsetup_r+0xbc>
 80070d2:	2300      	movs	r3, #0
 80070d4:	60a3      	str	r3, [r4, #8]
 80070d6:	6963      	ldr	r3, [r4, #20]
 80070d8:	425b      	negs	r3, r3
 80070da:	61a3      	str	r3, [r4, #24]
 80070dc:	6923      	ldr	r3, [r4, #16]
 80070de:	b943      	cbnz	r3, 80070f2 <__swsetup_r+0xc6>
 80070e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070e4:	d1ba      	bne.n	800705c <__swsetup_r+0x30>
 80070e6:	bd70      	pop	{r4, r5, r6, pc}
 80070e8:	0781      	lsls	r1, r0, #30
 80070ea:	bf58      	it	pl
 80070ec:	6963      	ldrpl	r3, [r4, #20]
 80070ee:	60a3      	str	r3, [r4, #8]
 80070f0:	e7f4      	b.n	80070dc <__swsetup_r+0xb0>
 80070f2:	2000      	movs	r0, #0
 80070f4:	e7f7      	b.n	80070e6 <__swsetup_r+0xba>
 80070f6:	bf00      	nop
 80070f8:	2000000c 	.word	0x2000000c
 80070fc:	08007fac 	.word	0x08007fac
 8007100:	08007fcc 	.word	0x08007fcc
 8007104:	08007f8c 	.word	0x08007f8c

08007108 <__sflush_r>:
 8007108:	898a      	ldrh	r2, [r1, #12]
 800710a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710e:	4605      	mov	r5, r0
 8007110:	0710      	lsls	r0, r2, #28
 8007112:	460c      	mov	r4, r1
 8007114:	d458      	bmi.n	80071c8 <__sflush_r+0xc0>
 8007116:	684b      	ldr	r3, [r1, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc05      	bgt.n	8007128 <__sflush_r+0x20>
 800711c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	dc02      	bgt.n	8007128 <__sflush_r+0x20>
 8007122:	2000      	movs	r0, #0
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800712a:	2e00      	cmp	r6, #0
 800712c:	d0f9      	beq.n	8007122 <__sflush_r+0x1a>
 800712e:	2300      	movs	r3, #0
 8007130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007134:	682f      	ldr	r7, [r5, #0]
 8007136:	602b      	str	r3, [r5, #0]
 8007138:	d032      	beq.n	80071a0 <__sflush_r+0x98>
 800713a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	075a      	lsls	r2, r3, #29
 8007140:	d505      	bpl.n	800714e <__sflush_r+0x46>
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	1ac0      	subs	r0, r0, r3
 8007146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007148:	b10b      	cbz	r3, 800714e <__sflush_r+0x46>
 800714a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800714c:	1ac0      	subs	r0, r0, r3
 800714e:	2300      	movs	r3, #0
 8007150:	4602      	mov	r2, r0
 8007152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007154:	6a21      	ldr	r1, [r4, #32]
 8007156:	4628      	mov	r0, r5
 8007158:	47b0      	blx	r6
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	d106      	bne.n	800716e <__sflush_r+0x66>
 8007160:	6829      	ldr	r1, [r5, #0]
 8007162:	291d      	cmp	r1, #29
 8007164:	d82c      	bhi.n	80071c0 <__sflush_r+0xb8>
 8007166:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <__sflush_r+0x108>)
 8007168:	40ca      	lsrs	r2, r1
 800716a:	07d6      	lsls	r6, r2, #31
 800716c:	d528      	bpl.n	80071c0 <__sflush_r+0xb8>
 800716e:	2200      	movs	r2, #0
 8007170:	6062      	str	r2, [r4, #4]
 8007172:	04d9      	lsls	r1, r3, #19
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	6022      	str	r2, [r4, #0]
 8007178:	d504      	bpl.n	8007184 <__sflush_r+0x7c>
 800717a:	1c42      	adds	r2, r0, #1
 800717c:	d101      	bne.n	8007182 <__sflush_r+0x7a>
 800717e:	682b      	ldr	r3, [r5, #0]
 8007180:	b903      	cbnz	r3, 8007184 <__sflush_r+0x7c>
 8007182:	6560      	str	r0, [r4, #84]	; 0x54
 8007184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007186:	602f      	str	r7, [r5, #0]
 8007188:	2900      	cmp	r1, #0
 800718a:	d0ca      	beq.n	8007122 <__sflush_r+0x1a>
 800718c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007190:	4299      	cmp	r1, r3
 8007192:	d002      	beq.n	800719a <__sflush_r+0x92>
 8007194:	4628      	mov	r0, r5
 8007196:	f000 f9d7 	bl	8007548 <_free_r>
 800719a:	2000      	movs	r0, #0
 800719c:	6360      	str	r0, [r4, #52]	; 0x34
 800719e:	e7c1      	b.n	8007124 <__sflush_r+0x1c>
 80071a0:	6a21      	ldr	r1, [r4, #32]
 80071a2:	2301      	movs	r3, #1
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b0      	blx	r6
 80071a8:	1c41      	adds	r1, r0, #1
 80071aa:	d1c7      	bne.n	800713c <__sflush_r+0x34>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0c4      	beq.n	800713c <__sflush_r+0x34>
 80071b2:	2b1d      	cmp	r3, #29
 80071b4:	d001      	beq.n	80071ba <__sflush_r+0xb2>
 80071b6:	2b16      	cmp	r3, #22
 80071b8:	d101      	bne.n	80071be <__sflush_r+0xb6>
 80071ba:	602f      	str	r7, [r5, #0]
 80071bc:	e7b1      	b.n	8007122 <__sflush_r+0x1a>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	e7ad      	b.n	8007124 <__sflush_r+0x1c>
 80071c8:	690f      	ldr	r7, [r1, #16]
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	d0a9      	beq.n	8007122 <__sflush_r+0x1a>
 80071ce:	0793      	lsls	r3, r2, #30
 80071d0:	680e      	ldr	r6, [r1, #0]
 80071d2:	bf08      	it	eq
 80071d4:	694b      	ldreq	r3, [r1, #20]
 80071d6:	600f      	str	r7, [r1, #0]
 80071d8:	bf18      	it	ne
 80071da:	2300      	movne	r3, #0
 80071dc:	eba6 0807 	sub.w	r8, r6, r7
 80071e0:	608b      	str	r3, [r1, #8]
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	dd9c      	ble.n	8007122 <__sflush_r+0x1a>
 80071e8:	6a21      	ldr	r1, [r4, #32]
 80071ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071ec:	4643      	mov	r3, r8
 80071ee:	463a      	mov	r2, r7
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	2800      	cmp	r0, #0
 80071f6:	dc06      	bgt.n	8007206 <__sflush_r+0xfe>
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e78e      	b.n	8007124 <__sflush_r+0x1c>
 8007206:	4407      	add	r7, r0
 8007208:	eba8 0800 	sub.w	r8, r8, r0
 800720c:	e7e9      	b.n	80071e2 <__sflush_r+0xda>
 800720e:	bf00      	nop
 8007210:	20400001 	.word	0x20400001

08007214 <_fflush_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	690b      	ldr	r3, [r1, #16]
 8007218:	4605      	mov	r5, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b913      	cbnz	r3, 8007224 <_fflush_r+0x10>
 800721e:	2500      	movs	r5, #0
 8007220:	4628      	mov	r0, r5
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	b118      	cbz	r0, 800722e <_fflush_r+0x1a>
 8007226:	6983      	ldr	r3, [r0, #24]
 8007228:	b90b      	cbnz	r3, 800722e <_fflush_r+0x1a>
 800722a:	f000 f887 	bl	800733c <__sinit>
 800722e:	4b14      	ldr	r3, [pc, #80]	; (8007280 <_fflush_r+0x6c>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d11b      	bne.n	800726c <_fflush_r+0x58>
 8007234:	686c      	ldr	r4, [r5, #4]
 8007236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0ef      	beq.n	800721e <_fflush_r+0xa>
 800723e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007240:	07d0      	lsls	r0, r2, #31
 8007242:	d404      	bmi.n	800724e <_fflush_r+0x3a>
 8007244:	0599      	lsls	r1, r3, #22
 8007246:	d402      	bmi.n	800724e <_fflush_r+0x3a>
 8007248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724a:	f000 f915 	bl	8007478 <__retarget_lock_acquire_recursive>
 800724e:	4628      	mov	r0, r5
 8007250:	4621      	mov	r1, r4
 8007252:	f7ff ff59 	bl	8007108 <__sflush_r>
 8007256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007258:	07da      	lsls	r2, r3, #31
 800725a:	4605      	mov	r5, r0
 800725c:	d4e0      	bmi.n	8007220 <_fflush_r+0xc>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	059b      	lsls	r3, r3, #22
 8007262:	d4dd      	bmi.n	8007220 <_fflush_r+0xc>
 8007264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007266:	f000 f908 	bl	800747a <__retarget_lock_release_recursive>
 800726a:	e7d9      	b.n	8007220 <_fflush_r+0xc>
 800726c:	4b05      	ldr	r3, [pc, #20]	; (8007284 <_fflush_r+0x70>)
 800726e:	429c      	cmp	r4, r3
 8007270:	d101      	bne.n	8007276 <_fflush_r+0x62>
 8007272:	68ac      	ldr	r4, [r5, #8]
 8007274:	e7df      	b.n	8007236 <_fflush_r+0x22>
 8007276:	4b04      	ldr	r3, [pc, #16]	; (8007288 <_fflush_r+0x74>)
 8007278:	429c      	cmp	r4, r3
 800727a:	bf08      	it	eq
 800727c:	68ec      	ldreq	r4, [r5, #12]
 800727e:	e7da      	b.n	8007236 <_fflush_r+0x22>
 8007280:	08007fac 	.word	0x08007fac
 8007284:	08007fcc 	.word	0x08007fcc
 8007288:	08007f8c 	.word	0x08007f8c

0800728c <std>:
 800728c:	2300      	movs	r3, #0
 800728e:	b510      	push	{r4, lr}
 8007290:	4604      	mov	r4, r0
 8007292:	e9c0 3300 	strd	r3, r3, [r0]
 8007296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800729a:	6083      	str	r3, [r0, #8]
 800729c:	8181      	strh	r1, [r0, #12]
 800729e:	6643      	str	r3, [r0, #100]	; 0x64
 80072a0:	81c2      	strh	r2, [r0, #14]
 80072a2:	6183      	str	r3, [r0, #24]
 80072a4:	4619      	mov	r1, r3
 80072a6:	2208      	movs	r2, #8
 80072a8:	305c      	adds	r0, #92	; 0x5c
 80072aa:	f7ff fdc1 	bl	8006e30 <memset>
 80072ae:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <std+0x38>)
 80072b0:	6263      	str	r3, [r4, #36]	; 0x24
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <std+0x3c>)
 80072b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <std+0x40>)
 80072b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072ba:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <std+0x44>)
 80072bc:	6224      	str	r4, [r4, #32]
 80072be:	6323      	str	r3, [r4, #48]	; 0x30
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	08007d95 	.word	0x08007d95
 80072c8:	08007db7 	.word	0x08007db7
 80072cc:	08007def 	.word	0x08007def
 80072d0:	08007e13 	.word	0x08007e13

080072d4 <_cleanup_r>:
 80072d4:	4901      	ldr	r1, [pc, #4]	; (80072dc <_cleanup_r+0x8>)
 80072d6:	f000 b8af 	b.w	8007438 <_fwalk_reent>
 80072da:	bf00      	nop
 80072dc:	08007215 	.word	0x08007215

080072e0 <__sfmoreglue>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	2268      	movs	r2, #104	; 0x68
 80072e4:	1e4d      	subs	r5, r1, #1
 80072e6:	4355      	muls	r5, r2
 80072e8:	460e      	mov	r6, r1
 80072ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072ee:	f000 f997 	bl	8007620 <_malloc_r>
 80072f2:	4604      	mov	r4, r0
 80072f4:	b140      	cbz	r0, 8007308 <__sfmoreglue+0x28>
 80072f6:	2100      	movs	r1, #0
 80072f8:	e9c0 1600 	strd	r1, r6, [r0]
 80072fc:	300c      	adds	r0, #12
 80072fe:	60a0      	str	r0, [r4, #8]
 8007300:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007304:	f7ff fd94 	bl	8006e30 <memset>
 8007308:	4620      	mov	r0, r4
 800730a:	bd70      	pop	{r4, r5, r6, pc}

0800730c <__sfp_lock_acquire>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <__sfp_lock_acquire+0x8>)
 800730e:	f000 b8b3 	b.w	8007478 <__retarget_lock_acquire_recursive>
 8007312:	bf00      	nop
 8007314:	20000269 	.word	0x20000269

08007318 <__sfp_lock_release>:
 8007318:	4801      	ldr	r0, [pc, #4]	; (8007320 <__sfp_lock_release+0x8>)
 800731a:	f000 b8ae 	b.w	800747a <__retarget_lock_release_recursive>
 800731e:	bf00      	nop
 8007320:	20000269 	.word	0x20000269

08007324 <__sinit_lock_acquire>:
 8007324:	4801      	ldr	r0, [pc, #4]	; (800732c <__sinit_lock_acquire+0x8>)
 8007326:	f000 b8a7 	b.w	8007478 <__retarget_lock_acquire_recursive>
 800732a:	bf00      	nop
 800732c:	2000026a 	.word	0x2000026a

08007330 <__sinit_lock_release>:
 8007330:	4801      	ldr	r0, [pc, #4]	; (8007338 <__sinit_lock_release+0x8>)
 8007332:	f000 b8a2 	b.w	800747a <__retarget_lock_release_recursive>
 8007336:	bf00      	nop
 8007338:	2000026a 	.word	0x2000026a

0800733c <__sinit>:
 800733c:	b510      	push	{r4, lr}
 800733e:	4604      	mov	r4, r0
 8007340:	f7ff fff0 	bl	8007324 <__sinit_lock_acquire>
 8007344:	69a3      	ldr	r3, [r4, #24]
 8007346:	b11b      	cbz	r3, 8007350 <__sinit+0x14>
 8007348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734c:	f7ff bff0 	b.w	8007330 <__sinit_lock_release>
 8007350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007354:	6523      	str	r3, [r4, #80]	; 0x50
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <__sinit+0x68>)
 8007358:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <__sinit+0x6c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	62a2      	str	r2, [r4, #40]	; 0x28
 800735e:	42a3      	cmp	r3, r4
 8007360:	bf04      	itt	eq
 8007362:	2301      	moveq	r3, #1
 8007364:	61a3      	streq	r3, [r4, #24]
 8007366:	4620      	mov	r0, r4
 8007368:	f000 f820 	bl	80073ac <__sfp>
 800736c:	6060      	str	r0, [r4, #4]
 800736e:	4620      	mov	r0, r4
 8007370:	f000 f81c 	bl	80073ac <__sfp>
 8007374:	60a0      	str	r0, [r4, #8]
 8007376:	4620      	mov	r0, r4
 8007378:	f000 f818 	bl	80073ac <__sfp>
 800737c:	2200      	movs	r2, #0
 800737e:	60e0      	str	r0, [r4, #12]
 8007380:	2104      	movs	r1, #4
 8007382:	6860      	ldr	r0, [r4, #4]
 8007384:	f7ff ff82 	bl	800728c <std>
 8007388:	68a0      	ldr	r0, [r4, #8]
 800738a:	2201      	movs	r2, #1
 800738c:	2109      	movs	r1, #9
 800738e:	f7ff ff7d 	bl	800728c <std>
 8007392:	68e0      	ldr	r0, [r4, #12]
 8007394:	2202      	movs	r2, #2
 8007396:	2112      	movs	r1, #18
 8007398:	f7ff ff78 	bl	800728c <std>
 800739c:	2301      	movs	r3, #1
 800739e:	61a3      	str	r3, [r4, #24]
 80073a0:	e7d2      	b.n	8007348 <__sinit+0xc>
 80073a2:	bf00      	nop
 80073a4:	08007f88 	.word	0x08007f88
 80073a8:	080072d5 	.word	0x080072d5

080073ac <__sfp>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	4607      	mov	r7, r0
 80073b0:	f7ff ffac 	bl	800730c <__sfp_lock_acquire>
 80073b4:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <__sfp+0x84>)
 80073b6:	681e      	ldr	r6, [r3, #0]
 80073b8:	69b3      	ldr	r3, [r6, #24]
 80073ba:	b913      	cbnz	r3, 80073c2 <__sfp+0x16>
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff ffbd 	bl	800733c <__sinit>
 80073c2:	3648      	adds	r6, #72	; 0x48
 80073c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	d503      	bpl.n	80073d4 <__sfp+0x28>
 80073cc:	6833      	ldr	r3, [r6, #0]
 80073ce:	b30b      	cbz	r3, 8007414 <__sfp+0x68>
 80073d0:	6836      	ldr	r6, [r6, #0]
 80073d2:	e7f7      	b.n	80073c4 <__sfp+0x18>
 80073d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073d8:	b9d5      	cbnz	r5, 8007410 <__sfp+0x64>
 80073da:	4b16      	ldr	r3, [pc, #88]	; (8007434 <__sfp+0x88>)
 80073dc:	60e3      	str	r3, [r4, #12]
 80073de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073e2:	6665      	str	r5, [r4, #100]	; 0x64
 80073e4:	f000 f847 	bl	8007476 <__retarget_lock_init_recursive>
 80073e8:	f7ff ff96 	bl	8007318 <__sfp_lock_release>
 80073ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073f4:	6025      	str	r5, [r4, #0]
 80073f6:	61a5      	str	r5, [r4, #24]
 80073f8:	2208      	movs	r2, #8
 80073fa:	4629      	mov	r1, r5
 80073fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007400:	f7ff fd16 	bl	8006e30 <memset>
 8007404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800740c:	4620      	mov	r0, r4
 800740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007410:	3468      	adds	r4, #104	; 0x68
 8007412:	e7d9      	b.n	80073c8 <__sfp+0x1c>
 8007414:	2104      	movs	r1, #4
 8007416:	4638      	mov	r0, r7
 8007418:	f7ff ff62 	bl	80072e0 <__sfmoreglue>
 800741c:	4604      	mov	r4, r0
 800741e:	6030      	str	r0, [r6, #0]
 8007420:	2800      	cmp	r0, #0
 8007422:	d1d5      	bne.n	80073d0 <__sfp+0x24>
 8007424:	f7ff ff78 	bl	8007318 <__sfp_lock_release>
 8007428:	230c      	movs	r3, #12
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	e7ee      	b.n	800740c <__sfp+0x60>
 800742e:	bf00      	nop
 8007430:	08007f88 	.word	0x08007f88
 8007434:	ffff0001 	.word	0xffff0001

08007438 <_fwalk_reent>:
 8007438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800743c:	4606      	mov	r6, r0
 800743e:	4688      	mov	r8, r1
 8007440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007444:	2700      	movs	r7, #0
 8007446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800744a:	f1b9 0901 	subs.w	r9, r9, #1
 800744e:	d505      	bpl.n	800745c <_fwalk_reent+0x24>
 8007450:	6824      	ldr	r4, [r4, #0]
 8007452:	2c00      	cmp	r4, #0
 8007454:	d1f7      	bne.n	8007446 <_fwalk_reent+0xe>
 8007456:	4638      	mov	r0, r7
 8007458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800745c:	89ab      	ldrh	r3, [r5, #12]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d907      	bls.n	8007472 <_fwalk_reent+0x3a>
 8007462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007466:	3301      	adds	r3, #1
 8007468:	d003      	beq.n	8007472 <_fwalk_reent+0x3a>
 800746a:	4629      	mov	r1, r5
 800746c:	4630      	mov	r0, r6
 800746e:	47c0      	blx	r8
 8007470:	4307      	orrs	r7, r0
 8007472:	3568      	adds	r5, #104	; 0x68
 8007474:	e7e9      	b.n	800744a <_fwalk_reent+0x12>

08007476 <__retarget_lock_init_recursive>:
 8007476:	4770      	bx	lr

08007478 <__retarget_lock_acquire_recursive>:
 8007478:	4770      	bx	lr

0800747a <__retarget_lock_release_recursive>:
 800747a:	4770      	bx	lr

0800747c <__swhatbuf_r>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	460e      	mov	r6, r1
 8007480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007484:	2900      	cmp	r1, #0
 8007486:	b096      	sub	sp, #88	; 0x58
 8007488:	4614      	mov	r4, r2
 800748a:	461d      	mov	r5, r3
 800748c:	da08      	bge.n	80074a0 <__swhatbuf_r+0x24>
 800748e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	061a      	lsls	r2, r3, #24
 8007498:	d410      	bmi.n	80074bc <__swhatbuf_r+0x40>
 800749a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800749e:	e00e      	b.n	80074be <__swhatbuf_r+0x42>
 80074a0:	466a      	mov	r2, sp
 80074a2:	f000 fcdd 	bl	8007e60 <_fstat_r>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	dbf1      	blt.n	800748e <__swhatbuf_r+0x12>
 80074aa:	9a01      	ldr	r2, [sp, #4]
 80074ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074b4:	425a      	negs	r2, r3
 80074b6:	415a      	adcs	r2, r3
 80074b8:	602a      	str	r2, [r5, #0]
 80074ba:	e7ee      	b.n	800749a <__swhatbuf_r+0x1e>
 80074bc:	2340      	movs	r3, #64	; 0x40
 80074be:	2000      	movs	r0, #0
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	b016      	add	sp, #88	; 0x58
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080074c8 <__smakebuf_r>:
 80074c8:	898b      	ldrh	r3, [r1, #12]
 80074ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074cc:	079d      	lsls	r5, r3, #30
 80074ce:	4606      	mov	r6, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	d507      	bpl.n	80074e4 <__smakebuf_r+0x1c>
 80074d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	2301      	movs	r3, #1
 80074de:	6163      	str	r3, [r4, #20]
 80074e0:	b002      	add	sp, #8
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	ab01      	add	r3, sp, #4
 80074e6:	466a      	mov	r2, sp
 80074e8:	f7ff ffc8 	bl	800747c <__swhatbuf_r>
 80074ec:	9900      	ldr	r1, [sp, #0]
 80074ee:	4605      	mov	r5, r0
 80074f0:	4630      	mov	r0, r6
 80074f2:	f000 f895 	bl	8007620 <_malloc_r>
 80074f6:	b948      	cbnz	r0, 800750c <__smakebuf_r+0x44>
 80074f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fc:	059a      	lsls	r2, r3, #22
 80074fe:	d4ef      	bmi.n	80074e0 <__smakebuf_r+0x18>
 8007500:	f023 0303 	bic.w	r3, r3, #3
 8007504:	f043 0302 	orr.w	r3, r3, #2
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	e7e3      	b.n	80074d4 <__smakebuf_r+0xc>
 800750c:	4b0d      	ldr	r3, [pc, #52]	; (8007544 <__smakebuf_r+0x7c>)
 800750e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	6020      	str	r0, [r4, #0]
 8007514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	9b00      	ldr	r3, [sp, #0]
 800751c:	6163      	str	r3, [r4, #20]
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	6120      	str	r0, [r4, #16]
 8007522:	b15b      	cbz	r3, 800753c <__smakebuf_r+0x74>
 8007524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007528:	4630      	mov	r0, r6
 800752a:	f000 fcab 	bl	8007e84 <_isatty_r>
 800752e:	b128      	cbz	r0, 800753c <__smakebuf_r+0x74>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f023 0303 	bic.w	r3, r3, #3
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	89a0      	ldrh	r0, [r4, #12]
 800753e:	4305      	orrs	r5, r0
 8007540:	81a5      	strh	r5, [r4, #12]
 8007542:	e7cd      	b.n	80074e0 <__smakebuf_r+0x18>
 8007544:	080072d5 	.word	0x080072d5

08007548 <_free_r>:
 8007548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800754a:	2900      	cmp	r1, #0
 800754c:	d044      	beq.n	80075d8 <_free_r+0x90>
 800754e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007552:	9001      	str	r0, [sp, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f1a1 0404 	sub.w	r4, r1, #4
 800755a:	bfb8      	it	lt
 800755c:	18e4      	addlt	r4, r4, r3
 800755e:	f000 fcb3 	bl	8007ec8 <__malloc_lock>
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <_free_r+0x94>)
 8007564:	9801      	ldr	r0, [sp, #4]
 8007566:	6813      	ldr	r3, [r2, #0]
 8007568:	b933      	cbnz	r3, 8007578 <_free_r+0x30>
 800756a:	6063      	str	r3, [r4, #4]
 800756c:	6014      	str	r4, [r2, #0]
 800756e:	b003      	add	sp, #12
 8007570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007574:	f000 bcae 	b.w	8007ed4 <__malloc_unlock>
 8007578:	42a3      	cmp	r3, r4
 800757a:	d908      	bls.n	800758e <_free_r+0x46>
 800757c:	6825      	ldr	r5, [r4, #0]
 800757e:	1961      	adds	r1, r4, r5
 8007580:	428b      	cmp	r3, r1
 8007582:	bf01      	itttt	eq
 8007584:	6819      	ldreq	r1, [r3, #0]
 8007586:	685b      	ldreq	r3, [r3, #4]
 8007588:	1949      	addeq	r1, r1, r5
 800758a:	6021      	streq	r1, [r4, #0]
 800758c:	e7ed      	b.n	800756a <_free_r+0x22>
 800758e:	461a      	mov	r2, r3
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	b10b      	cbz	r3, 8007598 <_free_r+0x50>
 8007594:	42a3      	cmp	r3, r4
 8007596:	d9fa      	bls.n	800758e <_free_r+0x46>
 8007598:	6811      	ldr	r1, [r2, #0]
 800759a:	1855      	adds	r5, r2, r1
 800759c:	42a5      	cmp	r5, r4
 800759e:	d10b      	bne.n	80075b8 <_free_r+0x70>
 80075a0:	6824      	ldr	r4, [r4, #0]
 80075a2:	4421      	add	r1, r4
 80075a4:	1854      	adds	r4, r2, r1
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	6011      	str	r1, [r2, #0]
 80075aa:	d1e0      	bne.n	800756e <_free_r+0x26>
 80075ac:	681c      	ldr	r4, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	6053      	str	r3, [r2, #4]
 80075b2:	4421      	add	r1, r4
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	e7da      	b.n	800756e <_free_r+0x26>
 80075b8:	d902      	bls.n	80075c0 <_free_r+0x78>
 80075ba:	230c      	movs	r3, #12
 80075bc:	6003      	str	r3, [r0, #0]
 80075be:	e7d6      	b.n	800756e <_free_r+0x26>
 80075c0:	6825      	ldr	r5, [r4, #0]
 80075c2:	1961      	adds	r1, r4, r5
 80075c4:	428b      	cmp	r3, r1
 80075c6:	bf04      	itt	eq
 80075c8:	6819      	ldreq	r1, [r3, #0]
 80075ca:	685b      	ldreq	r3, [r3, #4]
 80075cc:	6063      	str	r3, [r4, #4]
 80075ce:	bf04      	itt	eq
 80075d0:	1949      	addeq	r1, r1, r5
 80075d2:	6021      	streq	r1, [r4, #0]
 80075d4:	6054      	str	r4, [r2, #4]
 80075d6:	e7ca      	b.n	800756e <_free_r+0x26>
 80075d8:	b003      	add	sp, #12
 80075da:	bd30      	pop	{r4, r5, pc}
 80075dc:	2000026c 	.word	0x2000026c

080075e0 <sbrk_aligned>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4e0e      	ldr	r6, [pc, #56]	; (800761c <sbrk_aligned+0x3c>)
 80075e4:	460c      	mov	r4, r1
 80075e6:	6831      	ldr	r1, [r6, #0]
 80075e8:	4605      	mov	r5, r0
 80075ea:	b911      	cbnz	r1, 80075f2 <sbrk_aligned+0x12>
 80075ec:	f000 fbc2 	bl	8007d74 <_sbrk_r>
 80075f0:	6030      	str	r0, [r6, #0]
 80075f2:	4621      	mov	r1, r4
 80075f4:	4628      	mov	r0, r5
 80075f6:	f000 fbbd 	bl	8007d74 <_sbrk_r>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	d00a      	beq.n	8007614 <sbrk_aligned+0x34>
 80075fe:	1cc4      	adds	r4, r0, #3
 8007600:	f024 0403 	bic.w	r4, r4, #3
 8007604:	42a0      	cmp	r0, r4
 8007606:	d007      	beq.n	8007618 <sbrk_aligned+0x38>
 8007608:	1a21      	subs	r1, r4, r0
 800760a:	4628      	mov	r0, r5
 800760c:	f000 fbb2 	bl	8007d74 <_sbrk_r>
 8007610:	3001      	adds	r0, #1
 8007612:	d101      	bne.n	8007618 <sbrk_aligned+0x38>
 8007614:	f04f 34ff 	mov.w	r4, #4294967295
 8007618:	4620      	mov	r0, r4
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	20000270 	.word	0x20000270

08007620 <_malloc_r>:
 8007620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007624:	1ccd      	adds	r5, r1, #3
 8007626:	f025 0503 	bic.w	r5, r5, #3
 800762a:	3508      	adds	r5, #8
 800762c:	2d0c      	cmp	r5, #12
 800762e:	bf38      	it	cc
 8007630:	250c      	movcc	r5, #12
 8007632:	2d00      	cmp	r5, #0
 8007634:	4607      	mov	r7, r0
 8007636:	db01      	blt.n	800763c <_malloc_r+0x1c>
 8007638:	42a9      	cmp	r1, r5
 800763a:	d905      	bls.n	8007648 <_malloc_r+0x28>
 800763c:	230c      	movs	r3, #12
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	2600      	movs	r6, #0
 8007642:	4630      	mov	r0, r6
 8007644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007648:	4e2e      	ldr	r6, [pc, #184]	; (8007704 <_malloc_r+0xe4>)
 800764a:	f000 fc3d 	bl	8007ec8 <__malloc_lock>
 800764e:	6833      	ldr	r3, [r6, #0]
 8007650:	461c      	mov	r4, r3
 8007652:	bb34      	cbnz	r4, 80076a2 <_malloc_r+0x82>
 8007654:	4629      	mov	r1, r5
 8007656:	4638      	mov	r0, r7
 8007658:	f7ff ffc2 	bl	80075e0 <sbrk_aligned>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	4604      	mov	r4, r0
 8007660:	d14d      	bne.n	80076fe <_malloc_r+0xde>
 8007662:	6834      	ldr	r4, [r6, #0]
 8007664:	4626      	mov	r6, r4
 8007666:	2e00      	cmp	r6, #0
 8007668:	d140      	bne.n	80076ec <_malloc_r+0xcc>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	4631      	mov	r1, r6
 800766e:	4638      	mov	r0, r7
 8007670:	eb04 0803 	add.w	r8, r4, r3
 8007674:	f000 fb7e 	bl	8007d74 <_sbrk_r>
 8007678:	4580      	cmp	r8, r0
 800767a:	d13a      	bne.n	80076f2 <_malloc_r+0xd2>
 800767c:	6821      	ldr	r1, [r4, #0]
 800767e:	3503      	adds	r5, #3
 8007680:	1a6d      	subs	r5, r5, r1
 8007682:	f025 0503 	bic.w	r5, r5, #3
 8007686:	3508      	adds	r5, #8
 8007688:	2d0c      	cmp	r5, #12
 800768a:	bf38      	it	cc
 800768c:	250c      	movcc	r5, #12
 800768e:	4629      	mov	r1, r5
 8007690:	4638      	mov	r0, r7
 8007692:	f7ff ffa5 	bl	80075e0 <sbrk_aligned>
 8007696:	3001      	adds	r0, #1
 8007698:	d02b      	beq.n	80076f2 <_malloc_r+0xd2>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	442b      	add	r3, r5
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	e00e      	b.n	80076c0 <_malloc_r+0xa0>
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	1b52      	subs	r2, r2, r5
 80076a6:	d41e      	bmi.n	80076e6 <_malloc_r+0xc6>
 80076a8:	2a0b      	cmp	r2, #11
 80076aa:	d916      	bls.n	80076da <_malloc_r+0xba>
 80076ac:	1961      	adds	r1, r4, r5
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	6025      	str	r5, [r4, #0]
 80076b2:	bf18      	it	ne
 80076b4:	6059      	strne	r1, [r3, #4]
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	bf08      	it	eq
 80076ba:	6031      	streq	r1, [r6, #0]
 80076bc:	5162      	str	r2, [r4, r5]
 80076be:	604b      	str	r3, [r1, #4]
 80076c0:	4638      	mov	r0, r7
 80076c2:	f104 060b 	add.w	r6, r4, #11
 80076c6:	f000 fc05 	bl	8007ed4 <__malloc_unlock>
 80076ca:	f026 0607 	bic.w	r6, r6, #7
 80076ce:	1d23      	adds	r3, r4, #4
 80076d0:	1af2      	subs	r2, r6, r3
 80076d2:	d0b6      	beq.n	8007642 <_malloc_r+0x22>
 80076d4:	1b9b      	subs	r3, r3, r6
 80076d6:	50a3      	str	r3, [r4, r2]
 80076d8:	e7b3      	b.n	8007642 <_malloc_r+0x22>
 80076da:	6862      	ldr	r2, [r4, #4]
 80076dc:	42a3      	cmp	r3, r4
 80076de:	bf0c      	ite	eq
 80076e0:	6032      	streq	r2, [r6, #0]
 80076e2:	605a      	strne	r2, [r3, #4]
 80076e4:	e7ec      	b.n	80076c0 <_malloc_r+0xa0>
 80076e6:	4623      	mov	r3, r4
 80076e8:	6864      	ldr	r4, [r4, #4]
 80076ea:	e7b2      	b.n	8007652 <_malloc_r+0x32>
 80076ec:	4634      	mov	r4, r6
 80076ee:	6876      	ldr	r6, [r6, #4]
 80076f0:	e7b9      	b.n	8007666 <_malloc_r+0x46>
 80076f2:	230c      	movs	r3, #12
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	4638      	mov	r0, r7
 80076f8:	f000 fbec 	bl	8007ed4 <__malloc_unlock>
 80076fc:	e7a1      	b.n	8007642 <_malloc_r+0x22>
 80076fe:	6025      	str	r5, [r4, #0]
 8007700:	e7de      	b.n	80076c0 <_malloc_r+0xa0>
 8007702:	bf00      	nop
 8007704:	2000026c 	.word	0x2000026c

08007708 <__sfputc_r>:
 8007708:	6893      	ldr	r3, [r2, #8]
 800770a:	3b01      	subs	r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	b410      	push	{r4}
 8007710:	6093      	str	r3, [r2, #8]
 8007712:	da08      	bge.n	8007726 <__sfputc_r+0x1e>
 8007714:	6994      	ldr	r4, [r2, #24]
 8007716:	42a3      	cmp	r3, r4
 8007718:	db01      	blt.n	800771e <__sfputc_r+0x16>
 800771a:	290a      	cmp	r1, #10
 800771c:	d103      	bne.n	8007726 <__sfputc_r+0x1e>
 800771e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007722:	f7ff bc31 	b.w	8006f88 <__swbuf_r>
 8007726:	6813      	ldr	r3, [r2, #0]
 8007728:	1c58      	adds	r0, r3, #1
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	7019      	strb	r1, [r3, #0]
 800772e:	4608      	mov	r0, r1
 8007730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007734:	4770      	bx	lr

08007736 <__sfputs_r>:
 8007736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007738:	4606      	mov	r6, r0
 800773a:	460f      	mov	r7, r1
 800773c:	4614      	mov	r4, r2
 800773e:	18d5      	adds	r5, r2, r3
 8007740:	42ac      	cmp	r4, r5
 8007742:	d101      	bne.n	8007748 <__sfputs_r+0x12>
 8007744:	2000      	movs	r0, #0
 8007746:	e007      	b.n	8007758 <__sfputs_r+0x22>
 8007748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800774c:	463a      	mov	r2, r7
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ffda 	bl	8007708 <__sfputc_r>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d1f3      	bne.n	8007740 <__sfputs_r+0xa>
 8007758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800775c <_vfiprintf_r>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	460d      	mov	r5, r1
 8007762:	b09d      	sub	sp, #116	; 0x74
 8007764:	4614      	mov	r4, r2
 8007766:	4698      	mov	r8, r3
 8007768:	4606      	mov	r6, r0
 800776a:	b118      	cbz	r0, 8007774 <_vfiprintf_r+0x18>
 800776c:	6983      	ldr	r3, [r0, #24]
 800776e:	b90b      	cbnz	r3, 8007774 <_vfiprintf_r+0x18>
 8007770:	f7ff fde4 	bl	800733c <__sinit>
 8007774:	4b89      	ldr	r3, [pc, #548]	; (800799c <_vfiprintf_r+0x240>)
 8007776:	429d      	cmp	r5, r3
 8007778:	d11b      	bne.n	80077b2 <_vfiprintf_r+0x56>
 800777a:	6875      	ldr	r5, [r6, #4]
 800777c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800777e:	07d9      	lsls	r1, r3, #31
 8007780:	d405      	bmi.n	800778e <_vfiprintf_r+0x32>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	059a      	lsls	r2, r3, #22
 8007786:	d402      	bmi.n	800778e <_vfiprintf_r+0x32>
 8007788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800778a:	f7ff fe75 	bl	8007478 <__retarget_lock_acquire_recursive>
 800778e:	89ab      	ldrh	r3, [r5, #12]
 8007790:	071b      	lsls	r3, r3, #28
 8007792:	d501      	bpl.n	8007798 <_vfiprintf_r+0x3c>
 8007794:	692b      	ldr	r3, [r5, #16]
 8007796:	b9eb      	cbnz	r3, 80077d4 <_vfiprintf_r+0x78>
 8007798:	4629      	mov	r1, r5
 800779a:	4630      	mov	r0, r6
 800779c:	f7ff fc46 	bl	800702c <__swsetup_r>
 80077a0:	b1c0      	cbz	r0, 80077d4 <_vfiprintf_r+0x78>
 80077a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077a4:	07dc      	lsls	r4, r3, #31
 80077a6:	d50e      	bpl.n	80077c6 <_vfiprintf_r+0x6a>
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	b01d      	add	sp, #116	; 0x74
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	4b7b      	ldr	r3, [pc, #492]	; (80079a0 <_vfiprintf_r+0x244>)
 80077b4:	429d      	cmp	r5, r3
 80077b6:	d101      	bne.n	80077bc <_vfiprintf_r+0x60>
 80077b8:	68b5      	ldr	r5, [r6, #8]
 80077ba:	e7df      	b.n	800777c <_vfiprintf_r+0x20>
 80077bc:	4b79      	ldr	r3, [pc, #484]	; (80079a4 <_vfiprintf_r+0x248>)
 80077be:	429d      	cmp	r5, r3
 80077c0:	bf08      	it	eq
 80077c2:	68f5      	ldreq	r5, [r6, #12]
 80077c4:	e7da      	b.n	800777c <_vfiprintf_r+0x20>
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	0598      	lsls	r0, r3, #22
 80077ca:	d4ed      	bmi.n	80077a8 <_vfiprintf_r+0x4c>
 80077cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ce:	f7ff fe54 	bl	800747a <__retarget_lock_release_recursive>
 80077d2:	e7e9      	b.n	80077a8 <_vfiprintf_r+0x4c>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	2320      	movs	r3, #32
 80077da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077de:	f8cd 800c 	str.w	r8, [sp, #12]
 80077e2:	2330      	movs	r3, #48	; 0x30
 80077e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079a8 <_vfiprintf_r+0x24c>
 80077e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ec:	f04f 0901 	mov.w	r9, #1
 80077f0:	4623      	mov	r3, r4
 80077f2:	469a      	mov	sl, r3
 80077f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f8:	b10a      	cbz	r2, 80077fe <_vfiprintf_r+0xa2>
 80077fa:	2a25      	cmp	r2, #37	; 0x25
 80077fc:	d1f9      	bne.n	80077f2 <_vfiprintf_r+0x96>
 80077fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007802:	d00b      	beq.n	800781c <_vfiprintf_r+0xc0>
 8007804:	465b      	mov	r3, fp
 8007806:	4622      	mov	r2, r4
 8007808:	4629      	mov	r1, r5
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff ff93 	bl	8007736 <__sfputs_r>
 8007810:	3001      	adds	r0, #1
 8007812:	f000 80aa 	beq.w	800796a <_vfiprintf_r+0x20e>
 8007816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007818:	445a      	add	r2, fp
 800781a:	9209      	str	r2, [sp, #36]	; 0x24
 800781c:	f89a 3000 	ldrb.w	r3, [sl]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80a2 	beq.w	800796a <_vfiprintf_r+0x20e>
 8007826:	2300      	movs	r3, #0
 8007828:	f04f 32ff 	mov.w	r2, #4294967295
 800782c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007830:	f10a 0a01 	add.w	sl, sl, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800783c:	931a      	str	r3, [sp, #104]	; 0x68
 800783e:	4654      	mov	r4, sl
 8007840:	2205      	movs	r2, #5
 8007842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007846:	4858      	ldr	r0, [pc, #352]	; (80079a8 <_vfiprintf_r+0x24c>)
 8007848:	f7f8 fcc2 	bl	80001d0 <memchr>
 800784c:	9a04      	ldr	r2, [sp, #16]
 800784e:	b9d8      	cbnz	r0, 8007888 <_vfiprintf_r+0x12c>
 8007850:	06d1      	lsls	r1, r2, #27
 8007852:	bf44      	itt	mi
 8007854:	2320      	movmi	r3, #32
 8007856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785a:	0713      	lsls	r3, r2, #28
 800785c:	bf44      	itt	mi
 800785e:	232b      	movmi	r3, #43	; 0x2b
 8007860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007864:	f89a 3000 	ldrb.w	r3, [sl]
 8007868:	2b2a      	cmp	r3, #42	; 0x2a
 800786a:	d015      	beq.n	8007898 <_vfiprintf_r+0x13c>
 800786c:	9a07      	ldr	r2, [sp, #28]
 800786e:	4654      	mov	r4, sl
 8007870:	2000      	movs	r0, #0
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4621      	mov	r1, r4
 8007878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800787c:	3b30      	subs	r3, #48	; 0x30
 800787e:	2b09      	cmp	r3, #9
 8007880:	d94e      	bls.n	8007920 <_vfiprintf_r+0x1c4>
 8007882:	b1b0      	cbz	r0, 80078b2 <_vfiprintf_r+0x156>
 8007884:	9207      	str	r2, [sp, #28]
 8007886:	e014      	b.n	80078b2 <_vfiprintf_r+0x156>
 8007888:	eba0 0308 	sub.w	r3, r0, r8
 800788c:	fa09 f303 	lsl.w	r3, r9, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	46a2      	mov	sl, r4
 8007896:	e7d2      	b.n	800783e <_vfiprintf_r+0xe2>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	1d19      	adds	r1, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	9103      	str	r1, [sp, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfbb      	ittet	lt
 80078a4:	425b      	neglt	r3, r3
 80078a6:	f042 0202 	orrlt.w	r2, r2, #2
 80078aa:	9307      	strge	r3, [sp, #28]
 80078ac:	9307      	strlt	r3, [sp, #28]
 80078ae:	bfb8      	it	lt
 80078b0:	9204      	strlt	r2, [sp, #16]
 80078b2:	7823      	ldrb	r3, [r4, #0]
 80078b4:	2b2e      	cmp	r3, #46	; 0x2e
 80078b6:	d10c      	bne.n	80078d2 <_vfiprintf_r+0x176>
 80078b8:	7863      	ldrb	r3, [r4, #1]
 80078ba:	2b2a      	cmp	r3, #42	; 0x2a
 80078bc:	d135      	bne.n	800792a <_vfiprintf_r+0x1ce>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	9203      	str	r2, [sp, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfb8      	it	lt
 80078ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80078ce:	3402      	adds	r4, #2
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079b8 <_vfiprintf_r+0x25c>
 80078d6:	7821      	ldrb	r1, [r4, #0]
 80078d8:	2203      	movs	r2, #3
 80078da:	4650      	mov	r0, sl
 80078dc:	f7f8 fc78 	bl	80001d0 <memchr>
 80078e0:	b140      	cbz	r0, 80078f4 <_vfiprintf_r+0x198>
 80078e2:	2340      	movs	r3, #64	; 0x40
 80078e4:	eba0 000a 	sub.w	r0, r0, sl
 80078e8:	fa03 f000 	lsl.w	r0, r3, r0
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	4303      	orrs	r3, r0
 80078f0:	3401      	adds	r4, #1
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f8:	482c      	ldr	r0, [pc, #176]	; (80079ac <_vfiprintf_r+0x250>)
 80078fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078fe:	2206      	movs	r2, #6
 8007900:	f7f8 fc66 	bl	80001d0 <memchr>
 8007904:	2800      	cmp	r0, #0
 8007906:	d03f      	beq.n	8007988 <_vfiprintf_r+0x22c>
 8007908:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <_vfiprintf_r+0x254>)
 800790a:	bb1b      	cbnz	r3, 8007954 <_vfiprintf_r+0x1f8>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	3307      	adds	r3, #7
 8007910:	f023 0307 	bic.w	r3, r3, #7
 8007914:	3308      	adds	r3, #8
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791a:	443b      	add	r3, r7
 800791c:	9309      	str	r3, [sp, #36]	; 0x24
 800791e:	e767      	b.n	80077f0 <_vfiprintf_r+0x94>
 8007920:	fb0c 3202 	mla	r2, ip, r2, r3
 8007924:	460c      	mov	r4, r1
 8007926:	2001      	movs	r0, #1
 8007928:	e7a5      	b.n	8007876 <_vfiprintf_r+0x11a>
 800792a:	2300      	movs	r3, #0
 800792c:	3401      	adds	r4, #1
 800792e:	9305      	str	r3, [sp, #20]
 8007930:	4619      	mov	r1, r3
 8007932:	f04f 0c0a 	mov.w	ip, #10
 8007936:	4620      	mov	r0, r4
 8007938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800793c:	3a30      	subs	r2, #48	; 0x30
 800793e:	2a09      	cmp	r2, #9
 8007940:	d903      	bls.n	800794a <_vfiprintf_r+0x1ee>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0c5      	beq.n	80078d2 <_vfiprintf_r+0x176>
 8007946:	9105      	str	r1, [sp, #20]
 8007948:	e7c3      	b.n	80078d2 <_vfiprintf_r+0x176>
 800794a:	fb0c 2101 	mla	r1, ip, r1, r2
 800794e:	4604      	mov	r4, r0
 8007950:	2301      	movs	r3, #1
 8007952:	e7f0      	b.n	8007936 <_vfiprintf_r+0x1da>
 8007954:	ab03      	add	r3, sp, #12
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	462a      	mov	r2, r5
 800795a:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <_vfiprintf_r+0x258>)
 800795c:	a904      	add	r1, sp, #16
 800795e:	4630      	mov	r0, r6
 8007960:	f3af 8000 	nop.w
 8007964:	4607      	mov	r7, r0
 8007966:	1c78      	adds	r0, r7, #1
 8007968:	d1d6      	bne.n	8007918 <_vfiprintf_r+0x1bc>
 800796a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800796c:	07d9      	lsls	r1, r3, #31
 800796e:	d405      	bmi.n	800797c <_vfiprintf_r+0x220>
 8007970:	89ab      	ldrh	r3, [r5, #12]
 8007972:	059a      	lsls	r2, r3, #22
 8007974:	d402      	bmi.n	800797c <_vfiprintf_r+0x220>
 8007976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007978:	f7ff fd7f 	bl	800747a <__retarget_lock_release_recursive>
 800797c:	89ab      	ldrh	r3, [r5, #12]
 800797e:	065b      	lsls	r3, r3, #25
 8007980:	f53f af12 	bmi.w	80077a8 <_vfiprintf_r+0x4c>
 8007984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007986:	e711      	b.n	80077ac <_vfiprintf_r+0x50>
 8007988:	ab03      	add	r3, sp, #12
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	462a      	mov	r2, r5
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <_vfiprintf_r+0x258>)
 8007990:	a904      	add	r1, sp, #16
 8007992:	4630      	mov	r0, r6
 8007994:	f000 f880 	bl	8007a98 <_printf_i>
 8007998:	e7e4      	b.n	8007964 <_vfiprintf_r+0x208>
 800799a:	bf00      	nop
 800799c:	08007fac 	.word	0x08007fac
 80079a0:	08007fcc 	.word	0x08007fcc
 80079a4:	08007f8c 	.word	0x08007f8c
 80079a8:	08007fec 	.word	0x08007fec
 80079ac:	08007ff6 	.word	0x08007ff6
 80079b0:	00000000 	.word	0x00000000
 80079b4:	08007737 	.word	0x08007737
 80079b8:	08007ff2 	.word	0x08007ff2

080079bc <_printf_common>:
 80079bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c0:	4616      	mov	r6, r2
 80079c2:	4699      	mov	r9, r3
 80079c4:	688a      	ldr	r2, [r1, #8]
 80079c6:	690b      	ldr	r3, [r1, #16]
 80079c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079cc:	4293      	cmp	r3, r2
 80079ce:	bfb8      	it	lt
 80079d0:	4613      	movlt	r3, r2
 80079d2:	6033      	str	r3, [r6, #0]
 80079d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079d8:	4607      	mov	r7, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	b10a      	cbz	r2, 80079e2 <_printf_common+0x26>
 80079de:	3301      	adds	r3, #1
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	0699      	lsls	r1, r3, #26
 80079e6:	bf42      	ittt	mi
 80079e8:	6833      	ldrmi	r3, [r6, #0]
 80079ea:	3302      	addmi	r3, #2
 80079ec:	6033      	strmi	r3, [r6, #0]
 80079ee:	6825      	ldr	r5, [r4, #0]
 80079f0:	f015 0506 	ands.w	r5, r5, #6
 80079f4:	d106      	bne.n	8007a04 <_printf_common+0x48>
 80079f6:	f104 0a19 	add.w	sl, r4, #25
 80079fa:	68e3      	ldr	r3, [r4, #12]
 80079fc:	6832      	ldr	r2, [r6, #0]
 80079fe:	1a9b      	subs	r3, r3, r2
 8007a00:	42ab      	cmp	r3, r5
 8007a02:	dc26      	bgt.n	8007a52 <_printf_common+0x96>
 8007a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a08:	1e13      	subs	r3, r2, #0
 8007a0a:	6822      	ldr	r2, [r4, #0]
 8007a0c:	bf18      	it	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	0692      	lsls	r2, r2, #26
 8007a12:	d42b      	bmi.n	8007a6c <_printf_common+0xb0>
 8007a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a18:	4649      	mov	r1, r9
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	47c0      	blx	r8
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d01e      	beq.n	8007a60 <_printf_common+0xa4>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	68e5      	ldr	r5, [r4, #12]
 8007a26:	6832      	ldr	r2, [r6, #0]
 8007a28:	f003 0306 	and.w	r3, r3, #6
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	bf08      	it	eq
 8007a30:	1aad      	subeq	r5, r5, r2
 8007a32:	68a3      	ldr	r3, [r4, #8]
 8007a34:	6922      	ldr	r2, [r4, #16]
 8007a36:	bf0c      	ite	eq
 8007a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a3c:	2500      	movne	r5, #0
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	bfc4      	itt	gt
 8007a42:	1a9b      	subgt	r3, r3, r2
 8007a44:	18ed      	addgt	r5, r5, r3
 8007a46:	2600      	movs	r6, #0
 8007a48:	341a      	adds	r4, #26
 8007a4a:	42b5      	cmp	r5, r6
 8007a4c:	d11a      	bne.n	8007a84 <_printf_common+0xc8>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e008      	b.n	8007a64 <_printf_common+0xa8>
 8007a52:	2301      	movs	r3, #1
 8007a54:	4652      	mov	r2, sl
 8007a56:	4649      	mov	r1, r9
 8007a58:	4638      	mov	r0, r7
 8007a5a:	47c0      	blx	r8
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d103      	bne.n	8007a68 <_printf_common+0xac>
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a68:	3501      	adds	r5, #1
 8007a6a:	e7c6      	b.n	80079fa <_printf_common+0x3e>
 8007a6c:	18e1      	adds	r1, r4, r3
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	2030      	movs	r0, #48	; 0x30
 8007a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a76:	4422      	add	r2, r4
 8007a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a80:	3302      	adds	r3, #2
 8007a82:	e7c7      	b.n	8007a14 <_printf_common+0x58>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4622      	mov	r2, r4
 8007a88:	4649      	mov	r1, r9
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	47c0      	blx	r8
 8007a8e:	3001      	adds	r0, #1
 8007a90:	d0e6      	beq.n	8007a60 <_printf_common+0xa4>
 8007a92:	3601      	adds	r6, #1
 8007a94:	e7d9      	b.n	8007a4a <_printf_common+0x8e>
	...

08007a98 <_printf_i>:
 8007a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	7e0f      	ldrb	r7, [r1, #24]
 8007a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aa0:	2f78      	cmp	r7, #120	; 0x78
 8007aa2:	4691      	mov	r9, r2
 8007aa4:	4680      	mov	r8, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	469a      	mov	sl, r3
 8007aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aae:	d807      	bhi.n	8007ac0 <_printf_i+0x28>
 8007ab0:	2f62      	cmp	r7, #98	; 0x62
 8007ab2:	d80a      	bhi.n	8007aca <_printf_i+0x32>
 8007ab4:	2f00      	cmp	r7, #0
 8007ab6:	f000 80d8 	beq.w	8007c6a <_printf_i+0x1d2>
 8007aba:	2f58      	cmp	r7, #88	; 0x58
 8007abc:	f000 80a3 	beq.w	8007c06 <_printf_i+0x16e>
 8007ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ac8:	e03a      	b.n	8007b40 <_printf_i+0xa8>
 8007aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ace:	2b15      	cmp	r3, #21
 8007ad0:	d8f6      	bhi.n	8007ac0 <_printf_i+0x28>
 8007ad2:	a101      	add	r1, pc, #4	; (adr r1, 8007ad8 <_printf_i+0x40>)
 8007ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ad8:	08007b31 	.word	0x08007b31
 8007adc:	08007b45 	.word	0x08007b45
 8007ae0:	08007ac1 	.word	0x08007ac1
 8007ae4:	08007ac1 	.word	0x08007ac1
 8007ae8:	08007ac1 	.word	0x08007ac1
 8007aec:	08007ac1 	.word	0x08007ac1
 8007af0:	08007b45 	.word	0x08007b45
 8007af4:	08007ac1 	.word	0x08007ac1
 8007af8:	08007ac1 	.word	0x08007ac1
 8007afc:	08007ac1 	.word	0x08007ac1
 8007b00:	08007ac1 	.word	0x08007ac1
 8007b04:	08007c51 	.word	0x08007c51
 8007b08:	08007b75 	.word	0x08007b75
 8007b0c:	08007c33 	.word	0x08007c33
 8007b10:	08007ac1 	.word	0x08007ac1
 8007b14:	08007ac1 	.word	0x08007ac1
 8007b18:	08007c73 	.word	0x08007c73
 8007b1c:	08007ac1 	.word	0x08007ac1
 8007b20:	08007b75 	.word	0x08007b75
 8007b24:	08007ac1 	.word	0x08007ac1
 8007b28:	08007ac1 	.word	0x08007ac1
 8007b2c:	08007c3b 	.word	0x08007c3b
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	1d1a      	adds	r2, r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	602a      	str	r2, [r5, #0]
 8007b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b40:	2301      	movs	r3, #1
 8007b42:	e0a3      	b.n	8007c8c <_printf_i+0x1f4>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	6829      	ldr	r1, [r5, #0]
 8007b48:	0606      	lsls	r6, r0, #24
 8007b4a:	f101 0304 	add.w	r3, r1, #4
 8007b4e:	d50a      	bpl.n	8007b66 <_printf_i+0xce>
 8007b50:	680e      	ldr	r6, [r1, #0]
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	2e00      	cmp	r6, #0
 8007b56:	da03      	bge.n	8007b60 <_printf_i+0xc8>
 8007b58:	232d      	movs	r3, #45	; 0x2d
 8007b5a:	4276      	negs	r6, r6
 8007b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b60:	485e      	ldr	r0, [pc, #376]	; (8007cdc <_printf_i+0x244>)
 8007b62:	230a      	movs	r3, #10
 8007b64:	e019      	b.n	8007b9a <_printf_i+0x102>
 8007b66:	680e      	ldr	r6, [r1, #0]
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b6e:	bf18      	it	ne
 8007b70:	b236      	sxthne	r6, r6
 8007b72:	e7ef      	b.n	8007b54 <_printf_i+0xbc>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	6820      	ldr	r0, [r4, #0]
 8007b78:	1d19      	adds	r1, r3, #4
 8007b7a:	6029      	str	r1, [r5, #0]
 8007b7c:	0601      	lsls	r1, r0, #24
 8007b7e:	d501      	bpl.n	8007b84 <_printf_i+0xec>
 8007b80:	681e      	ldr	r6, [r3, #0]
 8007b82:	e002      	b.n	8007b8a <_printf_i+0xf2>
 8007b84:	0646      	lsls	r6, r0, #25
 8007b86:	d5fb      	bpl.n	8007b80 <_printf_i+0xe8>
 8007b88:	881e      	ldrh	r6, [r3, #0]
 8007b8a:	4854      	ldr	r0, [pc, #336]	; (8007cdc <_printf_i+0x244>)
 8007b8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b8e:	bf0c      	ite	eq
 8007b90:	2308      	moveq	r3, #8
 8007b92:	230a      	movne	r3, #10
 8007b94:	2100      	movs	r1, #0
 8007b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b9a:	6865      	ldr	r5, [r4, #4]
 8007b9c:	60a5      	str	r5, [r4, #8]
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	bfa2      	ittt	ge
 8007ba2:	6821      	ldrge	r1, [r4, #0]
 8007ba4:	f021 0104 	bicge.w	r1, r1, #4
 8007ba8:	6021      	strge	r1, [r4, #0]
 8007baa:	b90e      	cbnz	r6, 8007bb0 <_printf_i+0x118>
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	d04d      	beq.n	8007c4c <_printf_i+0x1b4>
 8007bb0:	4615      	mov	r5, r2
 8007bb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bb6:	fb03 6711 	mls	r7, r3, r1, r6
 8007bba:	5dc7      	ldrb	r7, [r0, r7]
 8007bbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bc0:	4637      	mov	r7, r6
 8007bc2:	42bb      	cmp	r3, r7
 8007bc4:	460e      	mov	r6, r1
 8007bc6:	d9f4      	bls.n	8007bb2 <_printf_i+0x11a>
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d10b      	bne.n	8007be4 <_printf_i+0x14c>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	07de      	lsls	r6, r3, #31
 8007bd0:	d508      	bpl.n	8007be4 <_printf_i+0x14c>
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	6861      	ldr	r1, [r4, #4]
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	bfde      	ittt	le
 8007bda:	2330      	movle	r3, #48	; 0x30
 8007bdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007be0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007be4:	1b52      	subs	r2, r2, r5
 8007be6:	6122      	str	r2, [r4, #16]
 8007be8:	f8cd a000 	str.w	sl, [sp]
 8007bec:	464b      	mov	r3, r9
 8007bee:	aa03      	add	r2, sp, #12
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	f7ff fee2 	bl	80079bc <_printf_common>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d14c      	bne.n	8007c96 <_printf_i+0x1fe>
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	b004      	add	sp, #16
 8007c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c06:	4835      	ldr	r0, [pc, #212]	; (8007cdc <_printf_i+0x244>)
 8007c08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c0c:	6829      	ldr	r1, [r5, #0]
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c14:	6029      	str	r1, [r5, #0]
 8007c16:	061d      	lsls	r5, r3, #24
 8007c18:	d514      	bpl.n	8007c44 <_printf_i+0x1ac>
 8007c1a:	07df      	lsls	r7, r3, #31
 8007c1c:	bf44      	itt	mi
 8007c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c22:	6023      	strmi	r3, [r4, #0]
 8007c24:	b91e      	cbnz	r6, 8007c2e <_printf_i+0x196>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	f023 0320 	bic.w	r3, r3, #32
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	2310      	movs	r3, #16
 8007c30:	e7b0      	b.n	8007b94 <_printf_i+0xfc>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f043 0320 	orr.w	r3, r3, #32
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	2378      	movs	r3, #120	; 0x78
 8007c3c:	4828      	ldr	r0, [pc, #160]	; (8007ce0 <_printf_i+0x248>)
 8007c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c42:	e7e3      	b.n	8007c0c <_printf_i+0x174>
 8007c44:	0659      	lsls	r1, r3, #25
 8007c46:	bf48      	it	mi
 8007c48:	b2b6      	uxthmi	r6, r6
 8007c4a:	e7e6      	b.n	8007c1a <_printf_i+0x182>
 8007c4c:	4615      	mov	r5, r2
 8007c4e:	e7bb      	b.n	8007bc8 <_printf_i+0x130>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	6826      	ldr	r6, [r4, #0]
 8007c54:	6961      	ldr	r1, [r4, #20]
 8007c56:	1d18      	adds	r0, r3, #4
 8007c58:	6028      	str	r0, [r5, #0]
 8007c5a:	0635      	lsls	r5, r6, #24
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	d501      	bpl.n	8007c64 <_printf_i+0x1cc>
 8007c60:	6019      	str	r1, [r3, #0]
 8007c62:	e002      	b.n	8007c6a <_printf_i+0x1d2>
 8007c64:	0670      	lsls	r0, r6, #25
 8007c66:	d5fb      	bpl.n	8007c60 <_printf_i+0x1c8>
 8007c68:	8019      	strh	r1, [r3, #0]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	4615      	mov	r5, r2
 8007c70:	e7ba      	b.n	8007be8 <_printf_i+0x150>
 8007c72:	682b      	ldr	r3, [r5, #0]
 8007c74:	1d1a      	adds	r2, r3, #4
 8007c76:	602a      	str	r2, [r5, #0]
 8007c78:	681d      	ldr	r5, [r3, #0]
 8007c7a:	6862      	ldr	r2, [r4, #4]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f7f8 faa6 	bl	80001d0 <memchr>
 8007c84:	b108      	cbz	r0, 8007c8a <_printf_i+0x1f2>
 8007c86:	1b40      	subs	r0, r0, r5
 8007c88:	6060      	str	r0, [r4, #4]
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	6123      	str	r3, [r4, #16]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c94:	e7a8      	b.n	8007be8 <_printf_i+0x150>
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	462a      	mov	r2, r5
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	47d0      	blx	sl
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d0ab      	beq.n	8007bfc <_printf_i+0x164>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	079b      	lsls	r3, r3, #30
 8007ca8:	d413      	bmi.n	8007cd2 <_printf_i+0x23a>
 8007caa:	68e0      	ldr	r0, [r4, #12]
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	4298      	cmp	r0, r3
 8007cb0:	bfb8      	it	lt
 8007cb2:	4618      	movlt	r0, r3
 8007cb4:	e7a4      	b.n	8007c00 <_printf_i+0x168>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4632      	mov	r2, r6
 8007cba:	4649      	mov	r1, r9
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	47d0      	blx	sl
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d09b      	beq.n	8007bfc <_printf_i+0x164>
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	68e3      	ldr	r3, [r4, #12]
 8007cc8:	9903      	ldr	r1, [sp, #12]
 8007cca:	1a5b      	subs	r3, r3, r1
 8007ccc:	42ab      	cmp	r3, r5
 8007cce:	dcf2      	bgt.n	8007cb6 <_printf_i+0x21e>
 8007cd0:	e7eb      	b.n	8007caa <_printf_i+0x212>
 8007cd2:	2500      	movs	r5, #0
 8007cd4:	f104 0619 	add.w	r6, r4, #25
 8007cd8:	e7f5      	b.n	8007cc6 <_printf_i+0x22e>
 8007cda:	bf00      	nop
 8007cdc:	08007ffd 	.word	0x08007ffd
 8007ce0:	0800800e 	.word	0x0800800e

08007ce4 <_putc_r>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	4606      	mov	r6, r0
 8007cec:	b118      	cbz	r0, 8007cf6 <_putc_r+0x12>
 8007cee:	6983      	ldr	r3, [r0, #24]
 8007cf0:	b90b      	cbnz	r3, 8007cf6 <_putc_r+0x12>
 8007cf2:	f7ff fb23 	bl	800733c <__sinit>
 8007cf6:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <_putc_r+0x84>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d124      	bne.n	8007d46 <_putc_r+0x62>
 8007cfc:	6874      	ldr	r4, [r6, #4]
 8007cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d00:	07d8      	lsls	r0, r3, #31
 8007d02:	d405      	bmi.n	8007d10 <_putc_r+0x2c>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	0599      	lsls	r1, r3, #22
 8007d08:	d402      	bmi.n	8007d10 <_putc_r+0x2c>
 8007d0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0c:	f7ff fbb4 	bl	8007478 <__retarget_lock_acquire_recursive>
 8007d10:	68a3      	ldr	r3, [r4, #8]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	60a3      	str	r3, [r4, #8]
 8007d18:	da05      	bge.n	8007d26 <_putc_r+0x42>
 8007d1a:	69a2      	ldr	r2, [r4, #24]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	db1c      	blt.n	8007d5a <_putc_r+0x76>
 8007d20:	b2eb      	uxtb	r3, r5
 8007d22:	2b0a      	cmp	r3, #10
 8007d24:	d019      	beq.n	8007d5a <_putc_r+0x76>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	701d      	strb	r5, [r3, #0]
 8007d2e:	b2ed      	uxtb	r5, r5
 8007d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d32:	07da      	lsls	r2, r3, #31
 8007d34:	d405      	bmi.n	8007d42 <_putc_r+0x5e>
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	059b      	lsls	r3, r3, #22
 8007d3a:	d402      	bmi.n	8007d42 <_putc_r+0x5e>
 8007d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3e:	f7ff fb9c 	bl	800747a <__retarget_lock_release_recursive>
 8007d42:	4628      	mov	r0, r5
 8007d44:	bd70      	pop	{r4, r5, r6, pc}
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <_putc_r+0x88>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d101      	bne.n	8007d50 <_putc_r+0x6c>
 8007d4c:	68b4      	ldr	r4, [r6, #8]
 8007d4e:	e7d6      	b.n	8007cfe <_putc_r+0x1a>
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <_putc_r+0x8c>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	bf08      	it	eq
 8007d56:	68f4      	ldreq	r4, [r6, #12]
 8007d58:	e7d1      	b.n	8007cfe <_putc_r+0x1a>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f7ff f912 	bl	8006f88 <__swbuf_r>
 8007d64:	4605      	mov	r5, r0
 8007d66:	e7e3      	b.n	8007d30 <_putc_r+0x4c>
 8007d68:	08007fac 	.word	0x08007fac
 8007d6c:	08007fcc 	.word	0x08007fcc
 8007d70:	08007f8c 	.word	0x08007f8c

08007d74 <_sbrk_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d06      	ldr	r5, [pc, #24]	; (8007d90 <_sbrk_r+0x1c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7f9 fae2 	bl	8001348 <_sbrk>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_sbrk_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_sbrk_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	20000274 	.word	0x20000274

08007d94 <__sread>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	460c      	mov	r4, r1
 8007d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9c:	f000 f8a0 	bl	8007ee0 <_read_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	bfab      	itete	ge
 8007da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007da6:	89a3      	ldrhlt	r3, [r4, #12]
 8007da8:	181b      	addge	r3, r3, r0
 8007daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dae:	bfac      	ite	ge
 8007db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007db2:	81a3      	strhlt	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__swrite>:
 8007db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	461f      	mov	r7, r3
 8007dbc:	898b      	ldrh	r3, [r1, #12]
 8007dbe:	05db      	lsls	r3, r3, #23
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	d505      	bpl.n	8007dd4 <__swrite+0x1e>
 8007dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dcc:	2302      	movs	r3, #2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f000 f868 	bl	8007ea4 <_lseek_r>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	4632      	mov	r2, r6
 8007de2:	463b      	mov	r3, r7
 8007de4:	4628      	mov	r0, r5
 8007de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	f000 b817 	b.w	8007e1c <_write_r>

08007dee <__sseek>:
 8007dee:	b510      	push	{r4, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df6:	f000 f855 	bl	8007ea4 <_lseek_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	bf15      	itete	ne
 8007e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e0a:	81a3      	strheq	r3, [r4, #12]
 8007e0c:	bf18      	it	ne
 8007e0e:	81a3      	strhne	r3, [r4, #12]
 8007e10:	bd10      	pop	{r4, pc}

08007e12 <__sclose>:
 8007e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e16:	f000 b813 	b.w	8007e40 <_close_r>
	...

08007e1c <_write_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d07      	ldr	r5, [pc, #28]	; (8007e3c <_write_r+0x20>)
 8007e20:	4604      	mov	r4, r0
 8007e22:	4608      	mov	r0, r1
 8007e24:	4611      	mov	r1, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	602a      	str	r2, [r5, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f7f9 fa3b 	bl	80012a6 <_write>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_write_r+0x1e>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_write_r+0x1e>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	20000274 	.word	0x20000274

08007e40 <_close_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d06      	ldr	r5, [pc, #24]	; (8007e5c <_close_r+0x1c>)
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	f7f9 fa47 	bl	80012de <_close>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_close_r+0x1a>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_close_r+0x1a>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	20000274 	.word	0x20000274

08007e60 <_fstat_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d07      	ldr	r5, [pc, #28]	; (8007e80 <_fstat_r+0x20>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	602b      	str	r3, [r5, #0]
 8007e6e:	f7f9 fa42 	bl	80012f6 <_fstat>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	d102      	bne.n	8007e7c <_fstat_r+0x1c>
 8007e76:	682b      	ldr	r3, [r5, #0]
 8007e78:	b103      	cbz	r3, 8007e7c <_fstat_r+0x1c>
 8007e7a:	6023      	str	r3, [r4, #0]
 8007e7c:	bd38      	pop	{r3, r4, r5, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000274 	.word	0x20000274

08007e84 <_isatty_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4d06      	ldr	r5, [pc, #24]	; (8007ea0 <_isatty_r+0x1c>)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	602b      	str	r3, [r5, #0]
 8007e90:	f7f9 fa41 	bl	8001316 <_isatty>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d102      	bne.n	8007e9e <_isatty_r+0x1a>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	b103      	cbz	r3, 8007e9e <_isatty_r+0x1a>
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	20000274 	.word	0x20000274

08007ea4 <_lseek_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d07      	ldr	r5, [pc, #28]	; (8007ec4 <_lseek_r+0x20>)
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	4608      	mov	r0, r1
 8007eac:	4611      	mov	r1, r2
 8007eae:	2200      	movs	r2, #0
 8007eb0:	602a      	str	r2, [r5, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f7f9 fa3a 	bl	800132c <_lseek>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_lseek_r+0x1e>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_lseek_r+0x1e>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	20000274 	.word	0x20000274

08007ec8 <__malloc_lock>:
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <__malloc_lock+0x8>)
 8007eca:	f7ff bad5 	b.w	8007478 <__retarget_lock_acquire_recursive>
 8007ece:	bf00      	nop
 8007ed0:	20000268 	.word	0x20000268

08007ed4 <__malloc_unlock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__malloc_unlock+0x8>)
 8007ed6:	f7ff bad0 	b.w	800747a <__retarget_lock_release_recursive>
 8007eda:	bf00      	nop
 8007edc:	20000268 	.word	0x20000268

08007ee0 <_read_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	; (8007f00 <_read_r+0x20>)
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4608      	mov	r0, r1
 8007ee8:	4611      	mov	r1, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	602a      	str	r2, [r5, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f7f9 f9bc 	bl	800126c <_read>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_read_r+0x1e>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_read_r+0x1e>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20000274 	.word	0x20000274

08007f04 <_init>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	bf00      	nop
 8007f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0a:	bc08      	pop	{r3}
 8007f0c:	469e      	mov	lr, r3
 8007f0e:	4770      	bx	lr

08007f10 <_fini>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	bf00      	nop
 8007f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f16:	bc08      	pop	{r3}
 8007f18:	469e      	mov	lr, r3
 8007f1a:	4770      	bx	lr
