
Fan_Control_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008550  08008550  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008550  08008550  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008550  08008550  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000002b4  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b6b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e71  00000000  00000000  00034c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020081  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017139  00000000  00000000  00059c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0cf5  00000000  00000000  00070dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131aaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005464  00000000  00000000  00131b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008418 	.word	0x08008418

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008418 	.word	0x08008418

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <flash_erase>:
FLASH_EraseInitTypeDef flash_erase_control_mode_init;
FLASH_EraseInitTypeDef flash_erase_wind_mode_init;


void flash_erase()
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    /*
	 * @brief init flash erase variables
	 */
	flash_erase_power_init.TypeErase =  FLASH_TYPEERASE_PAGES;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <flash_erase+0x44>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
	flash_erase_power_init.NbPages = 1;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <flash_erase+0x44>)
 800028c:	2201      	movs	r2, #1
 800028e:	609a      	str	r2, [r3, #8]
	flash_erase_power_init.PageAddress = ADDR_FLASH_PAGE_102;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <flash_erase+0x44>)
 8000292:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <flash_erase+0x48>)
 8000294:	605a      	str	r2, [r3, #4]

	flash_erase_control_mode_init.TypeErase = FLASH_TYPEERASE_PAGES ;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <flash_erase+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
	flash_erase_control_mode_init.NbPages = 1;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <flash_erase+0x4c>)
 800029e:	2201      	movs	r2, #1
 80002a0:	609a      	str	r2, [r3, #8]
	flash_erase_control_mode_init.PageAddress = ADDR_FLASH_PAGE_101;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <flash_erase+0x4c>)
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <flash_erase+0x50>)
 80002a6:	605a      	str	r2, [r3, #4]

	flash_erase_wind_mode_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <flash_erase+0x54>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
	flash_erase_wind_mode_init.NbPages = 1;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <flash_erase+0x54>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	609a      	str	r2, [r3, #8]
	flash_erase_wind_mode_init.PageAddress = ADDR_FLASH_PAGE_100;
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <flash_erase+0x54>)
 80002b6:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <flash_erase+0x58>)
 80002b8:	605a      	str	r2, [r3, #4]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	20000098 	.word	0x20000098
 80002c8:	08033000 	.word	0x08033000
 80002cc:	200000a4 	.word	0x200000a4
 80002d0:	08032800 	.word	0x08032800
 80002d4:	200000b0 	.word	0x200000b0
 80002d8:	08032000 	.word	0x08032000

080002dc <modify_power>:

void modify_power(POWER power){
 80002dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002e0:	b097      	sub	sp, #92	; 0x5c
 80002e2:	af10      	add	r7, sp, #64	; 0x40
 80002e4:	4603      	mov	r3, r0
 80002e6:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Mutate power variable
	 * @param power set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80002e8:	4b29      	ldr	r3, [pc, #164]	; (8000390 <modify_power+0xb4>)
 80002ea:	617b      	str	r3, [r7, #20]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80002ec:	4b29      	ldr	r3, [pc, #164]	; (8000394 <modify_power+0xb8>)
 80002ee:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 80002f0:	4b29      	ldr	r3, [pc, #164]	; (8000398 <modify_power+0xbc>)
 80002f2:	60fb      	str	r3, [r7, #12]
	if(*p_power != power){
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d043      	beq.n	8000386 <modify_power+0xaa>
		if(power == OFF){
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d114      	bne.n	800032e <modify_power+0x52>
			wind_control(htim1, LEVEL_0);
 8000304:	4e25      	ldr	r6, [pc, #148]	; (800039c <modify_power+0xc0>)
 8000306:	2300      	movs	r3, #0
 8000308:	930f      	str	r3, [sp, #60]	; 0x3c
 800030a:	466d      	mov	r5, sp
 800030c:	f106 0410 	add.w	r4, r6, #16
 8000310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800031a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800031c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000320:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000324:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000328:	f000 f8f4 	bl	8000514 <wind_control>
 800032c:	e019      	b.n	8000362 <modify_power+0x86>
		}
		else{
			if(*p_control_mode == MANUAL){
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d115      	bne.n	8000362 <modify_power+0x86>
				wind_control(htim1, *p_wind_mode);
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4e17      	ldr	r6, [pc, #92]	; (800039c <modify_power+0xc0>)
 800033e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000340:	466d      	mov	r5, sp
 8000342:	f106 0410 	add.w	r4, r6, #16
 8000346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800034a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800034c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800034e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000352:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000356:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800035a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800035e:	f000 f8d9 	bl	8000514 <wind_control>
			}
		}
		HAL_FLASH_Unlock();
 8000362:	f002 fc2f 	bl	8002bc4 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, &p_error_page);
 8000366:	490e      	ldr	r1, [pc, #56]	; (80003a0 <modify_power+0xc4>)
 8000368:	480e      	ldr	r0, [pc, #56]	; (80003a4 <modify_power+0xc8>)
 800036a:	f002 fcef 	bl	8002d4c <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_102, power);
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2200      	movs	r2, #0
 8000372:	4698      	mov	r8, r3
 8000374:	4691      	mov	r9, r2
 8000376:	4642      	mov	r2, r8
 8000378:	464b      	mov	r3, r9
 800037a:	4907      	ldr	r1, [pc, #28]	; (8000398 <modify_power+0xbc>)
 800037c:	2003      	movs	r0, #3
 800037e:	f002 fbb1 	bl	8002ae4 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000382:	f002 fc45 	bl	8002c10 <HAL_FLASH_Lock>
	}
}
 8000386:	bf00      	nop
 8000388:	371c      	adds	r7, #28
 800038a:	46bd      	mov	sp, r7
 800038c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000390:	08032800 	.word	0x08032800
 8000394:	08032000 	.word	0x08032000
 8000398:	08033000 	.word	0x08033000
 800039c:	2000010c 	.word	0x2000010c
 80003a0:	20000094 	.word	0x20000094
 80003a4:	20000098 	.word	0x20000098

080003a8 <modify_control_mode>:

void modify_control_mode(CONTROL_MODE control_mode){
 80003a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003aa:	b095      	sub	sp, #84	; 0x54
 80003ac:	af10      	add	r7, sp, #64	; 0x40
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate control mode variable
	 * @control_mode set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <modify_control_mode+0x7c>)
 80003b4:	60fb      	str	r3, [r7, #12]
	if(*p_control_mode != control_mode){
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d02c      	beq.n	800041a <modify_control_mode+0x72>
		HAL_FLASH_Unlock();
 80003c0:	f002 fc00 	bl	8002bc4 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, &p_error_page);
 80003c4:	4918      	ldr	r1, [pc, #96]	; (8000428 <modify_control_mode+0x80>)
 80003c6:	4819      	ldr	r0, [pc, #100]	; (800042c <modify_control_mode+0x84>)
 80003c8:	f002 fcc0 	bl	8002d4c <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_101, control_mode);
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2200      	movs	r2, #0
 80003d0:	461c      	mov	r4, r3
 80003d2:	4615      	mov	r5, r2
 80003d4:	4622      	mov	r2, r4
 80003d6:	462b      	mov	r3, r5
 80003d8:	4912      	ldr	r1, [pc, #72]	; (8000424 <modify_control_mode+0x7c>)
 80003da:	2003      	movs	r0, #3
 80003dc:	f002 fb82 	bl	8002ae4 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80003e0:	f002 fc16 	bl	8002c10 <HAL_FLASH_Lock>
		if(control_mode == MANUAL){
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d117      	bne.n	800041a <modify_control_mode+0x72>
			uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <modify_control_mode+0x88>)
 80003ec:	60bb      	str	r3, [r7, #8]
			wind_control(htim1, *p_wind_mode);
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	4e0f      	ldr	r6, [pc, #60]	; (8000434 <modify_control_mode+0x8c>)
 80003f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80003f8:	466d      	mov	r5, sp
 80003fa:	f106 0410 	add.w	r4, r6, #16
 80003fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800040a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800040e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000412:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000416:	f000 f87d 	bl	8000514 <wind_control>
		}
	}
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000422:	bf00      	nop
 8000424:	08032800 	.word	0x08032800
 8000428:	20000094 	.word	0x20000094
 800042c:	200000a4 	.word	0x200000a4
 8000430:	08032000 	.word	0x08032000
 8000434:	2000010c 	.word	0x2000010c

08000438 <modify_wind_mode>:

void modify_wind_mode(WIND_MODE wind_mode){
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b095      	sub	sp, #84	; 0x54
 800043c:	af10      	add	r7, sp, #64	; 0x40
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate wind mode variable
	 * @wind_mode set value
	 */

	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <modify_wind_mode+0x6c>)
 8000444:	60fb      	str	r3, [r7, #12]
	if(*p_wind_mode != wind_mode){
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	429a      	cmp	r2, r3
 800044e:	d025      	beq.n	800049c <modify_wind_mode+0x64>
		HAL_FLASH_Unlock();
 8000450:	f002 fbb8 	bl	8002bc4 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, &p_error_page);
 8000454:	4914      	ldr	r1, [pc, #80]	; (80004a8 <modify_wind_mode+0x70>)
 8000456:	4815      	ldr	r0, [pc, #84]	; (80004ac <modify_wind_mode+0x74>)
 8000458:	f002 fc78 	bl	8002d4c <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_100, wind_mode);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2200      	movs	r2, #0
 8000460:	461c      	mov	r4, r3
 8000462:	4615      	mov	r5, r2
 8000464:	4622      	mov	r2, r4
 8000466:	462b      	mov	r3, r5
 8000468:	490e      	ldr	r1, [pc, #56]	; (80004a4 <modify_wind_mode+0x6c>)
 800046a:	2003      	movs	r0, #3
 800046c:	f002 fb3a 	bl	8002ae4 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000470:	f002 fbce 	bl	8002c10 <HAL_FLASH_Lock>
		wind_control(htim1, wind_mode);
 8000474:	4e0e      	ldr	r6, [pc, #56]	; (80004b0 <modify_wind_mode+0x78>)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	930f      	str	r3, [sp, #60]	; 0x3c
 800047a:	466d      	mov	r5, sp
 800047c:	f106 0410 	add.w	r4, r6, #16
 8000480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800048a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800048c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000490:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000494:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000498:	f000 f83c 	bl	8000514 <wind_control>
	}
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a4:	08032000 	.word	0x08032000
 80004a8:	20000094 	.word	0x20000094
 80004ac:	200000b0 	.word	0x200000b0
 80004b0:	2000010c 	.word	0x2000010c

080004b4 <get_power>:

uint8_t get_power(){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
	/*
	 * @return power
	 */
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <get_power+0x1c>)
 80004bc:	607b      	str	r3, [r7, #4]
	return *p_power;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	b2db      	uxtb	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	08033000 	.word	0x08033000

080004d4 <get_control_mode>:

uint8_t get_control_mode(){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
	/*
	 * @return control mode
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <get_control_mode+0x1c>)
 80004dc:	607b      	str	r3, [r7, #4]
	return * p_control_mode;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	08032800 	.word	0x08032800

080004f4 <get_wind_mode>:

uint8_t get_wind_mode(){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
	/*
	 * @return wind mode
	 */
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <get_wind_mode+0x1c>)
 80004fc:	607b      	str	r3, [r7, #4]
	return *p_wind_mode;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	08032000 	.word	0x08032000

08000514 <wind_control>:

void wind_control(TIM_HandleTypeDef tim_handle, WIND_MODE wind_mode){
 8000514:	b084      	sub	sp, #16
 8000516:	b490      	push	{r4, r7}
 8000518:	af00      	add	r7, sp, #0
 800051a:	f107 0408 	add.w	r4, r7, #8
 800051e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * @brief Control PWM
	 * @param tim_handler timer handler
	 * @param wind_mode wind level to be controlled
	 */
	switch(wind_mode){
 8000522:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000526:	2b02      	cmp	r3, #2
 8000528:	d00f      	beq.n	800054a <wind_control+0x36>
 800052a:	2b02      	cmp	r3, #2
 800052c:	dc12      	bgt.n	8000554 <wind_control+0x40>
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <wind_control+0x24>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d004      	beq.n	8000540 <wind_control+0x2c>
		break;
	case LEVEL_2:
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
		break;
	}
}
 8000536:	e00d      	b.n	8000554 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 0);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2200      	movs	r2, #0
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800053e:	e009      	b.n	8000554 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 599);
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	f240 2257 	movw	r2, #599	; 0x257
 8000546:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000548:	e004      	b.n	8000554 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	f240 321f 	movw	r2, #799	; 0x31f
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000552:	bf00      	nop
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc90      	pop	{r4, r7}
 800055a:	b004      	add	sp, #16
 800055c:	4770      	bx	lr
	...

08000560 <default_state>:

void default_state(){
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
	/*
	 *@brief check correctness of the flash memory storing state variables and fix
	 */ 	
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <default_state+0x64>)
 8000568:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <default_state+0x68>)
 800056c:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <default_state+0x6c>)
 8000570:	607b      	str	r3, [r7, #4]
	if(*p_power != ON && *p_power != OFF){
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d006      	beq.n	8000588 <default_state+0x28>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <default_state+0x28>
		modify_power(OFF);
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff feaa 	bl	80002dc <modify_power>
	}
	if(*p_control_mode != AUTOMATIC && *p_control_mode != MANUAL){
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <default_state+0x3e>
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d002      	beq.n	800059e <default_state+0x3e>
		modify_control_mode(AUTOMATIC);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ff05 	bl	80003a8 <modify_control_mode>
	}
	if(*p_wind_mode != LEVEL_0 && *p_wind_mode != LEVEL_1 && *p_wind_mode != LEVEL_2){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d00a      	beq.n	80005bc <default_state+0x5c>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d006      	beq.n	80005bc <default_state+0x5c>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d002      	beq.n	80005bc <default_state+0x5c>
		modify_wind_mode(LEVEL_0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ff3e 	bl	8000438 <modify_wind_mode>
	}
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08033000 	.word	0x08033000
 80005c8:	08032800 	.word	0x08032800
 80005cc:	08032000 	.word	0x08032000

080005d0 <restart_before_state>:

void restart_before_state(){
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	b095      	sub	sp, #84	; 0x54
 80005d4:	af10      	add	r7, sp, #64	; 0x40
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_102;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <restart_before_state+0x58>)
 80005d8:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_101;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <restart_before_state+0x5c>)
 80005dc:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_100;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <restart_before_state+0x60>)
 80005e0:	607b      	str	r3, [r7, #4]
	if(*p_power == ON && *p_control_mode == MANUAL){
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d119      	bne.n	800061e <restart_before_state+0x4e>
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d115      	bne.n	800061e <restart_before_state+0x4e>
		wind_control(htim1, *p_wind_mode);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4e0e      	ldr	r6, [pc, #56]	; (8000634 <restart_before_state+0x64>)
 80005fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80005fc:	466d      	mov	r5, sp
 80005fe:	f106 0410 	add.w	r4, r6, #16
 8000602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800060c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000612:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000616:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800061a:	f7ff ff7b 	bl	8000514 <wind_control>
	}
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000626:	bf00      	nop
 8000628:	08033000 	.word	0x08033000
 800062c:	08032800 	.word	0x08032800
 8000630:	08032000 	.word	0x08032000
 8000634:	2000010c 	.word	0x2000010c

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 ff13 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f851 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 faa3 	bl	8000b90 <MX_GPIO_Init>
  MX_TIM1_Init();
 800064a:	f000 f919 	bl	8000880 <MX_TIM1_Init>
  MX_ADC1_Init();
 800064e:	f000 f8a7 	bl	80007a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000652:	f000 fa6d 	bl	8000b30 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000656:	f000 f9bf 	bl	80009d8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  flash_erase();
 800065a:	f7ff fe11 	bl	8000280 <flash_erase>
  test_mutate();
 800065e:	f000 fe65 	bl	800132c <test_mutate>
  default_state();
 8000662:	f7ff ff7d 	bl	8000560 <default_state>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000666:	2100      	movs	r1, #0
 8000668:	4819      	ldr	r0, [pc, #100]	; (80006d0 <main+0x98>)
 800066a:	f004 fad5 	bl	8004c18 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <main+0x9c>)
 8000670:	f004 fa06 	bl	8004a80 <HAL_TIM_Base_Start_IT>
  restart_before_state();
 8000674:	f7ff ffac 	bl	80005d0 <restart_before_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_UART_Receive(&huart1, receiveBuffer, 2, HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	2202      	movs	r2, #2
 800067e:	4916      	ldr	r1, [pc, #88]	; (80006d8 <main+0xa0>)
 8000680:	4816      	ldr	r0, [pc, #88]	; (80006dc <main+0xa4>)
 8000682:	f005 fba3 	bl	8005dcc <HAL_UART_Receive>
	  if(*(receiveBuffer+1) == 0x04){
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <main+0xa0>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	2b04      	cmp	r3, #4
 800068c:	d107      	bne.n	800069e <main+0x66>
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 2, HAL_MAX_DELAY);
 800068e:	4914      	ldr	r1, [pc, #80]	; (80006e0 <main+0xa8>)
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	2202      	movs	r2, #2
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <main+0xa4>)
 8000698:	f005 fb98 	bl	8005dcc <HAL_UART_Receive>
 800069c:	e006      	b.n	80006ac <main+0x74>
	  }
	  else{
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 3, HAL_MAX_DELAY);
 800069e:	4910      	ldr	r1, [pc, #64]	; (80006e0 <main+0xa8>)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	2203      	movs	r2, #3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <main+0xa4>)
 80006a8:	f005 fb90 	bl	8005dcc <HAL_UART_Receive>
	  }
	  uint8_t status = handle_message(receiveBuffer, sendBuffer);
 80006ac:	490d      	ldr	r1, [pc, #52]	; (80006e4 <main+0xac>)
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <main+0xa0>)
 80006b0:	f000 fab0 	bl	8000c14 <handle_message>
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
	  if(status != 0){
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0dc      	beq.n	8000678 <main+0x40>
		  HAL_UART_Transmit(&huart1, sendBuffer, status, HAL_MAX_DELAY);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	4907      	ldr	r1, [pc, #28]	; (80006e4 <main+0xac>)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <main+0xa4>)
 80006ca:	f005 faf5 	bl	8005cb8 <HAL_UART_Transmit>
  {
 80006ce:	e7d3      	b.n	8000678 <main+0x40>
 80006d0:	2000010c 	.word	0x2000010c
 80006d4:	20000158 	.word	0x20000158
 80006d8:	20000230 	.word	0x20000230
 80006dc:	200001a4 	.word	0x200001a4
 80006e0:	20000232 	.word	0x20000232
 80006e4:	20000238 	.word	0x20000238

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09e      	sub	sp, #120	; 0x78
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006f2:	2228      	movs	r2, #40	; 0x28
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 fb82 	bl	8006e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	223c      	movs	r2, #60	; 0x3c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fb74 	bl	8006e00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800072c:	2300      	movs	r3, #0
 800072e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fd27 	bl	8003188 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000740:	f000 fa62 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fd50 	bl	8004204 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800076a:	f000 fa4d 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800076e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000772:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4618      	mov	r0, r3
 800078a:	f003 ff71 	bl	8004670 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000794:	f000 fa38 	bl	8000c08 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3778      	adds	r7, #120	; 0x78
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_ADC1_Init+0xdc>)
 80007c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_ADC1_Init+0xdc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_ADC1_Init+0xdc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_ADC1_Init+0xdc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_ADC1_Init+0xdc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_ADC1_Init+0xdc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_ADC1_Init+0xdc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_ADC1_Init+0xdc>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_ADC1_Init+0xdc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ADC1_Init+0xdc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_ADC1_Init+0xdc>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ADC1_Init+0xdc>)
 800080c:	2204      	movs	r2, #4
 800080e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ADC1_Init+0xdc>)
 8000812:	2200      	movs	r2, #0
 8000814:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ADC1_Init+0xdc>)
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081c:	4817      	ldr	r0, [pc, #92]	; (800087c <MX_ADC1_Init+0xdc>)
 800081e:	f000 fea7 	bl	8001570 <HAL_ADC_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 f9ee 	bl	8000c08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_ADC1_Init+0xdc>)
 8000838:	f001 fe74 	bl	8002524 <HAL_ADCEx_MultiModeConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000842:	f000 f9e1 	bl	8000c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000846:	2308      	movs	r3, #8
 8000848:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084a:	2301      	movs	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <MX_ADC1_Init+0xdc>)
 8000864:	f001 fb72 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800086e:	f000 f9cb 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000bc 	.word	0x200000bc

08000880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09a      	sub	sp, #104	; 0x68
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	222c      	movs	r2, #44	; 0x2c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f006 faa0 	bl	8006e00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c0:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008c2:	4a44      	ldr	r2, [pc, #272]	; (80009d4 <MX_TIM1_Init+0x154>)
 80008c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008c8:	224f      	movs	r2, #79	; 0x4f
 80008ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b40      	ldr	r3, [pc, #256]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ec:	4838      	ldr	r0, [pc, #224]	; (80009d0 <MX_TIM1_Init+0x150>)
 80008ee:	f004 f86f 	bl	80049d0 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 f986 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000906:	4619      	mov	r1, r3
 8000908:	4831      	ldr	r0, [pc, #196]	; (80009d0 <MX_TIM1_Init+0x150>)
 800090a:	f004 fb99 	bl	8005040 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000914:	f000 f978 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000918:	482d      	ldr	r0, [pc, #180]	; (80009d0 <MX_TIM1_Init+0x150>)
 800091a:	f004 f91b 	bl	8004b54 <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000924:	f000 f970 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000934:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_TIM1_Init+0x150>)
 800093c:	f005 f870 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000946:	f000 f95f 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	; 0x60
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000956:	2300      	movs	r3, #0
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <MX_TIM1_Init+0x150>)
 8000970:	f004 fa52 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800097a:	f000 f945 	bl	8000c08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <MX_TIM1_Init+0x150>)
 80009b4:	f005 f8b4 	bl	8005b20 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009be:	f000 f923 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <MX_TIM1_Init+0x150>)
 80009c4:	f000 fb72 	bl	80010ac <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3768      	adds	r7, #104	; 0x68
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000010c 	.word	0x2000010c
 80009d4:	40012c00 	.word	0x40012c00

080009d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09a      	sub	sp, #104	; 0x68
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]
 8000a0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	222c      	movs	r2, #44	; 0x2c
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f006 f9f4 	bl	8006e00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a18:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a1a:	4a44      	ldr	r2, [pc, #272]	; (8000b2c <MX_TIM8_Init+0x154>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000a1e:	4b42      	ldr	r3, [pc, #264]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a20:	224f      	movs	r2, #79	; 0x4f
 8000a22:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49999;
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a2c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a30:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b3d      	ldr	r3, [pc, #244]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	4b3a      	ldr	r3, [pc, #232]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a44:	4838      	ldr	r0, [pc, #224]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a46:	f003 ffc3 	bl	80049d0 <HAL_TIM_Base_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f000 f8da 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a58:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4831      	ldr	r0, [pc, #196]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a62:	f004 faed 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000a6c:	f000 f8cc 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a70:	482d      	ldr	r0, [pc, #180]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a72:	f004 f86f 	bl	8004b54 <HAL_TIM_PWM_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000a7c:	f000 f8c4 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a90:	4619      	mov	r1, r3
 8000a92:	4825      	ldr	r0, [pc, #148]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000a94:	f004 ffc4 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000a9e:	f000 f8b3 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa2:	2360      	movs	r3, #96	; 0x60
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000ac8:	f004 f9a6 	bl	8004e18 <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000ad2:	f000 f899 	bl	8000c08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000b0c:	f005 f808 	bl	8005b20 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000b16:	f000 f877 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM8_Init+0x150>)
 8000b1c:	f000 fac6 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3768      	adds	r7, #104	; 0x68
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000158 	.word	0x20000158
 8000b2c:	40013400 	.word	0x40013400

08000b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <MX_USART1_UART_Init+0x5c>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART1_UART_Init+0x58>)
 8000b74:	f005 f852 	bl	8005c1c <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f000 f843 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001a4 	.word	0x200001a4
 8000b8c:	40013800 	.word	0x40013800

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000b9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bb8:	6153      	str	r3, [r2, #20]
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	6153      	str	r3, [r2, #20]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be8:	6153      	str	r3, [r2, #20]
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_GPIO_Init+0x74>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <handle_message>:
// POWER power = OFF;
// WIND_MODE wind_mode = LEVEL_0;
// CONTROL_MODE control_mode = AUTOMATIC;


uint8_t handle_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]


    uint8_t send_length;
    uint8_t* stx = received_buffer;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	623b      	str	r3, [r7, #32]
    if(*stx != 0x02){
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d003      	beq.n	8000c32 <handle_message+0x1e>
        send_length = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error_msg;
 8000c30:	e072      	b.n	8000d18 <handle_message+0x104>
    }

    uint8_t* txRxID  = received_buffer + 1;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buffer + 1;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buffer + 2;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3302      	adds	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
    
	*sent_buffer = 0x02;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	2202      	movs	r2, #2
 8000c48:	701a      	strb	r2, [r3, #0]
    switch (*txRxID) {
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d837      	bhi.n	8000cc4 <handle_message+0xb0>
 8000c54:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <handle_message+0x48>)
 8000c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5a:	bf00      	nop
 8000c5c:	08000c6d 	.word	0x08000c6d
 8000c60:	08000c83 	.word	0x08000c83
 8000c64:	08000c99 	.word	0x08000c99
 8000c68:	08000caf 	.word	0x08000caf
        case FRAME_TURN_ON_OFF:
            process_power_message(received_buffer, sent_buffer);
 8000c6c:	6839      	ldr	r1, [r7, #0]
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f858 	bl	8000d24 <process_power_message>
            received_data_length = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000c80:	e024      	b.n	8000ccc <handle_message+0xb8>
        
        case FRAME_SELECT_MODE:
            process_control_mode_message(received_buffer, sent_buffer);
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f87e 	bl	8000d86 <process_control_mode_message>
            received_data_length = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000c96:	e019      	b.n	8000ccc <handle_message+0xb8>
        
        case FRAME_SELECT_FAN_SPEED:
            process_wind_mode_message(received_buffer, sent_buffer);
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f8a8 	bl	8000df0 <process_wind_mode_message>
            received_data_length = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000cac:	e00e      	b.n	8000ccc <handle_message+0xb8>
        
        case FRAME_READ_STATUS:
            received_data_length = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length =  process_states_request_message(received_buffer, sent_buffer);
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 f8d6 	bl	8000e68 <process_states_request_message>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 8000cc2:	e003      	b.n	8000ccc <handle_message+0xb8>
        
        default:
            send_length = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            goto error_msg;
 8000cca:	e025      	b.n	8000d18 <handle_message+0x104>
    }

    *sent_frame_type = *txRxID + 0x80;
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	3b80      	subs	r3, #128	; 0x80
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000cde:	701a      	strb	r2, [r3, #0]

    uint8_t* received_ETX = received_buffer + 3 + received_data_length;
 8000ce0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d003      	beq.n	8000cfc <handle_message+0xe8>
		send_length = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto error_msg;
 8000cfa:	e00d      	b.n	8000d18 <handle_message+0x104>
    }

    uint8_t* sent_ETX = sent_buffer + 3 + sent_data_length; 
 8000cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d00:	3303      	adds	r3, #3
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
	send_length = sent_data_length + 4;
 8000d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d12:	3304      	adds	r3, #4
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    error_msg : return send_length;
 8000d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <process_power_message>:

void process_power_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    if (check_message_data_length(received_buffer, 1))
 8000d2e:	2101      	movs	r1, #1
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f8ed 	bl	8000f10 <check_message_data_length>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d11f      	bne.n	8000d7c <process_power_message+0x58>
	{
		goto error_msg;
	}
    uint8_t* received_data = received_buffer + 3;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3303      	adds	r3, #3
 8000d40:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3303      	adds	r3, #3
 8000d46:	60bb      	str	r3, [r7, #8]
	if(*received_data == OFF){
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d106      	bne.n	8000d5e <process_power_message+0x3a>
		modify_power(OFF);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fac3 	bl	80002dc <modify_power>
		*sent_data = 0x00;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
		*sent_data = 0x00;
	}
	else{
		*sent_data = 0xFF;
	}
	error_msg : return;
 8000d5c:	e010      	b.n	8000d80 <process_power_message+0x5c>
	else if(*received_data == ON){
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d106      	bne.n	8000d74 <process_power_message+0x50>
		modify_power(ON);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff fab8 	bl	80002dc <modify_power>
		*sent_data = 0x00;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
	error_msg : return;
 8000d72:	e005      	b.n	8000d80 <process_power_message+0x5c>
		*sent_data = 0xFF;
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	701a      	strb	r2, [r3, #0]
	error_msg : return;
 8000d7a:	e000      	b.n	8000d7e <process_power_message+0x5a>
		goto error_msg;
 8000d7c:	bf00      	nop
	error_msg : return;
 8000d7e:	bf00      	nop
} 
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <process_control_mode_message>:


void process_control_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
    // Implement logic to process control mode message
    // Update control_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1))
 8000d90:	2101      	movs	r1, #1
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f8bc 	bl	8000f10 <check_message_data_length>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d123      	bne.n	8000de6 <process_control_mode_message+0x60>
	{
		goto error_msg;
	}
    uint8_t* received_data = received_buffer + 3;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3303      	adds	r3, #3
 8000da2:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	3303      	adds	r3, #3
 8000da8:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000daa:	f7ff fb83 	bl	80004b4 <get_power>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d103      	bne.n	8000dbc <process_control_mode_message+0x36>
		*sent_data = 0xFF;
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000dba:	e015      	b.n	8000de8 <process_control_mode_message+0x62>
	}
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <process_control_mode_message+0x46>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <process_control_mode_message+0x58>
		modify_control_mode(*received_data);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fae9 	bl	80003a8 <modify_control_mode>
		*sent_data = 0x00;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e004      	b.n	8000de8 <process_control_mode_message+0x62>
	}
	else{
		*sent_data = 0xFF;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	22ff      	movs	r2, #255	; 0xff
 8000de2:	701a      	strb	r2, [r3, #0]
	}
	error_msg : return;
 8000de4:	e000      	b.n	8000de8 <process_control_mode_message+0x62>
		goto error_msg;
 8000de6:	bf00      	nop
	error_msg : return;
 8000de8:	bf00      	nop
} 
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <process_wind_mode_message>:




void process_wind_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
    // Implement logic to process wind mode message
    // Update wind_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1))
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f887 	bl	8000f10 <check_message_data_length>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12a      	bne.n	8000e5e <process_wind_mode_message+0x6e>
	{
		goto error_msg;
	}
    uint8_t* received_data = received_buffer + 3;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3303      	adds	r3, #3
 8000e12:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000e14:	f7ff fb4e 	bl	80004b4 <get_power>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d103      	bne.n	8000e26 <process_wind_mode_message+0x36>
		*sent_data = 0xFF;
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	22ff      	movs	r2, #255	; 0xff
 8000e22:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000e24:	e01c      	b.n	8000e60 <process_wind_mode_message+0x70>
	}

	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <process_wind_mode_message+0x4e>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d003      	beq.n	8000e3e <process_wind_mode_message+0x4e>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d10b      	bne.n	8000e56 <process_wind_mode_message+0x66>
		modify_wind_mode(*received_data);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff faf8 	bl	8000438 <modify_wind_mode>
		*sent_data = 0x00;
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
		modify_control_mode(MANUAL);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff faaa 	bl	80003a8 <modify_control_mode>
 8000e54:	e004      	b.n	8000e60 <process_wind_mode_message+0x70>
	}
	else{
		*sent_data = 0xFF;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	22ff      	movs	r2, #255	; 0xff
 8000e5a:	701a      	strb	r2, [r3, #0]
	}
	error_msg: return;
 8000e5c:	e000      	b.n	8000e60 <process_wind_mode_message+0x70>
		goto error_msg;
 8000e5e:	bf00      	nop
	error_msg: return;
 8000e60:	bf00      	nop
}
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <process_states_request_message>:


uint8_t process_states_request_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    // Implement logic to process states request message
    // Update sent_buf accordingly
    uint8_t* sent_data = sent_buffer + 3;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3303      	adds	r3, #3
 8000e76:	61fb      	str	r3, [r7, #28]
	uint8_t* power_state = sent_data + 1;
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
	uint8_t* control_mode_state = sent_data + 2;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3302      	adds	r3, #2
 8000e82:	617b      	str	r3, [r7, #20]
	uint8_t* wind_mode_state = sent_data + 3;	
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	3303      	adds	r3, #3
 8000e88:	613b      	str	r3, [r7, #16]
	uint8_t* temperature_state = sent_data + 4;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	60fb      	str	r3, [r7, #12]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buffer, 0)){
 8000e90:	2100      	movs	r1, #0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f83c 	bl	8000f10 <check_message_data_length>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <process_states_request_message+0x44>
		sent_data_length = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		*sent_data = 0xFF;
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e028      	b.n	8000efe <process_states_request_message+0x96>
	}
	else{
		*sent_data = 0x00;
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
		*power_state = get_power();
 8000eb2:	f7ff faff 	bl	80004b4 <get_power>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	701a      	strb	r2, [r3, #0]
		*control_mode_state = get_control_mode();
 8000ebe:	f7ff fb09 	bl	80004d4 <get_control_mode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	701a      	strb	r2, [r3, #0]
		*wind_mode_state = get_wind_mode();
 8000eca:	f7ff fb13 	bl	80004f4 <get_wind_mode>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	701a      	strb	r2, [r3, #0]
		int temp = (int) temperature;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <process_states_request_message+0xa4>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	ee17 3a90 	vmov	r3, s15
 8000ee4:	623b      	str	r3, [r7, #32]
		if(temp < 0){
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	da01      	bge.n	8000ef0 <process_states_request_message+0x88>
			temp = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
		}
		*temperature_state = (uint8_t) temp;
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	701a      	strb	r2, [r3, #0]
		sent_data_length = 5;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return sent_data_length;
 8000efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000022c 	.word	0x2000022c

08000f10 <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buffer, uint8_t expected_value) {
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
    uint8_t* length = received_buffer + 2;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3302      	adds	r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
    if (*length == expected_value) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	78fa      	ldrb	r2, [r7, #3]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d101      	bne.n	8000f30 <check_message_data_length+0x20>
        return 1; // Data length is correct
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <check_message_data_length+0x22>
    } else {
        return 0; // Data length is incorrect
 8000f30:	2300      	movs	r3, #0
    }
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_MspInit+0x44>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_MspInit+0x44>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6193      	str	r3, [r2, #24]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_MspInit+0x44>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_MspInit+0x44>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_MspInit+0x44>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_MspInit+0x44>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fa8:	d144      	bne.n	8001034 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <HAL_ADC_MspInit+0xb8>)
 8001006:	f001 ff45 	bl	8002e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f001 ff38 	bl	8002e94 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2012      	movs	r0, #18
 800102a:	f001 fcae 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800102e:	2012      	movs	r0, #18
 8001030:	f001 fcc7 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	48000800 	.word	0x48000800

08001044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_TIM_Base_MspInit+0x5c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10c      	bne.n	8001070 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_TIM_Base_MspInit+0x60>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_TIM_Base_MspInit+0x60>)
 800105c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_TIM_Base_MspInit+0x60>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800106e:	e010      	b.n	8001092 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_TIM_Base_MspInit+0x64>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_TIM_Base_MspInit+0x60>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_TIM_Base_MspInit+0x60>)
 8001080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_TIM_Base_MspInit+0x60>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40013400 	.word	0x40013400

080010ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <HAL_TIM_MspPostInit+0xa8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d11d      	bne.n	800110a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_TIM_MspPostInit+0xac>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a21      	ldr	r2, [pc, #132]	; (8001158 <HAL_TIM_MspPostInit+0xac>)
 80010d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_TIM_MspPostInit+0xac>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010f8:	2302      	movs	r3, #2
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4816      	ldr	r0, [pc, #88]	; (800115c <HAL_TIM_MspPostInit+0xb0>)
 8001104:	f001 fec6 	bl	8002e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001108:	e020      	b.n	800114c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_TIM_MspPostInit+0xb4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d11b      	bne.n	800114c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_TIM_MspPostInit+0xac>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_TIM_MspPostInit+0xac>)
 800111a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800111e:	6153      	str	r3, [r2, #20]
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_TIM_MspPostInit+0xac>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800112c:	2340      	movs	r3, #64	; 0x40
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800113c:	2304      	movs	r3, #4
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <HAL_TIM_MspPostInit+0xb8>)
 8001148:	f001 fea4 	bl	8002e94 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40012c00 	.word	0x40012c00
 8001158:	40021000 	.word	0x40021000
 800115c:	48001000 	.word	0x48001000
 8001160:	40013400 	.word	0x40013400
 8001164:	48000800 	.word	0x48000800

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_UART_MspInit+0x8c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12f      	bne.n	80011ea <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_UART_MspInit+0x90>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <HAL_UART_MspInit+0x90>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0x90>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_UART_MspInit+0x90>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_UART_MspInit+0x90>)
 80011a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_UART_MspInit+0x90>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011ba:	2330      	movs	r3, #48	; 0x30
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ca:	2307      	movs	r3, #7
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <HAL_UART_MspInit+0x94>)
 80011d6:	f001 fe5d 	bl	8002e94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2025      	movs	r0, #37	; 0x25
 80011e0:	f001 fbd3 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011e4:	2025      	movs	r0, #37	; 0x25
 80011e6:	f001 fbec 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000800 	.word	0x48000800

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124c:	f000 f952 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <ADC1_2_IRQHandler+0x10>)
 800125a:	f000 fb69 	bl	8001930 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000bc 	.word	0x200000bc

08001268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART1_IRQHandler+0x10>)
 800126e:	f004 fe63 	bl	8005f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001a4 	.word	0x200001a4

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f005 fd7e 	bl	8006dac <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000a000 	.word	0x2000a000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	20000244 	.word	0x20000244
 80012e4:	20000330 	.word	0x20000330

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <print_state>:

#include "test_flash.h"
#include "stdio.h"
extern void initialise_monitor_handles(void);

void print_state(uint8_t state){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	printf("Actual:   %d\n", state);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4619      	mov	r1, r3
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <print_state+0x1c>)
 800131c:	f005 fd78 	bl	8006e10 <iprintf>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08008430 	.word	0x08008430

0800132c <test_mutate>:
	printf("Expected: 1\n");
	print_state(get_power());
	printf("\n");

}
void test_mutate(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	//Test case 1
	modify_power(OFF);
 8001330:	2000      	movs	r0, #0
 8001332:	f7fe ffd3 	bl	80002dc <modify_power>
	initialise_monitor_handles();
 8001336:	f006 fff3 	bl	8008320 <initialise_monitor_handles>
	printf("Expected: 0\n");
 800133a:	4833      	ldr	r0, [pc, #204]	; (8001408 <test_mutate+0xdc>)
 800133c:	f005 fe04 	bl	8006f48 <puts>
	print_state(get_power());
 8001340:	f7ff f8b8 	bl	80004b4 <get_power>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffe0 	bl	800130c <print_state>
	initialise_monitor_handles();
 800134c:	f006 ffe8 	bl	8008320 <initialise_monitor_handles>
	printf("\n");
 8001350:	200a      	movs	r0, #10
 8001352:	f005 fd75 	bl	8006e40 <putchar>

	//Test case 2
	modify_power(ON);
 8001356:	2001      	movs	r0, #1
 8001358:	f7fe ffc0 	bl	80002dc <modify_power>
	printf("Expected: 1\n");
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <test_mutate+0xe0>)
 800135e:	f005 fdf3 	bl	8006f48 <puts>
	print_state(get_power());
 8001362:	f7ff f8a7 	bl	80004b4 <get_power>
 8001366:	4603      	mov	r3, r0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffcf 	bl	800130c <print_state>
	printf("\n");
 800136e:	200a      	movs	r0, #10
 8001370:	f005 fd66 	bl	8006e40 <putchar>

	// Test case 3
	modify_control_mode(AUTOMATIC);
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff f817 	bl	80003a8 <modify_control_mode>
	printf("Expected: 0\n");
 800137a:	4823      	ldr	r0, [pc, #140]	; (8001408 <test_mutate+0xdc>)
 800137c:	f005 fde4 	bl	8006f48 <puts>
	print_state(get_control_mode());
 8001380:	f7ff f8a8 	bl	80004d4 <get_control_mode>
 8001384:	4603      	mov	r3, r0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ffc0 	bl	800130c <print_state>
	printf("\n");
 800138c:	200a      	movs	r0, #10
 800138e:	f005 fd57 	bl	8006e40 <putchar>

	// Test case 4
	modify_control_mode(MANUAL);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff f808 	bl	80003a8 <modify_control_mode>
	printf("Expected: 1\n");
 8001398:	481c      	ldr	r0, [pc, #112]	; (800140c <test_mutate+0xe0>)
 800139a:	f005 fdd5 	bl	8006f48 <puts>
	print_state(get_control_mode());
 800139e:	f7ff f899 	bl	80004d4 <get_control_mode>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffb1 	bl	800130c <print_state>
	printf("\n");
 80013aa:	200a      	movs	r0, #10
 80013ac:	f005 fd48 	bl	8006e40 <putchar>

	// Test case 5
	modify_wind_mode(LEVEL_0);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff f841 	bl	8000438 <modify_wind_mode>
	printf("Expected: 0\n");
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <test_mutate+0xdc>)
 80013b8:	f005 fdc6 	bl	8006f48 <puts>
	print_state(get_wind_mode());
 80013bc:	f7ff f89a 	bl	80004f4 <get_wind_mode>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffa2 	bl	800130c <print_state>
	printf("\n");
 80013c8:	200a      	movs	r0, #10
 80013ca:	f005 fd39 	bl	8006e40 <putchar>

	//Test case 6
	modify_wind_mode(LEVEL_1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff f832 	bl	8000438 <modify_wind_mode>
	printf("Expected: 1\n");
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <test_mutate+0xe0>)
 80013d6:	f005 fdb7 	bl	8006f48 <puts>
	print_state(get_wind_mode());
 80013da:	f7ff f88b 	bl	80004f4 <get_wind_mode>
 80013de:	4603      	mov	r3, r0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff93 	bl	800130c <print_state>
	printf("\n");
 80013e6:	200a      	movs	r0, #10
 80013e8:	f005 fd2a 	bl	8006e40 <putchar>

	//Test case 7
	modify_wind_mode(LEVEL_2);
 80013ec:	2002      	movs	r0, #2
 80013ee:	f7ff f823 	bl	8000438 <modify_wind_mode>
	printf("Expected: 2\n");
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <test_mutate+0xe4>)
 80013f4:	f005 fda8 	bl	8006f48 <puts>
	print_state(get_wind_mode());
 80013f8:	f7ff f87c 	bl	80004f4 <get_wind_mode>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff84 	bl	800130c <print_state>

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	08008440 	.word	0x08008440
 800140c:	0800844c 	.word	0x0800844c
 8001410:	08008458 	.word	0x08008458

08001414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f7ff ff66 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001442:	f005 fcb9 	bl	8006db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001446:	f7ff f8f7 	bl	8000638 <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800144c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001458:	08008558 	.word	0x08008558
  ldr r2, =_sbss
 800145c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001460:	2000032c 	.word	0x2000032c

08001464 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC3_IRQHandler>
	...

08001468 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x28>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x28>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f001 fa7b 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fd5c 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40022000 	.word	0x40022000

08001494 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fa93 	bl	80029de <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f001 fa5b 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	20000248 	.word	0x20000248

0800151c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000248 	.word	0x20000248

08001534 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b09a      	sub	sp, #104	; 0x68
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e1c9      	b.n	8001924 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d176      	bne.n	8001690 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d152      	bne.n	8001650 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fcdf 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d13b      	bne.n	8001650 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f001 f895 	bl	8002708 <ADC_Disable>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d12f      	bne.n	8001650 <HAL_ADC_Init+0xe0>
 80015f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d12b      	bne.n	8001650 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001600:	f023 0302 	bic.w	r3, r3, #2
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800161a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800162a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800162c:	4b86      	ldr	r3, [pc, #536]	; (8001848 <HAL_ADC_Init+0x2d8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a86      	ldr	r2, [pc, #536]	; (800184c <HAL_ADC_Init+0x2dc>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9a      	lsrs	r2, r3, #18
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001642:	e002      	b.n	800164a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3b01      	subs	r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f9      	bne.n	8001644 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800166c:	d110      	bne.n	8001690 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f023 0312 	bic.w	r3, r3, #18
 8001676:	f043 0210 	orr.w	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 8136 	bne.w	800190a <HAL_ADC_Init+0x39a>
 800169e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 8131 	bne.w	800190a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 8129 	bne.w	800190a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016c0:	f043 0202 	orr.w	r2, r3, #2
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d0:	d004      	beq.n	80016dc <HAL_ADC_Init+0x16c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5e      	ldr	r2, [pc, #376]	; (8001850 <HAL_ADC_Init+0x2e0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_ADC_Init+0x170>
 80016dc:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <HAL_ADC_Init+0x2e4>)
 80016de:	e000      	b.n	80016e2 <HAL_ADC_Init+0x172>
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_ADC_Init+0x2e8>)
 80016e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ec:	d102      	bne.n	80016f4 <HAL_ADC_Init+0x184>
 80016ee:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_ADC_Init+0x2e0>)
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e01a      	b.n	800172a <HAL_ADC_Init+0x1ba>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a55      	ldr	r2, [pc, #340]	; (8001850 <HAL_ADC_Init+0x2e0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d103      	bne.n	8001706 <HAL_ADC_Init+0x196>
 80016fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	e011      	b.n	800172a <HAL_ADC_Init+0x1ba>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a54      	ldr	r2, [pc, #336]	; (800185c <HAL_ADC_Init+0x2ec>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d102      	bne.n	8001716 <HAL_ADC_Init+0x1a6>
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_ADC_Init+0x2f0>)
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e009      	b.n	800172a <HAL_ADC_Init+0x1ba>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a51      	ldr	r2, [pc, #324]	; (8001860 <HAL_ADC_Init+0x2f0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d102      	bne.n	8001726 <HAL_ADC_Init+0x1b6>
 8001720:	4b4e      	ldr	r3, [pc, #312]	; (800185c <HAL_ADC_Init+0x2ec>)
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e001      	b.n	800172a <HAL_ADC_Init+0x1ba>
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_ADC_Init+0x1da>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x1da>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_ADC_Init+0x1dc>
 800174a:	2300      	movs	r3, #0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11c      	bne.n	800178a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001750:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d010      	beq.n	8001778 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_ADC_Init+0x202>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Init+0x202>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_ADC_Init+0x204>
 8001772:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001774:	2b00      	cmp	r3, #0
 8001776:	d108      	bne.n	800178a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	431a      	orrs	r2, r3
 8001786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001788:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7e5b      	ldrb	r3, [r3, #25]
 800178e:	035b      	lsls	r3, r3, #13
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001794:	2a01      	cmp	r2, #1
 8001796:	d002      	beq.n	800179e <HAL_ADC_Init+0x22e>
 8001798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800179c:	e000      	b.n	80017a0 <HAL_ADC_Init+0x230>
 800179e:	2200      	movs	r2, #0
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017b0:	4313      	orrs	r3, r2
 80017b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d11b      	bne.n	80017f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7e5b      	ldrb	r3, [r3, #25]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	3b01      	subs	r3, #1
 80017cc:	045a      	lsls	r2, r3, #17
 80017ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017d0:	4313      	orrs	r3, r2
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	663b      	str	r3, [r7, #96]	; 0x60
 80017d8:	e00d      	b.n	80017f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017e2:	f043 0220 	orr.w	r2, r3, #32
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d03a      	beq.n	8001874 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_ADC_Init+0x2ec>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d004      	beq.n	8001812 <HAL_ADC_Init+0x2a2>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_ADC_Init+0x2f0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d128      	bne.n	8001864 <HAL_ADC_Init+0x2f4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800181a:	d012      	beq.n	8001842 <HAL_ADC_Init+0x2d2>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001824:	d00a      	beq.n	800183c <HAL_ADC_Init+0x2cc>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800182e:	d002      	beq.n	8001836 <HAL_ADC_Init+0x2c6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	e018      	b.n	8001868 <HAL_ADC_Init+0x2f8>
 8001836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183a:	e015      	b.n	8001868 <HAL_ADC_Init+0x2f8>
 800183c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001840:	e012      	b.n	8001868 <HAL_ADC_Init+0x2f8>
 8001842:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001846:	e00f      	b.n	8001868 <HAL_ADC_Init+0x2f8>
 8001848:	20000000 	.word	0x20000000
 800184c:	431bde83 	.word	0x431bde83
 8001850:	50000100 	.word	0x50000100
 8001854:	50000300 	.word	0x50000300
 8001858:	50000700 	.word	0x50000700
 800185c:	50000400 	.word	0x50000400
 8001860:	50000500 	.word	0x50000500
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800186c:	4313      	orrs	r3, r2
 800186e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001870:	4313      	orrs	r3, r2
 8001872:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	d114      	bne.n	80018ac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001890:	f023 0302 	bic.w	r3, r3, #2
 8001894:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e1b      	ldrb	r3, [r3, #24]
 800189a:	039a      	lsls	r2, r3, #14
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4313      	orrs	r3, r2
 80018a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a8:	4313      	orrs	r3, r2
 80018aa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_ADC_Init+0x3bc>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018bc:	430b      	orrs	r3, r1
 80018be:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10c      	bne.n	80018e2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f023 010f 	bic.w	r1, r3, #15
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
 80018e0:	e007      	b.n	80018f2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 020f 	bic.w	r2, r2, #15
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f023 0303 	bic.w	r3, r3, #3
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
 8001908:	e00a      	b.n	8001920 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f023 0312 	bic.w	r3, r3, #18
 8001912:	f043 0210 	orr.w	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001920:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001924:	4618      	mov	r0, r3
 8001926:	3768      	adds	r7, #104	; 0x68
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	fff0c007 	.word	0xfff0c007

08001930 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_ADC_IRQHandler+0x38>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10b      	bne.n	8001980 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80bc 	beq.w	8001aec <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80b6 	beq.w	8001aec <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a0:	d004      	beq.n	80019ac <HAL_ADC_IRQHandler+0x7c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a90      	ldr	r2, [pc, #576]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d106      	bne.n	80019ba <HAL_ADC_IRQHandler+0x8a>
 80019ac:	4b8f      	ldr	r3, [pc, #572]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03e      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019b8:	e005      	b.n	80019c6 <HAL_ADC_IRQHandler+0x96>
 80019ba:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d037      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ce:	d004      	beq.n	80019da <HAL_ADC_IRQHandler+0xaa>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a84      	ldr	r2, [pc, #528]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d106      	bne.n	80019e8 <HAL_ADC_IRQHandler+0xb8>
 80019da:	4b84      	ldr	r3, [pc, #528]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d027      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019e6:	e005      	b.n	80019f4 <HAL_ADC_IRQHandler+0xc4>
 80019e8:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d020      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_IRQHandler+0xd8>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a79      	ldr	r2, [pc, #484]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d106      	bne.n	8001a16 <HAL_ADC_IRQHandler+0xe6>
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d010      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 8001a14:	e005      	b.n	8001a22 <HAL_ADC_IRQHandler+0xf2>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2b09      	cmp	r3, #9
 8001a20:	d009      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a70      	ldr	r2, [pc, #448]	; (8001bf4 <HAL_ADC_IRQHandler+0x2c4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d104      	bne.n	8001a40 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e00f      	b.n	8001a60 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a48:	d004      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x124>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a66      	ldr	r2, [pc, #408]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d102      	bne.n	8001a5a <HAL_ADC_IRQHandler+0x12a>
 8001a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a58:	e000      	b.n	8001a5c <HAL_ADC_IRQHandler+0x12c>
 8001a5a:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_ADC_IRQHandler+0x2c4>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d137      	bne.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d132      	bne.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d02d      	beq.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d11a      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020c 	bic.w	r2, r2, #12
 8001a9e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d112      	bne.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac4:	e00b      	b.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fd28 	bl	8001534 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	220c      	movs	r2, #12
 8001aea:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x1d0>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10b      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8138 	beq.w	8001d7c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8132 	beq.w	8001d7c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2c:	d004      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x208>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x216>
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d03e      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b44:	e005      	b.n	8001b52 <HAL_ADC_IRQHandler+0x222>
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d037      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x236>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d106      	bne.n	8001b74 <HAL_ADC_IRQHandler+0x244>
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d027      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b72:	e005      	b.n	8001b80 <HAL_ADC_IRQHandler+0x250>
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d020      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x264>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x272>
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2b09      	cmp	r3, #9
 8001b9e:	d010      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001ba0:	e005      	b.n	8001bae <HAL_ADC_IRQHandler+0x27e>
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2b09      	cmp	r3, #9
 8001bac:	d009      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_ADC_IRQHandler+0x2c4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d104      	bne.n	8001bcc <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	e018      	b.n	8001bfe <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd4:	d004      	beq.n	8001be0 <HAL_ADC_IRQHandler+0x2b0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d10b      	bne.n	8001bf8 <HAL_ADC_IRQHandler+0x2c8>
 8001be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001be4:	e009      	b.n	8001bfa <HAL_ADC_IRQHandler+0x2ca>
 8001be6:	bf00      	nop
 8001be8:	50000100 	.word	0x50000100
 8001bec:	50000300 	.word	0x50000300
 8001bf0:	50000700 	.word	0x50000700
 8001bf4:	50000400 	.word	0x50000400
 8001bf8:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <HAL_ADC_IRQHandler+0x514>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 80b0 	bne.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80a3 	bne.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 809d 	bne.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8097 	beq.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c48:	d004      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x324>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x332>
 8001c54:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d03e      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c60:	e005      	b.n	8001c6e <HAL_ADC_IRQHandler+0x33e>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_ADC_IRQHandler+0x520>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d037      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_IRQHandler+0x352>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a72      	ldr	r2, [pc, #456]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d106      	bne.n	8001c90 <HAL_ADC_IRQHandler+0x360>
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d027      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c8e:	e005      	b.n	8001c9c <HAL_ADC_IRQHandler+0x36c>
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_ADC_IRQHandler+0x520>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d020      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x380>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a67      	ldr	r2, [pc, #412]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x38e>
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2b07      	cmp	r3, #7
 8001cba:	d010      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001cbc:	e005      	b.n	8001cca <HAL_ADC_IRQHandler+0x39a>
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_ADC_IRQHandler+0x520>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d009      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_ADC_IRQHandler+0x514>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d104      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e00f      	b.n	8001d08 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x3cc>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a54      	ldr	r2, [pc, #336]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x3d2>
 8001cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d00:	e000      	b.n	8001d04 <HAL_ADC_IRQHandler+0x3d4>
 8001d02:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_ADC_IRQHandler+0x514>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d12d      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11a      	bne.n	8001d56 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d2e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d112      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
 8001d54:	e00b      	b.n	8001d6e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8c4 	bl	8001efc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2260      	movs	r2, #96	; 0x60
 8001d7a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <HAL_ADC_IRQHandler+0x47a>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00c      	beq.n	8001daa <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fbd3 	bl	8001548 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d012      	beq.n	8001dda <HAL_ADC_IRQHandler+0x4aa>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8aa 	bl	8001f24 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x4da>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f89c 	bl	8001f38 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d04f      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x584>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e02d      	b.n	8001e88 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e34:	d004      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x510>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d109      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x524>
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001e42:	e008      	b.n	8001e56 <HAL_ADC_IRQHandler+0x526>
 8001e44:	50000400 	.word	0x50000400
 8001e48:	50000100 	.word	0x50000100
 8001e4c:	50000300 	.word	0x50000300
 8001e50:	50000700 	.word	0x50000700
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <HAL_ADC_IRQHandler+0x5c8>)
 8001e56:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10a      	bne.n	8001e88 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001e72:	2301      	movs	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e007      	b.n	8001e88 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10e      	bne.n	8001eac <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fb58 	bl	800155c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d018      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x5c0>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f043 0208 	orr.w	r2, r3, #8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f810 	bl	8001f10 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	50000700 	.word	0x50000700

08001efc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b09b      	sub	sp, #108	; 0x6c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x22>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e2ca      	b.n	8002504 <HAL_ADC_ConfigChannel+0x5b8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 82ae 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d81c      	bhi.n	8001fc8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	231f      	movs	r3, #31
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4019      	ands	r1, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc6:	e063      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d81e      	bhi.n	800200e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	3b1e      	subs	r3, #30
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4019      	ands	r1, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	3b1e      	subs	r3, #30
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
 800200c:	e040      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b0e      	cmp	r3, #14
 8002014:	d81e      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	3b3c      	subs	r3, #60	; 0x3c
 800202a:	221f      	movs	r2, #31
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	3b3c      	subs	r3, #60	; 0x3c
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
 8002052:	e01d      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	3b5a      	subs	r3, #90	; 0x5a
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	4019      	ands	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3b5a      	subs	r3, #90	; 0x5a
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 80e5 	bne.w	800226a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d91c      	bls.n	80020e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6999      	ldr	r1, [r3, #24]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6898      	ldr	r0, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	619a      	str	r2, [r3, #24]
 80020e0:	e019      	b.n	8002116 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6959      	ldr	r1, [r3, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4019      	ands	r1, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6898      	ldr	r0, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	3b01      	subs	r3, #1
 8002134:	2b03      	cmp	r3, #3
 8002136:	d84f      	bhi.n	80021d8 <HAL_ADC_ConfigChannel+0x28c>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <HAL_ADC_ConfigChannel+0x1f4>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002151 	.word	0x08002151
 8002144:	08002173 	.word	0x08002173
 8002148:	08002195 	.word	0x08002195
 800214c:	080021b7 	.word	0x080021b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002156:	4b9a      	ldr	r3, [pc, #616]	; (80023c0 <HAL_ADC_ConfigChannel+0x474>)
 8002158:	4013      	ands	r3, r2
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	0691      	lsls	r1, r2, #26
 8002160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002162:	430a      	orrs	r2, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800216e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002170:	e07e      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002178:	4b91      	ldr	r3, [pc, #580]	; (80023c0 <HAL_ADC_ConfigChannel+0x474>)
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	0691      	lsls	r1, r2, #26
 8002182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002184:	430a      	orrs	r2, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002190:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002192:	e06d      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800219a:	4b89      	ldr	r3, [pc, #548]	; (80023c0 <HAL_ADC_ConfigChannel+0x474>)
 800219c:	4013      	ands	r3, r2
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	0691      	lsls	r1, r2, #26
 80021a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021a6:	430a      	orrs	r2, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021b4:	e05c      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_ADC_ConfigChannel+0x474>)
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	0691      	lsls	r1, r2, #26
 80021c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021c8:	430a      	orrs	r2, r1
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021d6:	e04b      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	429a      	cmp	r2, r3
 800220e:	d107      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800221e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002226:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	069b      	lsls	r3, r3, #26
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002242:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	069b      	lsls	r3, r3, #26
 8002254:	429a      	cmp	r2, r3
 8002256:	d10a      	bne.n	800226e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002266:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002268:	e001      	b.n	800226e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
      break;
 800226e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x344>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x344>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_ADC_ConfigChannel+0x346>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 8130 	bne.w	80024f8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d00f      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022be:	e049      	b.n	8002354 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b09      	cmp	r3, #9
 80022e0:	d91c      	bls.n	800231c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6999      	ldr	r1, [r3, #24]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	3b1b      	subs	r3, #27
 80022f4:	2207      	movs	r2, #7
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4019      	ands	r1, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6898      	ldr	r0, [r3, #8]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	3b1b      	subs	r3, #27
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	619a      	str	r2, [r3, #24]
 800231a:	e01b      	b.n	8002354 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6959      	ldr	r1, [r3, #20]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	4019      	ands	r1, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6898      	ldr	r0, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	fa00 f203 	lsl.w	r2, r0, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800235c:	d004      	beq.n	8002368 <HAL_ADC_ConfigChannel+0x41c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_ADC_ConfigChannel+0x478>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x420>
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_ADC_ConfigChannel+0x47c>)
 800236a:	e000      	b.n	800236e <HAL_ADC_ConfigChannel+0x422>
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_ADC_ConfigChannel+0x480>)
 800236e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b10      	cmp	r3, #16
 8002376:	d105      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002388:	2b11      	cmp	r3, #17
 800238a:	d105      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800238c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800239c:	2b12      	cmp	r3, #18
 800239e:	f040 80ab 	bne.w	80024f8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80023a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80a4 	bne.w	80024f8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b8:	d10a      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x484>
 80023ba:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <HAL_ADC_ConfigChannel+0x478>)
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e022      	b.n	8002406 <HAL_ADC_ConfigChannel+0x4ba>
 80023c0:	83fff000 	.word	0x83fff000
 80023c4:	50000100 	.word	0x50000100
 80023c8:	50000300 	.word	0x50000300
 80023cc:	50000700 	.word	0x50000700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_ADC_ConfigChannel+0x5c4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d103      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x496>
 80023da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e011      	b.n	8002406 <HAL_ADC_ConfigChannel+0x4ba>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4b      	ldr	r2, [pc, #300]	; (8002514 <HAL_ADC_ConfigChannel+0x5c8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d102      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x4a6>
 80023ec:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_ADC_ConfigChannel+0x5cc>)
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e009      	b.n	8002406 <HAL_ADC_ConfigChannel+0x4ba>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a48      	ldr	r2, [pc, #288]	; (8002518 <HAL_ADC_ConfigChannel+0x5cc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d102      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x4b6>
 80023fc:	4b45      	ldr	r3, [pc, #276]	; (8002514 <HAL_ADC_ConfigChannel+0x5c8>)
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e001      	b.n	8002406 <HAL_ADC_ConfigChannel+0x4ba>
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d108      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x4da>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x4da>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_ADC_ConfigChannel+0x4dc>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d150      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800242c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800242e:	2b00      	cmp	r3, #0
 8002430:	d010      	beq.n	8002454 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_ADC_ConfigChannel+0x502>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x502>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_ADC_ConfigChannel+0x504>
 800244e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002450:	2b00      	cmp	r3, #0
 8002452:	d13c      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b10      	cmp	r3, #16
 800245a:	d11d      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x54c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002464:	d118      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800246e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002470:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002472:	4b2a      	ldr	r3, [pc, #168]	; (800251c <HAL_ADC_ConfigChannel+0x5d0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <HAL_ADC_ConfigChannel+0x5d4>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	0c9a      	lsrs	r2, r3, #18
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002488:	e002      	b.n	8002490 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3b01      	subs	r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f9      	bne.n	800248a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002496:	e02e      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b11      	cmp	r3, #17
 800249e:	d10b      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x56c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a8:	d106      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80024b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b6:	e01e      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d11a      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024cc:	e013      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024e0:	e00a      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0220 	orr.w	r2, r3, #32
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024f4:	e000      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024f6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002500:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002504:	4618      	mov	r0, r3
 8002506:	376c      	adds	r7, #108	; 0x6c
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	50000100 	.word	0x50000100
 8002514:	50000400 	.word	0x50000400
 8002518:	50000500 	.word	0x50000500
 800251c:	20000000 	.word	0x20000000
 8002520:	431bde83 	.word	0x431bde83

08002524 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002524:	b480      	push	{r7}
 8002526:	b099      	sub	sp, #100	; 0x64
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800253c:	d102      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800253e:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	e01a      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6a      	ldr	r2, [pc, #424]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d103      	bne.n	8002556 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800254e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	e011      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d102      	bne.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	e009      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a64      	ldr	r2, [pc, #400]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d102      	bne.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002570:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	e001      	b.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b0      	b.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800258e:	2302      	movs	r3, #2
 8002590:	e0a9      	b.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f040 808d 	bne.w	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8086 	bne.w	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c0:	d004      	beq.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025cc:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80025ce:	e000      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025d0:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80025d2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d040      	beq.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ee:	035b      	lsls	r3, r3, #13
 80025f0:	430b      	orrs	r3, r1
 80025f2:	431a      	orrs	r2, r3
 80025f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d15c      	bne.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800263a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800263c:	2b00      	cmp	r3, #0
 800263e:	d14b      	bne.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002648:	f023 030f 	bic.w	r3, r3, #15
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	6811      	ldr	r1, [r2, #0]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6892      	ldr	r2, [r2, #8]
 8002654:	430a      	orrs	r2, r1
 8002656:	431a      	orrs	r2, r3
 8002658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800265c:	e03c      	b.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800265e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002668:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d108      	bne.n	800268a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d123      	bne.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80026ac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80026b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026ba:	f023 030f 	bic.w	r3, r3, #15
 80026be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026c0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026c2:	e009      	b.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80026d6:	e000      	b.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80026e6:	4618      	mov	r0, r3
 80026e8:	3764      	adds	r7, #100	; 0x64
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	50000100 	.word	0x50000100
 80026f8:	50000400 	.word	0x50000400
 80026fc:	50000500 	.word	0x50000500
 8002700:	50000300 	.word	0x50000300
 8002704:	50000700 	.word	0x50000700

08002708 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d108      	bne.n	8002734 <ADC_Disable+0x2c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <ADC_Disable+0x2c>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <ADC_Disable+0x2e>
 8002734:	2300      	movs	r3, #0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d047      	beq.n	80027ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030d 	and.w	r3, r3, #13
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10f      	bne.n	8002768 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2203      	movs	r2, #3
 800275e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002760:	f7fe fedc 	bl	800151c <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002766:	e029      	b.n	80027bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f043 0210 	orr.w	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e023      	b.n	80027cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002784:	f7fe feca 	bl	800151c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d914      	bls.n	80027bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d10d      	bne.n	80027bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f043 0210 	orr.w	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e007      	b.n	80027cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d0dc      	beq.n	8002784 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff8e 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff29 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff3e 	bl	800281c <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff8e 	bl	80028c8 <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5d 	bl	8002874 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff31 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d008      	beq.n	8002a1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e020      	b.n	8002a5c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 020e 	bic.w	r2, r2, #14
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d005      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e027      	b.n	8002ada <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 020e 	bic.w	r2, r2, #14
 8002a98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
    } 
  }
  return status;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_FLASH_Program+0xd8>)
 8002b00:	7e1b      	ldrb	r3, [r3, #24]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_FLASH_Program+0x26>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e054      	b.n	8002bb4 <HAL_FLASH_Program+0xd0>
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <HAL_FLASH_Program+0xd8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b14:	f000 f8a8 	bl	8002c68 <FLASH_WaitForLastOperation>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d144      	bne.n	8002bac <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	757b      	strb	r3, [r7, #21]
 8002b2c:	e007      	b.n	8002b3e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d102      	bne.n	8002b3a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002b34:	2302      	movs	r3, #2
 8002b36:	757b      	strb	r3, [r7, #21]
 8002b38:	e001      	b.n	8002b3e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75bb      	strb	r3, [r7, #22]
 8002b42:	e02d      	b.n	8002ba0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002b44:	7dbb      	ldrb	r3, [r7, #22]
 8002b46:	005a      	lsls	r2, r3, #1
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	eb02 0c03 	add.w	ip, r2, r3
 8002b4e:	7dbb      	ldrb	r3, [r7, #22]
 8002b50:	0119      	lsls	r1, r3, #4
 8002b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b56:	f1c1 0620 	rsb	r6, r1, #32
 8002b5a:	f1a1 0020 	sub.w	r0, r1, #32
 8002b5e:	fa22 f401 	lsr.w	r4, r2, r1
 8002b62:	fa03 f606 	lsl.w	r6, r3, r6
 8002b66:	4334      	orrs	r4, r6
 8002b68:	fa23 f000 	lsr.w	r0, r3, r0
 8002b6c:	4304      	orrs	r4, r0
 8002b6e:	fa23 f501 	lsr.w	r5, r3, r1
 8002b72:	b2a3      	uxth	r3, r4
 8002b74:	4619      	mov	r1, r3
 8002b76:	4660      	mov	r0, ip
 8002b78:	f000 f85a 	bl	8002c30 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b80:	f000 f872 	bl	8002c68 <FLASH_WaitForLastOperation>
 8002b84:	4603      	mov	r3, r0
 8002b86:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_FLASH_Program+0xdc>)
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_FLASH_Program+0xdc>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002b9a:	7dbb      	ldrb	r3, [r7, #22]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	75bb      	strb	r3, [r7, #22]
 8002ba0:	7dba      	ldrb	r2, [r7, #22]
 8002ba2:	7d7b      	ldrb	r3, [r7, #21]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3cd      	bcc.n	8002b44 <HAL_FLASH_Program+0x60>
 8002ba8:	e000      	b.n	8002bac <HAL_FLASH_Program+0xc8>
      {
        break;
 8002baa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_FLASH_Program+0xd8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	761a      	strb	r2, [r3, #24]

  return status;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bbc:	20000250 	.word	0x20000250
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_FLASH_Unlock+0x40>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_FLASH_Unlock+0x40>)
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_FLASH_Unlock+0x44>)
 8002bde:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_FLASH_Unlock+0x40>)
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_FLASH_Unlock+0x48>)
 8002be4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_FLASH_Unlock+0x40>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40022000 	.word	0x40022000
 8002c08:	45670123 	.word	0x45670123
 8002c0c:	cdef89ab 	.word	0xcdef89ab

08002c10 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_FLASH_Lock+0x1c>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_FLASH_Lock+0x1c>)
 8002c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40022000 	.word	0x40022000

08002c30 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <FLASH_Program_HalfWord+0x30>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <FLASH_Program_HalfWord+0x34>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <FLASH_Program_HalfWord+0x34>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	887a      	ldrh	r2, [r7, #2]
 8002c52:	801a      	strh	r2, [r3, #0]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	20000250 	.word	0x20000250
 8002c64:	40022000 	.word	0x40022000

08002c68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7fe fc54 	bl	800151c <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c76:	e010      	b.n	8002c9a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d00c      	beq.n	8002c9a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <FLASH_WaitForLastOperation+0x2e>
 8002c86:	f7fe fc49 	bl	800151c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d201      	bcs.n	8002c9a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e01f      	b.n	8002cda <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <FLASH_WaitForLastOperation+0x7c>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d0e8      	beq.n	8002c78 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <FLASH_WaitForLastOperation+0x7c>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d102      	bne.n	8002cb8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <FLASH_WaitForLastOperation+0x7c>)
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <FLASH_WaitForLastOperation+0x7c>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d005      	beq.n	8002cd0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <FLASH_WaitForLastOperation+0x7c>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d103      	bne.n	8002cd8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002cd0:	f000 f80a 	bl	8002ce8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <FLASH_SetErrorCode+0x5c>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d109      	bne.n	8002d12 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <FLASH_SetErrorCode+0x60>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f043 0302 	orr.w	r3, r3, #2
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <FLASH_SetErrorCode+0x60>)
 8002d08:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <FLASH_SetErrorCode+0x5c>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d109      	bne.n	8002d32 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <FLASH_SetErrorCode+0x60>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <FLASH_SetErrorCode+0x60>)
 8002d28:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <FLASH_SetErrorCode+0x5c>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60d3      	str	r3, [r2, #12]
}  
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40022000 	.word	0x40022000
 8002d48:	20000250 	.word	0x20000250

08002d4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_FLASHEx_Erase+0xcc>)
 8002d60:	7e1b      	ldrb	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_FLASHEx_Erase+0x1e>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e052      	b.n	8002e10 <HAL_FLASHEx_Erase+0xc4>
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_FLASHEx_Erase+0xcc>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d115      	bne.n	8002da4 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d7c:	f7ff ff74 	bl	8002c68 <FLASH_WaitForLastOperation>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d140      	bne.n	8002e08 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002d86:	f000 f84b 	bl	8002e20 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d8e:	f7ff ff6b 	bl	8002c68 <FLASH_WaitForLastOperation>
 8002d92:	4603      	mov	r3, r0
 8002d94:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <HAL_FLASHEx_Erase+0xd0>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_FLASHEx_Erase+0xd0>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6113      	str	r3, [r2, #16]
 8002da2:	e031      	b.n	8002e08 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002da4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002da8:	f7ff ff5e 	bl	8002c68 <FLASH_WaitForLastOperation>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12a      	bne.n	8002e08 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	e019      	b.n	8002df6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	f000 f846 	bl	8002e54 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dcc:	f7ff ff4c 	bl	8002c68 <FLASH_WaitForLastOperation>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_FLASHEx_Erase+0xd0>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <HAL_FLASHEx_Erase+0xd0>)
 8002dda:	f023 0302 	bic.w	r3, r3, #2
 8002dde:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	601a      	str	r2, [r3, #0]
            break;
 8002dec:	e00c      	b.n	8002e08 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	02da      	lsls	r2, r3, #11
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3dc      	bcc.n	8002dc2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_FLASHEx_Erase+0xcc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	761a      	strb	r2, [r3, #24]

  return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000250 	.word	0x20000250
 8002e1c:	40022000 	.word	0x40022000

08002e20 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <FLASH_MassErase+0x2c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <FLASH_MassErase+0x30>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <FLASH_MassErase+0x30>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <FLASH_MassErase+0x30>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <FLASH_MassErase+0x30>)
 8002e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e40:	6113      	str	r3, [r2, #16]
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	20000250 	.word	0x20000250
 8002e50:	40022000 	.word	0x40022000

08002e54 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <FLASH_PageErase+0x38>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <FLASH_PageErase+0x3c>)
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <FLASH_PageErase+0x3c>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <FLASH_PageErase+0x3c>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <FLASH_PageErase+0x3c>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <FLASH_PageErase+0x3c>)
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7e:	6113      	str	r3, [r2, #16]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	20000250 	.word	0x20000250
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea2:	e154      	b.n	800314e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8146 	beq.w	8003148 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d005      	beq.n	8002ed4 <HAL_GPIO_Init+0x40>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d130      	bne.n	8002f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f003 0201 	and.w	r2, r3, #1
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d017      	beq.n	8002f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d123      	bne.n	8002fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	08da      	lsrs	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3208      	adds	r2, #8
 8002f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	220f      	movs	r2, #15
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	08da      	lsrs	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3208      	adds	r2, #8
 8002fc0:	6939      	ldr	r1, [r7, #16]
 8002fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0203 	and.w	r2, r3, #3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a0 	beq.w	8003148 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_GPIO_Init+0x2d8>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_GPIO_Init+0x2d8>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6193      	str	r3, [r2, #24]
 8003014:	4b55      	ldr	r3, [pc, #340]	; (800316c <HAL_GPIO_Init+0x2d8>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003020:	4a53      	ldr	r2, [pc, #332]	; (8003170 <HAL_GPIO_Init+0x2dc>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	3302      	adds	r3, #2
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	220f      	movs	r2, #15
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800304a:	d019      	beq.n	8003080 <HAL_GPIO_Init+0x1ec>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a49      	ldr	r2, [pc, #292]	; (8003174 <HAL_GPIO_Init+0x2e0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_GPIO_Init+0x1e8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a48      	ldr	r2, [pc, #288]	; (8003178 <HAL_GPIO_Init+0x2e4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00d      	beq.n	8003078 <HAL_GPIO_Init+0x1e4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a47      	ldr	r2, [pc, #284]	; (800317c <HAL_GPIO_Init+0x2e8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <HAL_GPIO_Init+0x1e0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a46      	ldr	r2, [pc, #280]	; (8003180 <HAL_GPIO_Init+0x2ec>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_GPIO_Init+0x1dc>
 800306c:	2304      	movs	r3, #4
 800306e:	e008      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003070:	2305      	movs	r3, #5
 8003072:	e006      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003074:	2303      	movs	r3, #3
 8003076:	e004      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003078:	2302      	movs	r3, #2
 800307a:	e002      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003080:	2300      	movs	r3, #0
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	f002 0203 	and.w	r2, r2, #3
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	4093      	lsls	r3, r2
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003092:	4937      	ldr	r1, [pc, #220]	; (8003170 <HAL_GPIO_Init+0x2dc>)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030a0:	4b38      	ldr	r3, [pc, #224]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030c4:	4a2f      	ldr	r2, [pc, #188]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ca:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030f4:	4b23      	ldr	r3, [pc, #140]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003118:	4a1a      	ldr	r2, [pc, #104]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_GPIO_Init+0x2f0>)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	f47f aea3 	bne.w	8002ea4 <HAL_GPIO_Init+0x10>
  }
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40021000 	.word	0x40021000
 8003170:	40010000 	.word	0x40010000
 8003174:	48000400 	.word	0x48000400
 8003178:	48000800 	.word	0x48000800
 800317c:	48000c00 	.word	0x48000c00
 8003180:	48001000 	.word	0x48001000
 8003184:	40010400 	.word	0x40010400

08003188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800318e:	af00      	add	r7, sp, #0
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003198:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f001 b823 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 817d 	beq.w	80034be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031c4:	4bbc      	ldr	r3, [pc, #752]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00c      	beq.n	80031ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d0:	4bb9      	ldr	r3, [pc, #740]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d15c      	bne.n	8003296 <HAL_RCC_OscConfig+0x10e>
 80031dc:	4bb6      	ldr	r3, [pc, #728]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d155      	bne.n	8003296 <HAL_RCC_OscConfig+0x10e>
 80031ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_RCC_OscConfig+0x94>
 8003216:	4ba8      	ldr	r3, [pc, #672]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e015      	b.n	8003248 <HAL_RCC_OscConfig+0xc0>
 800321c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003220:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003234:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003238:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003244:	4b9c      	ldr	r3, [pc, #624]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800324c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003250:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003254:	fa92 f2a2 	rbit	r2, r2
 8003258:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800325c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003260:	fab2 f282 	clz	r2, r2
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f042 0220 	orr.w	r2, r2, #32
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	f002 021f 	and.w	r2, r2, #31
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f202 	lsl.w	r2, r1, r2
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 811f 	beq.w	80034bc <HAL_RCC_OscConfig+0x334>
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 8116 	bne.w	80034bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f000 bfaf 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x12e>
 80032a8:	4b83      	ldr	r3, [pc, #524]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a82      	ldr	r2, [pc, #520]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e036      	b.n	8003324 <HAL_RCC_OscConfig+0x19c>
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x158>
 80032c6:	4b7c      	ldr	r3, [pc, #496]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7b      	ldr	r2, [pc, #492]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b79      	ldr	r3, [pc, #484]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a78      	ldr	r2, [pc, #480]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e021      	b.n	8003324 <HAL_RCC_OscConfig+0x19c>
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x184>
 80032f2:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a70      	ldr	r2, [pc, #448]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6d      	ldr	r2, [pc, #436]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0x19c>
 800330c:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a69      	ldr	r2, [pc, #420]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a66      	ldr	r2, [pc, #408]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f023 020f 	bic.w	r2, r3, #15
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	495f      	ldr	r1, [pc, #380]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 800333a:	4313      	orrs	r3, r2
 800333c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d059      	beq.n	8003402 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7fe f8e5 	bl	800151c <HAL_GetTick>
 8003352:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe f8e0 	bl	800151c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d902      	bls.n	800336e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	f000 bf43 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
 800336e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003372:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003382:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_OscConfig+0x218>
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e015      	b.n	80033cc <HAL_RCC_OscConfig+0x244>
 80033a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033d8:	fa92 f2a2 	rbit	r2, r2
 80033dc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f042 0220 	orr.w	r2, r2, #32
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f002 021f 	and.w	r2, r2, #31
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f202 	lsl.w	r2, r1, r2
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ab      	beq.n	8003358 <HAL_RCC_OscConfig+0x1d0>
 8003400:	e05d      	b.n	80034be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe f88b 	bl	800151c <HAL_GetTick>
 8003406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe f886 	bl	800151c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b64      	cmp	r3, #100	; 0x64
 800341a:	d902      	bls.n	8003422 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	f000 bee9 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
 8003422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003426:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003436:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_RCC_OscConfig+0x2cc>
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	e015      	b.n	8003480 <HAL_RCC_OscConfig+0x2f8>
 8003454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003458:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003470:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <HAL_RCC_OscConfig+0x330>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003484:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003488:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800348c:	fa92 f2a2 	rbit	r2, r2
 8003490:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003494:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003498:	fab2 f282 	clz	r2, r2
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f002 021f 	and.w	r2, r2, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f202 	lsl.w	r2, r1, r2
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ab      	bne.n	800340c <HAL_RCC_OscConfig+0x284>
 80034b4:	e003      	b.n	80034be <HAL_RCC_OscConfig+0x336>
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 817d 	beq.w	80037ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034d4:	4ba6      	ldr	r3, [pc, #664]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034e0:	4ba3      	ldr	r3, [pc, #652]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d172      	bne.n	80035d2 <HAL_RCC_OscConfig+0x44a>
 80034ec:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d16c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x44a>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800350a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_RCC_OscConfig+0x3a0>
 8003522:	4b93      	ldr	r3, [pc, #588]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e013      	b.n	8003550 <HAL_RCC_OscConfig+0x3c8>
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800353a:	2302      	movs	r3, #2
 800353c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003540:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800354c:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	2202      	movs	r2, #2
 8003552:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003556:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800355a:	fa92 f2a2 	rbit	r2, r2
 800355e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003562:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003566:	fab2 f282 	clz	r2, r2
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f042 0220 	orr.w	r2, r2, #32
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f002 021f 	and.w	r2, r2, #31
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f202 	lsl.w	r2, r1, r2
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCC_OscConfig+0x410>
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d002      	beq.n	8003598 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f000 be2e 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	21f8      	movs	r1, #248	; 0xf8
 80035ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035b6:	fa91 f1a1 	rbit	r1, r1
 80035ba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035be:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035c2:	fab1 f181 	clz	r1, r1
 80035c6:	b2c9      	uxtb	r1, r1
 80035c8:	408b      	lsls	r3, r1
 80035ca:	4969      	ldr	r1, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d0:	e0fd      	b.n	80037ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8088 	beq.w	80036f4 <HAL_RCC_OscConfig+0x56c>
 80035e4:	2301      	movs	r3, #1
 80035e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2301      	movs	r3, #1
 800360e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fd ff84 	bl	800151c <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361a:	f7fd ff7f 	bl	800151c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d902      	bls.n	8003630 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	f000 bde2 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
 8003630:	2302      	movs	r3, #2
 8003632:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003642:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d102      	bne.n	8003660 <HAL_RCC_OscConfig+0x4d8>
 800365a:	4b45      	ldr	r3, [pc, #276]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	e013      	b.n	8003688 <HAL_RCC_OscConfig+0x500>
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003672:	2302      	movs	r3, #2
 8003674:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003678:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2202      	movs	r2, #2
 800368a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800368e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800369a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f002 021f 	and.w	r2, r2, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0af      	beq.n	800361a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	21f8      	movs	r1, #248	; 0xf8
 80036d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036d8:	fa91 f1a1 	rbit	r1, r1
 80036dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036e4:	fab1 f181 	clz	r1, r1
 80036e8:	b2c9      	uxtb	r1, r1
 80036ea:	408b      	lsls	r3, r1
 80036ec:	4920      	ldr	r1, [pc, #128]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
 80036f2:	e06c      	b.n	80037ce <HAL_RCC_OscConfig+0x646>
 80036f4:	2301      	movs	r3, #1
 80036f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003706:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003714:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	461a      	mov	r2, r3
 800371c:	2300      	movs	r3, #0
 800371e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fd fefc 	bl	800151c <HAL_GetTick>
 8003724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372a:	f7fd fef7 	bl	800151c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	f000 bd5a 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
 8003740:	2302      	movs	r3, #2
 8003742:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d104      	bne.n	8003774 <HAL_RCC_OscConfig+0x5ec>
 800376a:	4b01      	ldr	r3, [pc, #4]	; (8003770 <HAL_RCC_OscConfig+0x5e8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	e015      	b.n	800379c <HAL_RCC_OscConfig+0x614>
 8003770:	40021000 	.word	0x40021000
 8003774:	2302      	movs	r3, #2
 8003776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003786:	2302      	movs	r3, #2
 8003788:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800378c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003798:	4bc8      	ldr	r3, [pc, #800]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	2202      	movs	r2, #2
 800379e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037a6:	fa92 f2a2 	rbit	r2, r2
 80037aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f002 021f 	and.w	r2, r2, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ad      	bne.n	800372a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8110 	beq.w	8003a04 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d079      	beq.n	80038e8 <HAL_RCC_OscConfig+0x760>
 80037f4:	2301      	movs	r3, #1
 80037f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	4bab      	ldr	r3, [pc, #684]	; (8003ac0 <HAL_RCC_OscConfig+0x938>)
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	461a      	mov	r2, r3
 800381a:	2301      	movs	r3, #1
 800381c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7fd fe7d 	bl	800151c <HAL_GetTick>
 8003822:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003828:	f7fd fe78 	bl	800151c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d902      	bls.n	800383e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	f000 bcdb 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
 800383e:	2302      	movs	r3, #2
 8003840:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003858:	2202      	movs	r2, #2
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	fa93 f2a3 	rbit	r2, r3
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800387c:	2202      	movs	r2, #2
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	fa93 f2a3 	rbit	r2, r3
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003896:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003898:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 800389a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038a4:	2102      	movs	r1, #2
 80038a6:	6019      	str	r1, [r3, #0]
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	fa93 f1a3 	rbit	r1, r3
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038be:	6019      	str	r1, [r3, #0]
  return result;
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0a0      	beq.n	8003828 <HAL_RCC_OscConfig+0x6a0>
 80038e6:	e08d      	b.n	8003a04 <HAL_RCC_OscConfig+0x87c>
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800390a:	601a      	str	r2, [r3, #0]
  return result;
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003914:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <HAL_RCC_OscConfig+0x938>)
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	461a      	mov	r2, r3
 8003926:	2300      	movs	r3, #0
 8003928:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fd fdf7 	bl	800151c <HAL_GetTick>
 800392e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003932:	e00a      	b.n	800394a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003934:	f7fd fdf2 	bl	800151c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d902      	bls.n	800394a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	f000 bc55 	b.w	80041f4 <HAL_RCC_OscConfig+0x106c>
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003952:	2202      	movs	r2, #2
 8003954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f2a3 	rbit	r2, r3
 8003964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003968:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003976:	2202      	movs	r2, #2
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	fa93 f2a3 	rbit	r2, r3
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800399a:	2202      	movs	r2, #2
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	fa93 f2a3 	rbit	r2, r3
 80039ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 80039b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039c2:	2102      	movs	r1, #2
 80039c4:	6019      	str	r1, [r3, #0]
 80039c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f1a3 	rbit	r1, r3
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039dc:	6019      	str	r1, [r3, #0]
  return result;
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d197      	bne.n	8003934 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 81a1 	beq.w	8003d5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a20:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b23      	ldr	r3, [pc, #140]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	61d3      	str	r3, [r2, #28]
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_RCC_OscConfig+0x93c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11a      	bne.n	8003a9c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <HAL_RCC_OscConfig+0x93c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_RCC_OscConfig+0x93c>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a72:	f7fd fd53 	bl	800151c <HAL_GetTick>
 8003a76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	e009      	b.n	8003a90 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fd fd4e 	bl	800151c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b64      	cmp	r3, #100	; 0x64
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e3b1      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_OscConfig+0x93c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ef      	beq.n	8003a7c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x940>
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a02      	ldr	r2, [pc, #8]	; (8003abc <HAL_RCC_OscConfig+0x934>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	e03c      	b.n	8003b34 <HAL_RCC_OscConfig+0x9ac>
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	10908120 	.word	0x10908120
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10c      	bne.n	8003af2 <HAL_RCC_OscConfig+0x96a>
 8003ad8:	4bc1      	ldr	r3, [pc, #772]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4ac0      	ldr	r2, [pc, #768]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	6213      	str	r3, [r2, #32]
 8003ae4:	4bbe      	ldr	r3, [pc, #760]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4abd      	ldr	r2, [pc, #756]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003aea:	f023 0304 	bic.w	r3, r3, #4
 8003aee:	6213      	str	r3, [r2, #32]
 8003af0:	e020      	b.n	8003b34 <HAL_RCC_OscConfig+0x9ac>
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x994>
 8003b02:	4bb7      	ldr	r3, [pc, #732]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4ab6      	ldr	r2, [pc, #728]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	6213      	str	r3, [r2, #32]
 8003b0e:	4bb4      	ldr	r3, [pc, #720]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4ab3      	ldr	r2, [pc, #716]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6213      	str	r3, [r2, #32]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0x9ac>
 8003b1c:	4bb0      	ldr	r3, [pc, #704]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4aaf      	ldr	r2, [pc, #700]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6213      	str	r3, [r2, #32]
 8003b28:	4bad      	ldr	r3, [pc, #692]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4aac      	ldr	r2, [pc, #688]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003b2e:	f023 0304 	bic.w	r3, r3, #4
 8003b32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8081 	beq.w	8003c48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fd fce9 	bl	800151c <HAL_GetTick>
 8003b4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fd fce4 	bl	800151c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e345      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b70:	2202      	movs	r2, #2
 8003b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b94:	2202      	movs	r2, #2
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bae:	601a      	str	r2, [r3, #0]
  return result;
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xa4c>
 8003bce:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	e013      	b.n	8003bfc <HAL_RCC_OscConfig+0xa74>
 8003bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bdc:	2202      	movs	r2, #2
 8003bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	fa93 f2a3 	rbit	r2, r3
 8003bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c04:	2102      	movs	r1, #2
 8003c06:	6011      	str	r1, [r2, #0]
 8003c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	fa92 f1a2 	rbit	r1, r2
 8003c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c1a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c1e:	6011      	str	r1, [r2, #0]
  return result;
 8003c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c24:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	fab2 f282 	clz	r2, r2
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f002 021f 	and.w	r2, r2, #31
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d084      	beq.n	8003b50 <HAL_RCC_OscConfig+0x9c8>
 8003c46:	e07f      	b.n	8003d48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7fd fc68 	bl	800151c <HAL_GetTick>
 8003c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	e00b      	b.n	8003c6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd fc63 	bl	800151c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e2c4      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
 8003c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c72:	2202      	movs	r2, #2
 8003c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c96:	2202      	movs	r2, #2
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cb0:	601a      	str	r2, [r3, #0]
  return result;
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_OscConfig+0xb4e>
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	e013      	b.n	8003cfe <HAL_RCC_OscConfig+0xb76>
 8003cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cde:	2202      	movs	r2, #2
 8003ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	fa93 f2a3 	rbit	r2, r3
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d06:	2102      	movs	r1, #2
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	fa92 f1a2 	rbit	r1, r2
 8003d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d20:	6011      	str	r1, [r2, #0]
  return result;
 8003d22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d26:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	fab2 f282 	clz	r2, r2
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f002 021f 	and.w	r2, r2, #31
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d184      	bne.n	8003c52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8242 	beq.w	80041f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <HAL_RCC_OscConfig+0xc58>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	f000 8213 	beq.w	80041a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	f040 8162 	bne.w	8004052 <HAL_RCC_OscConfig+0xeca>
 8003d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d92:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003d96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f2a3 	rbit	r2, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003db2:	601a      	str	r2, [r3, #0]
  return result;
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003dbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fba2 	bl	800151c <HAL_GetTick>
 8003dd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ddc:	e00c      	b.n	8003df8 <HAL_RCC_OscConfig+0xc70>
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fb9a 	bl	800151c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e1fd      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
 8003df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	fa93 f2a3 	rbit	r2, r3
 8003e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e18:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e1c:	601a      	str	r2, [r3, #0]
  return result;
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_RCC_OscConfig+0xcba>
 8003e3c:	4bb0      	ldr	r3, [pc, #704]	; (8004100 <HAL_RCC_OscConfig+0xf78>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	e027      	b.n	8003e92 <HAL_RCC_OscConfig+0xd0a>
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	fa93 f2a3 	rbit	r2, r3
 8003e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e62:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	fa93 f2a3 	rbit	r2, r3
 8003e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	4b9c      	ldr	r3, [pc, #624]	; (8004100 <HAL_RCC_OscConfig+0xf78>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e96:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003e9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e9e:	6011      	str	r1, [r2, #0]
 8003ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ea4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	fa92 f1a2 	rbit	r1, r2
 8003eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003eb6:	6011      	str	r1, [r2, #0]
  return result;
 8003eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ebc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	fab2 f282 	clz	r2, r2
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f042 0220 	orr.w	r2, r2, #32
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f002 021f 	and.w	r2, r2, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d182      	bne.n	8003de4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ede:	4b88      	ldr	r3, [pc, #544]	; (8004100 <HAL_RCC_OscConfig+0xf78>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	430b      	orrs	r3, r1
 8003f00:	497f      	ldr	r1, [pc, #508]	; (8004100 <HAL_RCC_OscConfig+0xf78>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f18:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f2a:	601a      	str	r2, [r3, #0]
  return result;
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f34:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	461a      	mov	r2, r3
 8003f48:	2301      	movs	r3, #1
 8003f4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fae6 	bl	800151c <HAL_GetTick>
 8003f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f54:	e009      	b.n	8003f6a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fd fae1 	bl	800151c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e144      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f2a3 	rbit	r2, r3
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f8e:	601a      	str	r2, [r3, #0]
  return result;
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d102      	bne.n	8003fb4 <HAL_RCC_OscConfig+0xe2c>
 8003fae:	4b54      	ldr	r3, [pc, #336]	; (8004100 <HAL_RCC_OscConfig+0xf78>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	e027      	b.n	8004004 <HAL_RCC_OscConfig+0xe7c>
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	fa93 f2a3 	rbit	r2, r3
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fde:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fa93 f2a3 	rbit	r2, r3
 8003ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	4b3f      	ldr	r3, [pc, #252]	; (8004100 <HAL_RCC_OscConfig+0xf78>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004008:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800400c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004016:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	fa92 f1a2 	rbit	r1, r2
 8004020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004024:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004028:	6011      	str	r1, [r2, #0]
  return result;
 800402a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800402e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	fab2 f282 	clz	r2, r2
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	f042 0220 	orr.w	r2, r2, #32
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	f002 021f 	and.w	r2, r2, #31
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f202 	lsl.w	r2, r1, r2
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d082      	beq.n	8003f56 <HAL_RCC_OscConfig+0xdce>
 8004050:	e0cf      	b.n	80041f2 <HAL_RCC_OscConfig+0x106a>
 8004052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004056:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800405a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800405e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004064:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	fa93 f2a3 	rbit	r2, r3
 800406e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004072:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004076:	601a      	str	r2, [r3, #0]
  return result;
 8004078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004080:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800408c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	461a      	mov	r2, r3
 8004094:	2300      	movs	r3, #0
 8004096:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd fa40 	bl	800151c <HAL_GetTick>
 800409c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a0:	e009      	b.n	80040b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd fa3b 	bl	800151c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e09e      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	fa93 f2a3 	rbit	r2, r3
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040da:	601a      	str	r2, [r3, #0]
  return result;
 80040dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d104      	bne.n	8004104 <HAL_RCC_OscConfig+0xf7c>
 80040fa:	4b01      	ldr	r3, [pc, #4]	; (8004100 <HAL_RCC_OscConfig+0xf78>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	e029      	b.n	8004154 <HAL_RCC_OscConfig+0xfcc>
 8004100:	40021000 	.word	0x40021000
 8004104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004108:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800410c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004116:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	fa93 f2a3 	rbit	r2, r3
 8004120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004124:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	fa93 f2a3 	rbit	r2, r3
 8004146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCC_OscConfig+0x1078>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004158:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800415c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004160:	6011      	str	r1, [r2, #0]
 8004162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004166:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	fa92 f1a2 	rbit	r1, r2
 8004170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004174:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004178:	6011      	str	r1, [r2, #0]
  return result;
 800417a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800417e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	fab2 f282 	clz	r2, r2
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f042 0220 	orr.w	r2, r2, #32
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f002 021f 	and.w	r2, r2, #31
 8004194:	2101      	movs	r1, #1
 8004196:	fa01 f202 	lsl.w	r2, r1, r2
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d180      	bne.n	80040a2 <HAL_RCC_OscConfig+0xf1a>
 80041a0:	e027      	b.n	80041f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e01e      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_RCC_OscConfig+0x1078>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10b      	bne.n	80041ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80041d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40021000 	.word	0x40021000

08004204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b09e      	sub	sp, #120	; 0x78
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e162      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b90      	ldr	r3, [pc, #576]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d910      	bls.n	800424c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b8d      	ldr	r3, [pc, #564]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 0207 	bic.w	r2, r3, #7
 8004232:	498b      	ldr	r1, [pc, #556]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b89      	ldr	r3, [pc, #548]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e14a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b82      	ldr	r3, [pc, #520]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	497f      	ldr	r1, [pc, #508]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80dc 	beq.w	8004430 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d13c      	bne.n	80042fa <HAL_RCC_ClockConfig+0xf6>
 8004280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004284:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004290:	fab3 f383 	clz	r3, r3
 8004294:	b2db      	uxtb	r3, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d102      	bne.n	80042aa <HAL_RCC_ClockConfig+0xa6>
 80042a4:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	e00f      	b.n	80042ca <HAL_RCC_ClockConfig+0xc6>
 80042aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	667b      	str	r3, [r7, #100]	; 0x64
 80042b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042bc:	663b      	str	r3, [r7, #96]	; 0x60
 80042be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c6:	4b67      	ldr	r3, [pc, #412]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80042d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d2:	fa92 f2a2 	rbit	r2, r2
 80042d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80042d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042da:	fab2 f282 	clz	r2, r2
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f042 0220 	orr.w	r2, r2, #32
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f002 021f 	and.w	r2, r2, #31
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d17b      	bne.n	80043ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0f3      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d13c      	bne.n	800437c <HAL_RCC_ClockConfig+0x178>
 8004302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004306:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d102      	bne.n	800432c <HAL_RCC_ClockConfig+0x128>
 8004326:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	e00f      	b.n	800434c <HAL_RCC_ClockConfig+0x148>
 800432c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	643b      	str	r3, [r7, #64]	; 0x40
 8004340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004348:	4b46      	ldr	r3, [pc, #280]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004350:	63ba      	str	r2, [r7, #56]	; 0x38
 8004352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004354:	fa92 f2a2 	rbit	r2, r2
 8004358:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800435a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800435c:	fab2 f282 	clz	r2, r2
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f042 0220 	orr.w	r2, r2, #32
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	f002 021f 	and.w	r2, r2, #31
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d13a      	bne.n	80043ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b2      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
 800437c:	2302      	movs	r3, #2
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x1a0>
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	e00d      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1bc>
 80043a4:	2302      	movs	r3, #2
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	2302      	movs	r3, #2
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	4b29      	ldr	r3, [pc, #164]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2202      	movs	r2, #2
 80043c2:	61ba      	str	r2, [r7, #24]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	fa92 f2a2 	rbit	r2, r2
 80043ca:	617a      	str	r2, [r7, #20]
  return result;
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	fab2 f282 	clz	r2, r2
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	f042 0220 	orr.w	r2, r2, #32
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	f002 021f 	and.w	r2, r2, #31
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f202 	lsl.w	r2, r1, r2
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e079      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f023 0203 	bic.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	491a      	ldr	r1, [pc, #104]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004400:	f7fd f88c 	bl	800151c <HAL_GetTick>
 8004404:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	e00a      	b.n	800441e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004408:	f7fd f888 	bl	800151c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e061      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_RCC_ClockConfig+0x260>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 020c 	and.w	r2, r3, #12
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	429a      	cmp	r2, r3
 800442e:	d1eb      	bne.n	8004408 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d214      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 0207 	bic.w	r2, r3, #7
 8004446:	4906      	ldr	r1, [pc, #24]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_RCC_ClockConfig+0x25c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e040      	b.n	80044e2 <HAL_RCC_ClockConfig+0x2de>
 8004460:	40022000 	.word	0x40022000
 8004464:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	491a      	ldr	r1, [pc, #104]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004492:	4b16      	ldr	r3, [pc, #88]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4912      	ldr	r1, [pc, #72]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044a6:	f000 f829 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80044aa:	4601      	mov	r1, r0
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_RCC_ClockConfig+0x2e8>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b4:	22f0      	movs	r2, #240	; 0xf0
 80044b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	fa92 f2a2 	rbit	r2, r2
 80044be:	60fa      	str	r2, [r7, #12]
  return result;
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	fab2 f282 	clz	r2, r2
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	40d3      	lsrs	r3, r2
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <HAL_RCC_ClockConfig+0x2ec>)
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	fa21 f303 	lsr.w	r3, r1, r3
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_RCC_ClockConfig+0x2f0>)
 80044d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_ClockConfig+0x2f4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc ffda 	bl	8001494 <HAL_InitTick>
  
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3778      	adds	r7, #120	; 0x78
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08008464 	.word	0x08008464
 80044f4:	20000000 	.word	0x20000000
 80044f8:	20000004 	.word	0x20000004

080044fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b08b      	sub	sp, #44	; 0x2c
 8004500:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	2300      	movs	r3, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004516:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b04      	cmp	r3, #4
 8004524:	d002      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x30>
 8004526:	2b08      	cmp	r3, #8
 8004528:	d003      	beq.n	8004532 <HAL_RCC_GetSysClockFreq+0x36>
 800452a:	e03c      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800452e:	623b      	str	r3, [r7, #32]
      break;
 8004530:	e03c      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004538:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800453c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	fa92 f2a2 	rbit	r2, r2
 8004544:	607a      	str	r2, [r7, #4]
  return result;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	fab2 f282 	clz	r2, r2
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	40d3      	lsrs	r3, r2
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	220f      	movs	r2, #15
 8004560:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	fa92 f2a2 	rbit	r2, r2
 8004568:	60fa      	str	r2, [r7, #12]
  return result;
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	fab2 f282 	clz	r2, r2
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	40d3      	lsrs	r3, r2
 8004574:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004576:	5cd3      	ldrb	r3, [r2, r3]
 8004578:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004584:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
 8004594:	e004      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	623b      	str	r3, [r7, #32]
      break;
 80045a4:	e002      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045a8:	623b      	str	r3, [r7, #32]
      break;
 80045aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	372c      	adds	r7, #44	; 0x2c
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	0800847c 	.word	0x0800847c
 80045c8:	0800848c 	.word	0x0800848c
 80045cc:	003d0900 	.word	0x003d0900

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000000 	.word	0x20000000

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045ee:	f7ff ffef 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f2:	4601      	mov	r1, r0
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004600:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	fa92 f2a2 	rbit	r2, r2
 8004608:	603a      	str	r2, [r7, #0]
  return result;
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	fab2 f282 	clz	r2, r2
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	40d3      	lsrs	r3, r2
 8004614:	4a04      	ldr	r2, [pc, #16]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004616:	5cd3      	ldrb	r3, [r2, r3]
 8004618:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000
 8004628:	08008474 	.word	0x08008474

0800462c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004632:	f7ff ffcd 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 8004636:	4601      	mov	r1, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004640:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004644:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	fa92 f2a2 	rbit	r2, r2
 800464c:	603a      	str	r2, [r7, #0]
  return result;
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	fab2 f282 	clz	r2, r2
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	40d3      	lsrs	r3, r2
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <HAL_RCC_GetPCLK2Freq+0x40>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	08008474 	.word	0x08008474

08004670 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b092      	sub	sp, #72	; 0x48
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80d4 	beq.w	800483c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004694:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10e      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	61d3      	str	r3, [r2, #28]
 80046ac:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d118      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a41      	ldr	r2, [pc, #260]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fc ff21 	bl	800151c <HAL_GetTick>
 80046da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fc ff1d 	bl	800151c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	; 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e169      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8084 	beq.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004718:	429a      	cmp	r2, r3
 800471a:	d07c      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	461a      	mov	r2, r3
 8004746:	2301      	movs	r3, #1
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800474e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800475a:	fab3 f383 	clz	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04b      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fc fecd 	bl	800151c <HAL_GetTick>
 8004782:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fc fec9 	bl	800151c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e113      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800479c:	2302      	movs	r3, #2
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	2302      	movs	r3, #2
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	61fb      	str	r3, [r7, #28]
  return result;
 80047b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d108      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047ca:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	e00d      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	10908100 	.word	0x10908100
 80047dc:	2302      	movs	r3, #2
 80047de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	4b78      	ldr	r3, [pc, #480]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2202      	movs	r2, #2
 80047ee:	613a      	str	r2, [r7, #16]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	fa92 f2a2 	rbit	r2, r2
 80047f6:	60fa      	str	r2, [r7, #12]
  return result;
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	fab2 f282 	clz	r2, r2
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	f002 021f 	and.w	r2, r2, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0b7      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004816:	4b6d      	ldr	r3, [pc, #436]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	496a      	ldr	r1, [pc, #424]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b66      	ldr	r3, [pc, #408]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4a65      	ldr	r2, [pc, #404]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004848:	4b60      	ldr	r3, [pc, #384]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	f023 0203 	bic.w	r2, r3, #3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	495d      	ldr	r1, [pc, #372]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004866:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4956      	ldr	r1, [pc, #344]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004884:	4b51      	ldr	r3, [pc, #324]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	494e      	ldr	r1, [pc, #312]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004892:	4313      	orrs	r3, r2
 8004894:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a2:	4b4a      	ldr	r3, [pc, #296]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f023 0210 	bic.w	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4947      	ldr	r1, [pc, #284]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	493f      	ldr	r1, [pc, #252]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048de:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f023 0220 	bic.w	r2, r3, #32
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4938      	ldr	r1, [pc, #224]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048fc:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	4930      	ldr	r1, [pc, #192]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800491a:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	4929      	ldr	r1, [pc, #164]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004938:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4921      	ldr	r1, [pc, #132]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	491a      	ldr	r1, [pc, #104]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	4912      	ldr	r1, [pc, #72]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004992:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	490b      	ldr	r1, [pc, #44]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3748      	adds	r7, #72	; 0x48
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e049      	b.n	8004a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fb24 	bl	8001044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f000 fbe0 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d001      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e04a      	b.n	8004b2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d013      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <HAL_TIM_Base_Start_IT+0xc0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x6c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d115      	bne.n	8004b18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	d015      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0xaa>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b04:	d011      	beq.n	8004b2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	e008      	b.n	8004b2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	00010007 	.word	0x00010007

08004b54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e049      	b.n	8004bfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f841 	bl	8004c02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 fb1e 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x24>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e03c      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d109      	bne.n	8004c56 <HAL_TIM_PWM_Start+0x3e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	e02f      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d109      	bne.n	8004c70 <HAL_TIM_PWM_Start+0x58>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e022      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b0c      	cmp	r3, #12
 8004c74:	d109      	bne.n	8004c8a <HAL_TIM_PWM_Start+0x72>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e015      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d109      	bne.n	8004ca4 <HAL_TIM_PWM_Start+0x8c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e008      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x9e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e097      	b.n	8004dee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start+0xb6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ccc:	e023      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xc6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	e01b      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_PWM_Start+0xd6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cec:	e013      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0xe6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cfc:	e00b      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0xf6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	e003      	b.n	8004d16 <HAL_TIM_PWM_Start+0xfe>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fe58 	bl	80059d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <HAL_TIM_PWM_Start+0x1e0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x13e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a32      	ldr	r2, [pc, #200]	; (8004dfc <HAL_TIM_PWM_Start+0x1e4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x13e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a30      	ldr	r2, [pc, #192]	; (8004e00 <HAL_TIM_PWM_Start+0x1e8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x13e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2f      	ldr	r2, [pc, #188]	; (8004e04 <HAL_TIM_PWM_Start+0x1ec>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x13e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <HAL_TIM_PWM_Start+0x1f0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <HAL_TIM_PWM_Start+0x142>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_PWM_Start+0x144>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <HAL_TIM_PWM_Start+0x1e0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d018      	beq.n	8004dac <HAL_TIM_PWM_Start+0x194>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d013      	beq.n	8004dac <HAL_TIM_PWM_Start+0x194>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_TIM_PWM_Start+0x1f4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00e      	beq.n	8004dac <HAL_TIM_PWM_Start+0x194>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_TIM_PWM_Start+0x1f8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <HAL_TIM_PWM_Start+0x194>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <HAL_TIM_PWM_Start+0x1e4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_TIM_PWM_Start+0x194>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <HAL_TIM_PWM_Start+0x1e8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d115      	bne.n	8004dd8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_TIM_PWM_Start+0x1fc>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d015      	beq.n	8004dea <HAL_TIM_PWM_Start+0x1d2>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d011      	beq.n	8004dea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	e008      	b.n	8004dea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e000      	b.n	8004dec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	00010007 	.word	0x00010007

08004e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e0ff      	b.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b14      	cmp	r3, #20
 8004e42:	f200 80f0 	bhi.w	8005026 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08005027 	.word	0x08005027
 8004e54:	08005027 	.word	0x08005027
 8004e58:	08005027 	.word	0x08005027
 8004e5c:	08004ee1 	.word	0x08004ee1
 8004e60:	08005027 	.word	0x08005027
 8004e64:	08005027 	.word	0x08005027
 8004e68:	08005027 	.word	0x08005027
 8004e6c:	08004f23 	.word	0x08004f23
 8004e70:	08005027 	.word	0x08005027
 8004e74:	08005027 	.word	0x08005027
 8004e78:	08005027 	.word	0x08005027
 8004e7c:	08004f63 	.word	0x08004f63
 8004e80:	08005027 	.word	0x08005027
 8004e84:	08005027 	.word	0x08005027
 8004e88:	08005027 	.word	0x08005027
 8004e8c:	08004fa5 	.word	0x08004fa5
 8004e90:	08005027 	.word	0x08005027
 8004e94:	08005027 	.word	0x08005027
 8004e98:	08005027 	.word	0x08005027
 8004e9c:	08004fe5 	.word	0x08004fe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fa24 	bl	80052f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0208 	orr.w	r2, r2, #8
 8004eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0204 	bic.w	r2, r2, #4
 8004eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6999      	ldr	r1, [r3, #24]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	619a      	str	r2, [r3, #24]
      break;
 8004ede:	e0a5      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fa94 	bl	8005414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	021a      	lsls	r2, r3, #8
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	619a      	str	r2, [r3, #24]
      break;
 8004f20:	e084      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fafd 	bl	8005528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0208 	orr.w	r2, r2, #8
 8004f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0204 	bic.w	r2, r2, #4
 8004f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69d9      	ldr	r1, [r3, #28]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	61da      	str	r2, [r3, #28]
      break;
 8004f60:	e064      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fb65 	bl	8005638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69d9      	ldr	r1, [r3, #28]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	021a      	lsls	r2, r3, #8
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	61da      	str	r2, [r3, #28]
      break;
 8004fa2:	e043      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fbae 	bl	800570c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0208 	orr.w	r2, r2, #8
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0204 	bic.w	r2, r2, #4
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fe2:	e023      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fbf2 	bl	80057d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005024:	e002      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
      break;
 800502a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005034:	7dfb      	ldrb	r3, [r7, #23]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop

08005040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIM_ConfigClockSource+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e0b6      	b.n	80051ca <HAL_TIM_ConfigClockSource+0x18a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800507e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005098:	d03e      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0xd8>
 800509a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509e:	f200 8087 	bhi.w	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a6:	f000 8086 	beq.w	80051b6 <HAL_TIM_ConfigClockSource+0x176>
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ae:	d87f      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050b0:	2b70      	cmp	r3, #112	; 0x70
 80050b2:	d01a      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xaa>
 80050b4:	2b70      	cmp	r3, #112	; 0x70
 80050b6:	d87b      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050b8:	2b60      	cmp	r3, #96	; 0x60
 80050ba:	d050      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x11e>
 80050bc:	2b60      	cmp	r3, #96	; 0x60
 80050be:	d877      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050c0:	2b50      	cmp	r3, #80	; 0x50
 80050c2:	d03c      	beq.n	800513e <HAL_TIM_ConfigClockSource+0xfe>
 80050c4:	2b50      	cmp	r3, #80	; 0x50
 80050c6:	d873      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d058      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x13e>
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d86f      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050d0:	2b30      	cmp	r3, #48	; 0x30
 80050d2:	d064      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15e>
 80050d4:	2b30      	cmp	r3, #48	; 0x30
 80050d6:	d86b      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d060      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15e>
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d867      	bhi.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d05c      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15e>
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d05a      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x15e>
 80050e8:	e062      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6899      	ldr	r1, [r3, #8]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f000 fc4b 	bl	8005994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800510c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	609a      	str	r2, [r3, #8]
      break;
 8005116:	e04f      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f000 fc34 	bl	8005994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800513a:	609a      	str	r2, [r3, #8]
      break;
 800513c:	e03c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6859      	ldr	r1, [r3, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	461a      	mov	r2, r3
 800514c:	f000 fba8 	bl	80058a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2150      	movs	r1, #80	; 0x50
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fc01 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 800515c:	e02c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	461a      	mov	r2, r3
 800516c:	f000 fbc7 	bl	80058fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2160      	movs	r1, #96	; 0x60
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fbf1 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 800517c:	e01c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6859      	ldr	r1, [r3, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	461a      	mov	r2, r3
 800518c:	f000 fb88 	bl	80058a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2140      	movs	r1, #64	; 0x40
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fbe1 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 800519c:	e00c      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4619      	mov	r1, r3
 80051a8:	4610      	mov	r0, r2
 80051aa:	f000 fbd8 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 80051ae:	e003      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e000      	b.n	80051b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80051b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3c      	ldr	r2, [pc, #240]	; (80052d8 <TIM_Base_SetConfig+0x104>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00f      	beq.n	800520c <TIM_Base_SetConfig+0x38>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d00b      	beq.n	800520c <TIM_Base_SetConfig+0x38>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a39      	ldr	r2, [pc, #228]	; (80052dc <TIM_Base_SetConfig+0x108>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_Base_SetConfig+0x38>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <TIM_Base_SetConfig+0x10c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_Base_SetConfig+0x38>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <TIM_Base_SetConfig+0x110>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d108      	bne.n	800521e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2d      	ldr	r2, [pc, #180]	; (80052d8 <TIM_Base_SetConfig+0x104>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01b      	beq.n	800525e <TIM_Base_SetConfig+0x8a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522c:	d017      	beq.n	800525e <TIM_Base_SetConfig+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_Base_SetConfig+0x108>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <TIM_Base_SetConfig+0x8a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <TIM_Base_SetConfig+0x10c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_Base_SetConfig+0x8a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <TIM_Base_SetConfig+0x110>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0x8a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0x8a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <TIM_Base_SetConfig+0x118>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d108      	bne.n	8005270 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <TIM_Base_SetConfig+0x104>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0xe8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <TIM_Base_SetConfig+0x110>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0xe8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0xe8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0f      	ldr	r2, [pc, #60]	; (80052ec <TIM_Base_SetConfig+0x118>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0xe8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a0e      	ldr	r2, [pc, #56]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d103      	bne.n	80052c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	615a      	str	r2, [r3, #20]
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400
 80052f0:	40014800 	.word	0x40014800

080052f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 0302 	bic.w	r3, r3, #2
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <TIM_OC1_SetConfig+0x10c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00f      	beq.n	8005374 <TIM_OC1_SetConfig+0x80>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a2b      	ldr	r2, [pc, #172]	; (8005404 <TIM_OC1_SetConfig+0x110>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_OC1_SetConfig+0x80>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <TIM_OC1_SetConfig+0x114>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_OC1_SetConfig+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a29      	ldr	r2, [pc, #164]	; (800540c <TIM_OC1_SetConfig+0x118>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC1_SetConfig+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a28      	ldr	r2, [pc, #160]	; (8005410 <TIM_OC1_SetConfig+0x11c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10c      	bne.n	800538e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0308 	bic.w	r3, r3, #8
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <TIM_OC1_SetConfig+0x10c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00f      	beq.n	80053b6 <TIM_OC1_SetConfig+0xc2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <TIM_OC1_SetConfig+0x110>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00b      	beq.n	80053b6 <TIM_OC1_SetConfig+0xc2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <TIM_OC1_SetConfig+0x114>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <TIM_OC1_SetConfig+0xc2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a18      	ldr	r2, [pc, #96]	; (800540c <TIM_OC1_SetConfig+0x118>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC1_SetConfig+0xc2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <TIM_OC1_SetConfig+0x11c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d111      	bne.n	80053da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40013400 	.word	0x40013400
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f023 0210 	bic.w	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a28      	ldr	r2, [pc, #160]	; (8005514 <TIM_OC2_SetConfig+0x100>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC2_SetConfig+0x6c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a27      	ldr	r2, [pc, #156]	; (8005518 <TIM_OC2_SetConfig+0x104>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10d      	bne.n	800549c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <TIM_OC2_SetConfig+0x100>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00f      	beq.n	80054c4 <TIM_OC2_SetConfig+0xb0>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <TIM_OC2_SetConfig+0x104>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <TIM_OC2_SetConfig+0xb0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <TIM_OC2_SetConfig+0x108>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_OC2_SetConfig+0xb0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <TIM_OC2_SetConfig+0x10c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC2_SetConfig+0xb0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a19      	ldr	r2, [pc, #100]	; (8005524 <TIM_OC2_SetConfig+0x110>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d113      	bne.n	80054ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a27      	ldr	r2, [pc, #156]	; (8005624 <TIM_OC3_SetConfig+0xfc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_OC3_SetConfig+0x6a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a26      	ldr	r2, [pc, #152]	; (8005628 <TIM_OC3_SetConfig+0x100>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d10d      	bne.n	80055ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <TIM_OC3_SetConfig+0xfc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00f      	beq.n	80055d6 <TIM_OC3_SetConfig+0xae>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <TIM_OC3_SetConfig+0x100>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00b      	beq.n	80055d6 <TIM_OC3_SetConfig+0xae>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1a      	ldr	r2, [pc, #104]	; (800562c <TIM_OC3_SetConfig+0x104>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d007      	beq.n	80055d6 <TIM_OC3_SetConfig+0xae>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a19      	ldr	r2, [pc, #100]	; (8005630 <TIM_OC3_SetConfig+0x108>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <TIM_OC3_SetConfig+0xae>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a18      	ldr	r2, [pc, #96]	; (8005634 <TIM_OC3_SetConfig+0x10c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d113      	bne.n	80055fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	621a      	str	r2, [r3, #32]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <TIM_OC4_SetConfig+0xc0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <TIM_OC4_SetConfig+0x84>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <TIM_OC4_SetConfig+0xc4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_OC4_SetConfig+0x84>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a16      	ldr	r2, [pc, #88]	; (8005700 <TIM_OC4_SetConfig+0xc8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_OC4_SetConfig+0x84>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <TIM_OC4_SetConfig+0xcc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC4_SetConfig+0x84>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a14      	ldr	r2, [pc, #80]	; (8005708 <TIM_OC4_SetConfig+0xd0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	019b      	lsls	r3, r3, #6
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40013400 	.word	0x40013400
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800

0800570c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <TIM_OC5_SetConfig+0xb4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00f      	beq.n	8005786 <TIM_OC5_SetConfig+0x7a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <TIM_OC5_SetConfig+0xb8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_OC5_SetConfig+0x7a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <TIM_OC5_SetConfig+0xbc>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_OC5_SetConfig+0x7a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <TIM_OC5_SetConfig+0xc0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_OC5_SetConfig+0x7a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <TIM_OC5_SetConfig+0xc4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d109      	bne.n	800579a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40013400 	.word	0x40013400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800

080057d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800581a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	051b      	lsls	r3, r3, #20
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a18      	ldr	r2, [pc, #96]	; (800588c <TIM_OC6_SetConfig+0xb8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00f      	beq.n	8005850 <TIM_OC6_SetConfig+0x7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a17      	ldr	r2, [pc, #92]	; (8005890 <TIM_OC6_SetConfig+0xbc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_OC6_SetConfig+0x7c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <TIM_OC6_SetConfig+0xc0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_OC6_SetConfig+0x7c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a15      	ldr	r2, [pc, #84]	; (8005898 <TIM_OC6_SetConfig+0xc4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC6_SetConfig+0x7c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a14      	ldr	r2, [pc, #80]	; (800589c <TIM_OC6_SetConfig+0xc8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d109      	bne.n	8005864 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005856:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800

080058a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f023 0201 	bic.w	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f023 030a 	bic.w	r3, r3, #10
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058fe:	b480      	push	{r7}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0210 	bic.w	r2, r3, #16
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	031b      	lsls	r3, r3, #12
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800593a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	f043 0307 	orr.w	r3, r3, #7
 8005980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	021a      	lsls	r2, r3, #8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2201      	movs	r2, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	401a      	ands	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e063      	b.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d013      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a18      	ldr	r2, [pc, #96]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a12      	ldr	r2, [pc, #72]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10c      	bne.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40014000 	.word	0x40014000

08005b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e065      	b.n	8005c08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d115      	bne.n	8005bf6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	051b      	lsls	r3, r3, #20
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40013400 	.word	0x40013400

08005c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e040      	b.n	8005cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb fa92 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2224      	movs	r2, #36	; 0x24
 8005c48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fc72 	bl	8006544 <UART_SetConfig>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e022      	b.n	8005cb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fe3a 	bl	80068ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fec1 	bl	8006a30 <UART_CheckIdleState>
 8005cae:	4603      	mov	r3, r0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d178      	bne.n	8005dc2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_UART_Transmit+0x24>
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e071      	b.n	8005dc4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2221      	movs	r2, #33	; 0x21
 8005cec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cee:	f7fb fc15 	bl	800151c <HAL_GetTick>
 8005cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0c:	d108      	bne.n	8005d20 <HAL_UART_Transmit+0x68>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e003      	b.n	8005d28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d28:	e030      	b.n	8005d8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2200      	movs	r2, #0
 8005d32:	2180      	movs	r1, #128	; 0x80
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 ff23 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e03c      	b.n	8005dc4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	881a      	ldrh	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	3302      	adds	r3, #2
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e008      	b.n	8005d7a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	781a      	ldrb	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	b292      	uxth	r2, r2
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3301      	adds	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1c8      	bne.n	8005d2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2140      	movs	r1, #64	; 0x40
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 feec 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e005      	b.n	8005dc4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
  }
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	f040 80a3 	bne.w	8005f2e <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_UART_Receive+0x28>
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e09b      	b.n	8005f30 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2222      	movs	r2, #34	; 0x22
 8005e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e0e:	f7fb fb85 	bl	800151c <HAL_GetTick>
 8005e12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2c:	d10e      	bne.n	8005e4c <HAL_UART_Receive+0x80>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_UART_Receive+0x76>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e40:	e01a      	b.n	8005e78 <HAL_UART_Receive+0xac>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e4a:	e015      	b.n	8005e78 <HAL_UART_Receive+0xac>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10d      	bne.n	8005e70 <HAL_UART_Receive+0xa4>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <HAL_UART_Receive+0x9a>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	22ff      	movs	r2, #255	; 0xff
 8005e60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e64:	e008      	b.n	8005e78 <HAL_UART_Receive+0xac>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	227f      	movs	r2, #127	; 0x7f
 8005e6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e6e:	e003      	b.n	8005e78 <HAL_UART_Receive+0xac>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e7e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d108      	bne.n	8005e9c <HAL_UART_Receive+0xd0>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e003      	b.n	8005ea4 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ea4:	e037      	b.n	8005f16 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2120      	movs	r1, #32
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fe65 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e033      	b.n	8005f30 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	8a7b      	ldrh	r3, [r7, #18]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e00d      	b.n	8005f04 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	8a7b      	ldrh	r3, [r7, #18]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1c1      	bne.n	8005ea6 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
  }
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b0ba      	sub	sp, #232	; 0xe8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f62:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f66:	4013      	ands	r3, r2
 8005f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d115      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00f      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 82ab 	beq.w	80064ec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
      }
      return;
 8005f9e:	e2a5      	b.n	80064ec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8117 	beq.w	80061d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005fb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fba:	4b85      	ldr	r3, [pc, #532]	; (80061d0 <HAL_UART_IRQHandler+0x298>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 810a 	beq.w	80061d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <HAL_UART_IRQHandler+0xbc>
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fea:	f043 0201 	orr.w	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d011      	beq.n	8006024 <HAL_UART_IRQHandler+0xec>
 8006000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2202      	movs	r2, #2
 8006012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601a:	f043 0204 	orr.w	r2, r3, #4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d011      	beq.n	8006054 <HAL_UART_IRQHandler+0x11c>
 8006030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00b      	beq.n	8006054 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2204      	movs	r2, #4
 8006042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800604a:	f043 0202 	orr.w	r2, r3, #2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d017      	beq.n	8006090 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d105      	bne.n	8006078 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800606c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006070:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2208      	movs	r2, #8
 800607e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006086:	f043 0208 	orr.w	r2, r3, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006098:	2b00      	cmp	r3, #0
 800609a:	d012      	beq.n	80060c2 <HAL_UART_IRQHandler+0x18a>
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00c      	beq.n	80060c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b8:	f043 0220 	orr.w	r2, r3, #32
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 8211 	beq.w	80064f0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00d      	beq.n	80060f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d005      	beq.n	800611a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800610e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006112:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006116:	2b00      	cmp	r3, #0
 8006118:	d04f      	beq.n	80061ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fd97 	bl	8006c4e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d141      	bne.n	80061b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3308      	adds	r3, #8
 8006134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800615a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800615e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1d9      	bne.n	800612e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	2b00      	cmp	r3, #0
 8006180:	d013      	beq.n	80061aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	4a13      	ldr	r2, [pc, #76]	; (80061d4 <HAL_UART_IRQHandler+0x29c>)
 8006188:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618e:	4618      	mov	r0, r3
 8006190:	f7fc fc6a 	bl	8002a68 <HAL_DMA_Abort_IT>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d017      	beq.n	80061ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061a4:	4610      	mov	r0, r2
 80061a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	e00f      	b.n	80061ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f9b4 	bl	8006518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	e00b      	b.n	80061ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f9b0 	bl	8006518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	e007      	b.n	80061ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9ac 	bl	8006518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80061c8:	e192      	b.n	80064f0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ca:	bf00      	nop
    return;
 80061cc:	e190      	b.n	80064f0 <HAL_UART_IRQHandler+0x5b8>
 80061ce:	bf00      	nop
 80061d0:	04000120 	.word	0x04000120
 80061d4:	08006d17 	.word	0x08006d17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061dc:	2b01      	cmp	r3, #1
 80061de:	f040 814b 	bne.w	8006478 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8144 	beq.w	8006478 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 813d 	beq.w	8006478 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2210      	movs	r2, #16
 8006204:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	f040 80b5 	bne.w	8006380 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006222:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8164 	beq.w	80064f4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006236:	429a      	cmp	r2, r3
 8006238:	f080 815c 	bcs.w	80064f4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2b20      	cmp	r3, #32
 800624e:	f000 8086 	beq.w	800635e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800626a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800626e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800627c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006280:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006288:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006294:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1da      	bne.n	8006252 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3308      	adds	r3, #8
 80062bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e1      	bne.n	800629c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3308      	adds	r3, #8
 80062de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006302:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800630a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e3      	bne.n	80062d8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800632c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006340:	65bb      	str	r3, [r7, #88]	; 0x58
 8006342:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006346:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800634e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e4      	bne.n	800631e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006358:	4618      	mov	r0, r3
 800635a:	f7fc fb4c 	bl	80029f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006370:	b29b      	uxth	r3, r3
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	b29b      	uxth	r3, r3
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f8d7 	bl	800652c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800637e:	e0b9      	b.n	80064f4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800638c:	b29b      	uxth	r3, r3
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80ab 	beq.w	80064f8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80063a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 80a6 	beq.w	80064f8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ce:	647b      	str	r3, [r7, #68]	; 0x44
 80063d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e4      	bne.n	80063ac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3308      	adds	r3, #8
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	623b      	str	r3, [r7, #32]
   return(result);
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006406:	633a      	str	r2, [r7, #48]	; 0x30
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800640c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e3      	bne.n	80063e2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60fb      	str	r3, [r7, #12]
   return(result);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	69b9      	ldr	r1, [r7, #24]
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	617b      	str	r3, [r7, #20]
   return(result);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e4      	bne.n	800642e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800646a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f85b 	bl	800652c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006476:	e03f      	b.n	80064f8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <HAL_UART_IRQHandler+0x56a>
 8006484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fc7b 	bl	8006d96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064a0:	e02d      	b.n	80064fe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01c      	beq.n	80064fc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
    }
    return;
 80064ca:	e017      	b.n	80064fc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d012      	beq.n	80064fe <HAL_UART_IRQHandler+0x5c6>
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fc2c 	bl	8006d42 <UART_EndTransmit_IT>
    return;
 80064ea:	e008      	b.n	80064fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80064ec:	bf00      	nop
 80064ee:	e006      	b.n	80064fe <HAL_UART_IRQHandler+0x5c6>
    return;
 80064f0:	bf00      	nop
 80064f2:	e004      	b.n	80064fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80064f4:	bf00      	nop
 80064f6:	e002      	b.n	80064fe <HAL_UART_IRQHandler+0x5c6>
      return;
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <HAL_UART_IRQHandler+0x5c6>
    return;
 80064fc:	bf00      	nop
  }

}
 80064fe:	37e8      	adds	r7, #232	; 0xe8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006572:	f023 030c 	bic.w	r3, r3, #12
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	6979      	ldr	r1, [r7, #20]
 800657c:	430b      	orrs	r3, r1
 800657e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4aa7      	ldr	r2, [pc, #668]	; (800685c <UART_SetConfig+0x318>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d120      	bne.n	8006606 <UART_SetConfig+0xc2>
 80065c4:	4ba6      	ldr	r3, [pc, #664]	; (8006860 <UART_SetConfig+0x31c>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d817      	bhi.n	8006600 <UART_SetConfig+0xbc>
 80065d0:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <UART_SetConfig+0x94>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065f5 	.word	0x080065f5
 80065e0:	080065fb 	.word	0x080065fb
 80065e4:	080065ef 	.word	0x080065ef
 80065e8:	2301      	movs	r3, #1
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e0b5      	b.n	800675a <UART_SetConfig+0x216>
 80065ee:	2302      	movs	r3, #2
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e0b2      	b.n	800675a <UART_SetConfig+0x216>
 80065f4:	2304      	movs	r3, #4
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e0af      	b.n	800675a <UART_SetConfig+0x216>
 80065fa:	2308      	movs	r3, #8
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e0ac      	b.n	800675a <UART_SetConfig+0x216>
 8006600:	2310      	movs	r3, #16
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e0a9      	b.n	800675a <UART_SetConfig+0x216>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a96      	ldr	r2, [pc, #600]	; (8006864 <UART_SetConfig+0x320>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d124      	bne.n	800665a <UART_SetConfig+0x116>
 8006610:	4b93      	ldr	r3, [pc, #588]	; (8006860 <UART_SetConfig+0x31c>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800661c:	d011      	beq.n	8006642 <UART_SetConfig+0xfe>
 800661e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006622:	d817      	bhi.n	8006654 <UART_SetConfig+0x110>
 8006624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006628:	d011      	beq.n	800664e <UART_SetConfig+0x10a>
 800662a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662e:	d811      	bhi.n	8006654 <UART_SetConfig+0x110>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <UART_SetConfig+0xf8>
 8006634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006638:	d006      	beq.n	8006648 <UART_SetConfig+0x104>
 800663a:	e00b      	b.n	8006654 <UART_SetConfig+0x110>
 800663c:	2300      	movs	r3, #0
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e08b      	b.n	800675a <UART_SetConfig+0x216>
 8006642:	2302      	movs	r3, #2
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e088      	b.n	800675a <UART_SetConfig+0x216>
 8006648:	2304      	movs	r3, #4
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e085      	b.n	800675a <UART_SetConfig+0x216>
 800664e:	2308      	movs	r3, #8
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e082      	b.n	800675a <UART_SetConfig+0x216>
 8006654:	2310      	movs	r3, #16
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e07f      	b.n	800675a <UART_SetConfig+0x216>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a82      	ldr	r2, [pc, #520]	; (8006868 <UART_SetConfig+0x324>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d124      	bne.n	80066ae <UART_SetConfig+0x16a>
 8006664:	4b7e      	ldr	r3, [pc, #504]	; (8006860 <UART_SetConfig+0x31c>)
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800666c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006670:	d011      	beq.n	8006696 <UART_SetConfig+0x152>
 8006672:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006676:	d817      	bhi.n	80066a8 <UART_SetConfig+0x164>
 8006678:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800667c:	d011      	beq.n	80066a2 <UART_SetConfig+0x15e>
 800667e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006682:	d811      	bhi.n	80066a8 <UART_SetConfig+0x164>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <UART_SetConfig+0x14c>
 8006688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800668c:	d006      	beq.n	800669c <UART_SetConfig+0x158>
 800668e:	e00b      	b.n	80066a8 <UART_SetConfig+0x164>
 8006690:	2300      	movs	r3, #0
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e061      	b.n	800675a <UART_SetConfig+0x216>
 8006696:	2302      	movs	r3, #2
 8006698:	77fb      	strb	r3, [r7, #31]
 800669a:	e05e      	b.n	800675a <UART_SetConfig+0x216>
 800669c:	2304      	movs	r3, #4
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e05b      	b.n	800675a <UART_SetConfig+0x216>
 80066a2:	2308      	movs	r3, #8
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e058      	b.n	800675a <UART_SetConfig+0x216>
 80066a8:	2310      	movs	r3, #16
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e055      	b.n	800675a <UART_SetConfig+0x216>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a6e      	ldr	r2, [pc, #440]	; (800686c <UART_SetConfig+0x328>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d124      	bne.n	8006702 <UART_SetConfig+0x1be>
 80066b8:	4b69      	ldr	r3, [pc, #420]	; (8006860 <UART_SetConfig+0x31c>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80066c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c4:	d011      	beq.n	80066ea <UART_SetConfig+0x1a6>
 80066c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066ca:	d817      	bhi.n	80066fc <UART_SetConfig+0x1b8>
 80066cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d0:	d011      	beq.n	80066f6 <UART_SetConfig+0x1b2>
 80066d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d6:	d811      	bhi.n	80066fc <UART_SetConfig+0x1b8>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <UART_SetConfig+0x1a0>
 80066dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e0:	d006      	beq.n	80066f0 <UART_SetConfig+0x1ac>
 80066e2:	e00b      	b.n	80066fc <UART_SetConfig+0x1b8>
 80066e4:	2300      	movs	r3, #0
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e037      	b.n	800675a <UART_SetConfig+0x216>
 80066ea:	2302      	movs	r3, #2
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e034      	b.n	800675a <UART_SetConfig+0x216>
 80066f0:	2304      	movs	r3, #4
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e031      	b.n	800675a <UART_SetConfig+0x216>
 80066f6:	2308      	movs	r3, #8
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e02e      	b.n	800675a <UART_SetConfig+0x216>
 80066fc:	2310      	movs	r3, #16
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e02b      	b.n	800675a <UART_SetConfig+0x216>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a5a      	ldr	r2, [pc, #360]	; (8006870 <UART_SetConfig+0x32c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d124      	bne.n	8006756 <UART_SetConfig+0x212>
 800670c:	4b54      	ldr	r3, [pc, #336]	; (8006860 <UART_SetConfig+0x31c>)
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006714:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006718:	d011      	beq.n	800673e <UART_SetConfig+0x1fa>
 800671a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800671e:	d817      	bhi.n	8006750 <UART_SetConfig+0x20c>
 8006720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006724:	d011      	beq.n	800674a <UART_SetConfig+0x206>
 8006726:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800672a:	d811      	bhi.n	8006750 <UART_SetConfig+0x20c>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <UART_SetConfig+0x1f4>
 8006730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006734:	d006      	beq.n	8006744 <UART_SetConfig+0x200>
 8006736:	e00b      	b.n	8006750 <UART_SetConfig+0x20c>
 8006738:	2300      	movs	r3, #0
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e00d      	b.n	800675a <UART_SetConfig+0x216>
 800673e:	2302      	movs	r3, #2
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e00a      	b.n	800675a <UART_SetConfig+0x216>
 8006744:	2304      	movs	r3, #4
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e007      	b.n	800675a <UART_SetConfig+0x216>
 800674a:	2308      	movs	r3, #8
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e004      	b.n	800675a <UART_SetConfig+0x216>
 8006750:	2310      	movs	r3, #16
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e001      	b.n	800675a <UART_SetConfig+0x216>
 8006756:	2310      	movs	r3, #16
 8006758:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006762:	d15b      	bne.n	800681c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006764:	7ffb      	ldrb	r3, [r7, #31]
 8006766:	2b08      	cmp	r3, #8
 8006768:	d827      	bhi.n	80067ba <UART_SetConfig+0x276>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <UART_SetConfig+0x22c>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006795 	.word	0x08006795
 8006774:	0800679d 	.word	0x0800679d
 8006778:	080067a5 	.word	0x080067a5
 800677c:	080067bb 	.word	0x080067bb
 8006780:	080067ab 	.word	0x080067ab
 8006784:	080067bb 	.word	0x080067bb
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067bb 	.word	0x080067bb
 8006790:	080067b3 	.word	0x080067b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006794:	f7fd ff28 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006798:	61b8      	str	r0, [r7, #24]
        break;
 800679a:	e013      	b.n	80067c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800679c:	f7fd ff46 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 80067a0:	61b8      	str	r0, [r7, #24]
        break;
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a4:	4b33      	ldr	r3, [pc, #204]	; (8006874 <UART_SetConfig+0x330>)
 80067a6:	61bb      	str	r3, [r7, #24]
        break;
 80067a8:	e00c      	b.n	80067c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067aa:	f7fd fea7 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80067ae:	61b8      	str	r0, [r7, #24]
        break;
 80067b0:	e008      	b.n	80067c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b6:	61bb      	str	r3, [r7, #24]
        break;
 80067b8:	e004      	b.n	80067c4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	77bb      	strb	r3, [r7, #30]
        break;
 80067c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8082 	beq.w	80068d0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	005a      	lsls	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	441a      	add	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b0f      	cmp	r3, #15
 80067e6:	d916      	bls.n	8006816 <UART_SetConfig+0x2d2>
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ee:	d212      	bcs.n	8006816 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f023 030f 	bic.w	r3, r3, #15
 80067f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	b29a      	uxth	r2, r3
 8006806:	89fb      	ldrh	r3, [r7, #14]
 8006808:	4313      	orrs	r3, r2
 800680a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	89fa      	ldrh	r2, [r7, #14]
 8006812:	60da      	str	r2, [r3, #12]
 8006814:	e05c      	b.n	80068d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	77bb      	strb	r3, [r7, #30]
 800681a:	e059      	b.n	80068d0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800681c:	7ffb      	ldrb	r3, [r7, #31]
 800681e:	2b08      	cmp	r3, #8
 8006820:	d835      	bhi.n	800688e <UART_SetConfig+0x34a>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <UART_SetConfig+0x2e4>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006855 	.word	0x08006855
 8006830:	08006879 	.word	0x08006879
 8006834:	0800688f 	.word	0x0800688f
 8006838:	0800687f 	.word	0x0800687f
 800683c:	0800688f 	.word	0x0800688f
 8006840:	0800688f 	.word	0x0800688f
 8006844:	0800688f 	.word	0x0800688f
 8006848:	08006887 	.word	0x08006887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800684c:	f7fd fecc 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006850:	61b8      	str	r0, [r7, #24]
        break;
 8006852:	e021      	b.n	8006898 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fd feea 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8006858:	61b8      	str	r0, [r7, #24]
        break;
 800685a:	e01d      	b.n	8006898 <UART_SetConfig+0x354>
 800685c:	40013800 	.word	0x40013800
 8006860:	40021000 	.word	0x40021000
 8006864:	40004400 	.word	0x40004400
 8006868:	40004800 	.word	0x40004800
 800686c:	40004c00 	.word	0x40004c00
 8006870:	40005000 	.word	0x40005000
 8006874:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006878:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <UART_SetConfig+0x3a4>)
 800687a:	61bb      	str	r3, [r7, #24]
        break;
 800687c:	e00c      	b.n	8006898 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800687e:	f7fd fe3d 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8006882:	61b8      	str	r0, [r7, #24]
        break;
 8006884:	e008      	b.n	8006898 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688a:	61bb      	str	r3, [r7, #24]
        break;
 800688c:	e004      	b.n	8006898 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	77bb      	strb	r3, [r7, #30]
        break;
 8006896:	bf00      	nop
    }

    if (pclk != 0U)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	085a      	lsrs	r2, r3, #1
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	441a      	add	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b0f      	cmp	r3, #15
 80068b6:	d909      	bls.n	80068cc <UART_SetConfig+0x388>
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068be:	d205      	bcs.n	80068cc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	e001      	b.n	80068d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	007a1200 	.word	0x007a1200

080068ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01a      	beq.n	8006a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ea:	d10a      	bne.n	8006a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  }
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b098      	sub	sp, #96	; 0x60
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a40:	f7fa fd6c 	bl	800151c <HAL_GetTick>
 8006a44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d12e      	bne.n	8006ab2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f88c 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d021      	beq.n	8006ab2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a82:	653b      	str	r3, [r7, #80]	; 0x50
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e6      	bne.n	8006a6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e062      	b.n	8006b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d149      	bne.n	8006b54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f856 	bl	8006b80 <UART_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03c      	beq.n	8006b54 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af8:	633b      	str	r3, [r7, #48]	; 0x30
 8006afa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e6      	bne.n	8006ada <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2c:	61fa      	str	r2, [r7, #28]
 8006b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	69b9      	ldr	r1, [r7, #24]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	617b      	str	r3, [r7, #20]
   return(result);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e011      	b.n	8006b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3758      	adds	r7, #88	; 0x58
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b90:	e049      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d045      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9a:	f7fa fcbf 	bl	800151c <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d302      	bcc.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e048      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d031      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d110      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f838 	bl	8006c4e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2208      	movs	r2, #8
 8006be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e029      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c00:	d111      	bne.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f81e 	bl	8006c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e00f      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	bf0c      	ite	eq
 8006c36:	2301      	moveq	r3, #1
 8006c38:	2300      	movne	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d0a6      	beq.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b095      	sub	sp, #84	; 0x54
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
 8006c76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e6      	bne.n	8006c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ca8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e5      	bne.n	8006c88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d118      	bne.n	8006cf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 0310 	bic.w	r3, r3, #16
 8006cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6979      	ldr	r1, [r7, #20]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e6      	bne.n	8006cc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d0a:	bf00      	nop
 8006d0c:	3754      	adds	r7, #84	; 0x54
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff fbef 	bl	8006518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b088      	sub	sp, #32
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6979      	ldr	r1, [r7, #20]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	613b      	str	r3, [r7, #16]
   return(result);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fbbb 	bl	8006504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d8e:	bf00      	nop
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <__errno>:
 8006dac:	4b01      	ldr	r3, [pc, #4]	; (8006db4 <__errno+0x8>)
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	2000000c 	.word	0x2000000c

08006db8 <__libc_init_array>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4d0d      	ldr	r5, [pc, #52]	; (8006df0 <__libc_init_array+0x38>)
 8006dbc:	4c0d      	ldr	r4, [pc, #52]	; (8006df4 <__libc_init_array+0x3c>)
 8006dbe:	1b64      	subs	r4, r4, r5
 8006dc0:	10a4      	asrs	r4, r4, #2
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	42a6      	cmp	r6, r4
 8006dc6:	d109      	bne.n	8006ddc <__libc_init_array+0x24>
 8006dc8:	4d0b      	ldr	r5, [pc, #44]	; (8006df8 <__libc_init_array+0x40>)
 8006dca:	4c0c      	ldr	r4, [pc, #48]	; (8006dfc <__libc_init_array+0x44>)
 8006dcc:	f001 fb24 	bl	8008418 <_init>
 8006dd0:	1b64      	subs	r4, r4, r5
 8006dd2:	10a4      	asrs	r4, r4, #2
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	d105      	bne.n	8006de6 <__libc_init_array+0x2e>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de0:	4798      	blx	r3
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7ee      	b.n	8006dc4 <__libc_init_array+0xc>
 8006de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dea:	4798      	blx	r3
 8006dec:	3601      	adds	r6, #1
 8006dee:	e7f2      	b.n	8006dd6 <__libc_init_array+0x1e>
 8006df0:	08008550 	.word	0x08008550
 8006df4:	08008550 	.word	0x08008550
 8006df8:	08008550 	.word	0x08008550
 8006dfc:	08008554 	.word	0x08008554

08006e00 <memset>:
 8006e00:	4402      	add	r2, r0
 8006e02:	4603      	mov	r3, r0
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d100      	bne.n	8006e0a <memset+0xa>
 8006e08:	4770      	bx	lr
 8006e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0e:	e7f9      	b.n	8006e04 <memset+0x4>

08006e10 <iprintf>:
 8006e10:	b40f      	push	{r0, r1, r2, r3}
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <iprintf+0x2c>)
 8006e14:	b513      	push	{r0, r1, r4, lr}
 8006e16:	681c      	ldr	r4, [r3, #0]
 8006e18:	b124      	cbz	r4, 8006e24 <iprintf+0x14>
 8006e1a:	69a3      	ldr	r3, [r4, #24]
 8006e1c:	b913      	cbnz	r3, 8006e24 <iprintf+0x14>
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 fa74 	bl	800730c <__sinit>
 8006e24:	ab05      	add	r3, sp, #20
 8006e26:	9a04      	ldr	r2, [sp, #16]
 8006e28:	68a1      	ldr	r1, [r4, #8]
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 fc7d 	bl	800772c <_vfiprintf_r>
 8006e32:	b002      	add	sp, #8
 8006e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e38:	b004      	add	sp, #16
 8006e3a:	4770      	bx	lr
 8006e3c:	2000000c 	.word	0x2000000c

08006e40 <putchar>:
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <putchar+0x28>)
 8006e42:	b513      	push	{r0, r1, r4, lr}
 8006e44:	681c      	ldr	r4, [r3, #0]
 8006e46:	4601      	mov	r1, r0
 8006e48:	b134      	cbz	r4, 8006e58 <putchar+0x18>
 8006e4a:	69a3      	ldr	r3, [r4, #24]
 8006e4c:	b923      	cbnz	r3, 8006e58 <putchar+0x18>
 8006e4e:	9001      	str	r0, [sp, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fa5b 	bl	800730c <__sinit>
 8006e56:	9901      	ldr	r1, [sp, #4]
 8006e58:	68a2      	ldr	r2, [r4, #8]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	b002      	add	sp, #8
 8006e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e62:	f000 bf27 	b.w	8007cb4 <_putc_r>
 8006e66:	bf00      	nop
 8006e68:	2000000c 	.word	0x2000000c

08006e6c <_puts_r>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	460e      	mov	r6, r1
 8006e70:	4605      	mov	r5, r0
 8006e72:	b118      	cbz	r0, 8006e7c <_puts_r+0x10>
 8006e74:	6983      	ldr	r3, [r0, #24]
 8006e76:	b90b      	cbnz	r3, 8006e7c <_puts_r+0x10>
 8006e78:	f000 fa48 	bl	800730c <__sinit>
 8006e7c:	69ab      	ldr	r3, [r5, #24]
 8006e7e:	68ac      	ldr	r4, [r5, #8]
 8006e80:	b913      	cbnz	r3, 8006e88 <_puts_r+0x1c>
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 fa42 	bl	800730c <__sinit>
 8006e88:	4b2c      	ldr	r3, [pc, #176]	; (8006f3c <_puts_r+0xd0>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d120      	bne.n	8006ed0 <_puts_r+0x64>
 8006e8e:	686c      	ldr	r4, [r5, #4]
 8006e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e92:	07db      	lsls	r3, r3, #31
 8006e94:	d405      	bmi.n	8006ea2 <_puts_r+0x36>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	0598      	lsls	r0, r3, #22
 8006e9a:	d402      	bmi.n	8006ea2 <_puts_r+0x36>
 8006e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e9e:	f000 fad3 	bl	8007448 <__retarget_lock_acquire_recursive>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	0719      	lsls	r1, r3, #28
 8006ea6:	d51d      	bpl.n	8006ee4 <_puts_r+0x78>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	b1db      	cbz	r3, 8006ee4 <_puts_r+0x78>
 8006eac:	3e01      	subs	r6, #1
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	60a3      	str	r3, [r4, #8]
 8006eb8:	bb39      	cbnz	r1, 8006f0a <_puts_r+0x9e>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da38      	bge.n	8006f30 <_puts_r+0xc4>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	210a      	movs	r1, #10
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 f848 	bl	8006f58 <__swbuf_r>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d011      	beq.n	8006ef0 <_puts_r+0x84>
 8006ecc:	250a      	movs	r5, #10
 8006ece:	e011      	b.n	8006ef4 <_puts_r+0x88>
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <_puts_r+0xd4>)
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d101      	bne.n	8006eda <_puts_r+0x6e>
 8006ed6:	68ac      	ldr	r4, [r5, #8]
 8006ed8:	e7da      	b.n	8006e90 <_puts_r+0x24>
 8006eda:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <_puts_r+0xd8>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	bf08      	it	eq
 8006ee0:	68ec      	ldreq	r4, [r5, #12]
 8006ee2:	e7d5      	b.n	8006e90 <_puts_r+0x24>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f888 	bl	8006ffc <__swsetup_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d0dd      	beq.n	8006eac <_puts_r+0x40>
 8006ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ef6:	07da      	lsls	r2, r3, #31
 8006ef8:	d405      	bmi.n	8006f06 <_puts_r+0x9a>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	059b      	lsls	r3, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_puts_r+0x9a>
 8006f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f02:	f000 faa2 	bl	800744a <__retarget_lock_release_recursive>
 8006f06:	4628      	mov	r0, r5
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da04      	bge.n	8006f18 <_puts_r+0xac>
 8006f0e:	69a2      	ldr	r2, [r4, #24]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	dc06      	bgt.n	8006f22 <_puts_r+0xb6>
 8006f14:	290a      	cmp	r1, #10
 8006f16:	d004      	beq.n	8006f22 <_puts_r+0xb6>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	6022      	str	r2, [r4, #0]
 8006f1e:	7019      	strb	r1, [r3, #0]
 8006f20:	e7c5      	b.n	8006eae <_puts_r+0x42>
 8006f22:	4622      	mov	r2, r4
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 f817 	bl	8006f58 <__swbuf_r>
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d1bf      	bne.n	8006eae <_puts_r+0x42>
 8006f2e:	e7df      	b.n	8006ef0 <_puts_r+0x84>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	250a      	movs	r5, #10
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	6022      	str	r2, [r4, #0]
 8006f38:	701d      	strb	r5, [r3, #0]
 8006f3a:	e7db      	b.n	8006ef4 <_puts_r+0x88>
 8006f3c:	080084c0 	.word	0x080084c0
 8006f40:	080084e0 	.word	0x080084e0
 8006f44:	080084a0 	.word	0x080084a0

08006f48 <puts>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <puts+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	f7ff bf8d 	b.w	8006e6c <_puts_r>
 8006f52:	bf00      	nop
 8006f54:	2000000c 	.word	0x2000000c

08006f58 <__swbuf_r>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	460e      	mov	r6, r1
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	4605      	mov	r5, r0
 8006f60:	b118      	cbz	r0, 8006f6a <__swbuf_r+0x12>
 8006f62:	6983      	ldr	r3, [r0, #24]
 8006f64:	b90b      	cbnz	r3, 8006f6a <__swbuf_r+0x12>
 8006f66:	f000 f9d1 	bl	800730c <__sinit>
 8006f6a:	4b21      	ldr	r3, [pc, #132]	; (8006ff0 <__swbuf_r+0x98>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	d12b      	bne.n	8006fc8 <__swbuf_r+0x70>
 8006f70:	686c      	ldr	r4, [r5, #4]
 8006f72:	69a3      	ldr	r3, [r4, #24]
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	071a      	lsls	r2, r3, #28
 8006f7a:	d52f      	bpl.n	8006fdc <__swbuf_r+0x84>
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	b36b      	cbz	r3, 8006fdc <__swbuf_r+0x84>
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	6820      	ldr	r0, [r4, #0]
 8006f84:	1ac0      	subs	r0, r0, r3
 8006f86:	6963      	ldr	r3, [r4, #20]
 8006f88:	b2f6      	uxtb	r6, r6
 8006f8a:	4283      	cmp	r3, r0
 8006f8c:	4637      	mov	r7, r6
 8006f8e:	dc04      	bgt.n	8006f9a <__swbuf_r+0x42>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f926 	bl	80071e4 <_fflush_r>
 8006f98:	bb30      	cbnz	r0, 8006fe8 <__swbuf_r+0x90>
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	60a3      	str	r3, [r4, #8]
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	6022      	str	r2, [r4, #0]
 8006fa6:	701e      	strb	r6, [r3, #0]
 8006fa8:	6963      	ldr	r3, [r4, #20]
 8006faa:	3001      	adds	r0, #1
 8006fac:	4283      	cmp	r3, r0
 8006fae:	d004      	beq.n	8006fba <__swbuf_r+0x62>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	07db      	lsls	r3, r3, #31
 8006fb4:	d506      	bpl.n	8006fc4 <__swbuf_r+0x6c>
 8006fb6:	2e0a      	cmp	r6, #10
 8006fb8:	d104      	bne.n	8006fc4 <__swbuf_r+0x6c>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f000 f911 	bl	80071e4 <_fflush_r>
 8006fc2:	b988      	cbnz	r0, 8006fe8 <__swbuf_r+0x90>
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <__swbuf_r+0x9c>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	d101      	bne.n	8006fd2 <__swbuf_r+0x7a>
 8006fce:	68ac      	ldr	r4, [r5, #8]
 8006fd0:	e7cf      	b.n	8006f72 <__swbuf_r+0x1a>
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <__swbuf_r+0xa0>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	bf08      	it	eq
 8006fd8:	68ec      	ldreq	r4, [r5, #12]
 8006fda:	e7ca      	b.n	8006f72 <__swbuf_r+0x1a>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 f80c 	bl	8006ffc <__swsetup_r>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0cb      	beq.n	8006f80 <__swbuf_r+0x28>
 8006fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8006fec:	e7ea      	b.n	8006fc4 <__swbuf_r+0x6c>
 8006fee:	bf00      	nop
 8006ff0:	080084c0 	.word	0x080084c0
 8006ff4:	080084e0 	.word	0x080084e0
 8006ff8:	080084a0 	.word	0x080084a0

08006ffc <__swsetup_r>:
 8006ffc:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <__swsetup_r+0xcc>)
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	4606      	mov	r6, r0
 8007004:	460c      	mov	r4, r1
 8007006:	b125      	cbz	r5, 8007012 <__swsetup_r+0x16>
 8007008:	69ab      	ldr	r3, [r5, #24]
 800700a:	b913      	cbnz	r3, 8007012 <__swsetup_r+0x16>
 800700c:	4628      	mov	r0, r5
 800700e:	f000 f97d 	bl	800730c <__sinit>
 8007012:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <__swsetup_r+0xd0>)
 8007014:	429c      	cmp	r4, r3
 8007016:	d10f      	bne.n	8007038 <__swsetup_r+0x3c>
 8007018:	686c      	ldr	r4, [r5, #4]
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007020:	0719      	lsls	r1, r3, #28
 8007022:	d42c      	bmi.n	800707e <__swsetup_r+0x82>
 8007024:	06dd      	lsls	r5, r3, #27
 8007026:	d411      	bmi.n	800704c <__swsetup_r+0x50>
 8007028:	2309      	movs	r3, #9
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	f04f 30ff 	mov.w	r0, #4294967295
 8007036:	e03e      	b.n	80070b6 <__swsetup_r+0xba>
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <__swsetup_r+0xd4>)
 800703a:	429c      	cmp	r4, r3
 800703c:	d101      	bne.n	8007042 <__swsetup_r+0x46>
 800703e:	68ac      	ldr	r4, [r5, #8]
 8007040:	e7eb      	b.n	800701a <__swsetup_r+0x1e>
 8007042:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <__swsetup_r+0xd8>)
 8007044:	429c      	cmp	r4, r3
 8007046:	bf08      	it	eq
 8007048:	68ec      	ldreq	r4, [r5, #12]
 800704a:	e7e6      	b.n	800701a <__swsetup_r+0x1e>
 800704c:	0758      	lsls	r0, r3, #29
 800704e:	d512      	bpl.n	8007076 <__swsetup_r+0x7a>
 8007050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007052:	b141      	cbz	r1, 8007066 <__swsetup_r+0x6a>
 8007054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007058:	4299      	cmp	r1, r3
 800705a:	d002      	beq.n	8007062 <__swsetup_r+0x66>
 800705c:	4630      	mov	r0, r6
 800705e:	f000 fa5b 	bl	8007518 <_free_r>
 8007062:	2300      	movs	r3, #0
 8007064:	6363      	str	r3, [r4, #52]	; 0x34
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	2300      	movs	r3, #0
 8007070:	6063      	str	r3, [r4, #4]
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f043 0308 	orr.w	r3, r3, #8
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	b94b      	cbnz	r3, 8007096 <__swsetup_r+0x9a>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800708c:	d003      	beq.n	8007096 <__swsetup_r+0x9a>
 800708e:	4621      	mov	r1, r4
 8007090:	4630      	mov	r0, r6
 8007092:	f000 fa01 	bl	8007498 <__smakebuf_r>
 8007096:	89a0      	ldrh	r0, [r4, #12]
 8007098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800709c:	f010 0301 	ands.w	r3, r0, #1
 80070a0:	d00a      	beq.n	80070b8 <__swsetup_r+0xbc>
 80070a2:	2300      	movs	r3, #0
 80070a4:	60a3      	str	r3, [r4, #8]
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	425b      	negs	r3, r3
 80070aa:	61a3      	str	r3, [r4, #24]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	b943      	cbnz	r3, 80070c2 <__swsetup_r+0xc6>
 80070b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070b4:	d1ba      	bne.n	800702c <__swsetup_r+0x30>
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	0781      	lsls	r1, r0, #30
 80070ba:	bf58      	it	pl
 80070bc:	6963      	ldrpl	r3, [r4, #20]
 80070be:	60a3      	str	r3, [r4, #8]
 80070c0:	e7f4      	b.n	80070ac <__swsetup_r+0xb0>
 80070c2:	2000      	movs	r0, #0
 80070c4:	e7f7      	b.n	80070b6 <__swsetup_r+0xba>
 80070c6:	bf00      	nop
 80070c8:	2000000c 	.word	0x2000000c
 80070cc:	080084c0 	.word	0x080084c0
 80070d0:	080084e0 	.word	0x080084e0
 80070d4:	080084a0 	.word	0x080084a0

080070d8 <__sflush_r>:
 80070d8:	898a      	ldrh	r2, [r1, #12]
 80070da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070de:	4605      	mov	r5, r0
 80070e0:	0710      	lsls	r0, r2, #28
 80070e2:	460c      	mov	r4, r1
 80070e4:	d458      	bmi.n	8007198 <__sflush_r+0xc0>
 80070e6:	684b      	ldr	r3, [r1, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dc05      	bgt.n	80070f8 <__sflush_r+0x20>
 80070ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dc02      	bgt.n	80070f8 <__sflush_r+0x20>
 80070f2:	2000      	movs	r0, #0
 80070f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070fa:	2e00      	cmp	r6, #0
 80070fc:	d0f9      	beq.n	80070f2 <__sflush_r+0x1a>
 80070fe:	2300      	movs	r3, #0
 8007100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007104:	682f      	ldr	r7, [r5, #0]
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	d032      	beq.n	8007170 <__sflush_r+0x98>
 800710a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	075a      	lsls	r2, r3, #29
 8007110:	d505      	bpl.n	800711e <__sflush_r+0x46>
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	1ac0      	subs	r0, r0, r3
 8007116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007118:	b10b      	cbz	r3, 800711e <__sflush_r+0x46>
 800711a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800711c:	1ac0      	subs	r0, r0, r3
 800711e:	2300      	movs	r3, #0
 8007120:	4602      	mov	r2, r0
 8007122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007124:	6a21      	ldr	r1, [r4, #32]
 8007126:	4628      	mov	r0, r5
 8007128:	47b0      	blx	r6
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	d106      	bne.n	800713e <__sflush_r+0x66>
 8007130:	6829      	ldr	r1, [r5, #0]
 8007132:	291d      	cmp	r1, #29
 8007134:	d82c      	bhi.n	8007190 <__sflush_r+0xb8>
 8007136:	4a2a      	ldr	r2, [pc, #168]	; (80071e0 <__sflush_r+0x108>)
 8007138:	40ca      	lsrs	r2, r1
 800713a:	07d6      	lsls	r6, r2, #31
 800713c:	d528      	bpl.n	8007190 <__sflush_r+0xb8>
 800713e:	2200      	movs	r2, #0
 8007140:	6062      	str	r2, [r4, #4]
 8007142:	04d9      	lsls	r1, r3, #19
 8007144:	6922      	ldr	r2, [r4, #16]
 8007146:	6022      	str	r2, [r4, #0]
 8007148:	d504      	bpl.n	8007154 <__sflush_r+0x7c>
 800714a:	1c42      	adds	r2, r0, #1
 800714c:	d101      	bne.n	8007152 <__sflush_r+0x7a>
 800714e:	682b      	ldr	r3, [r5, #0]
 8007150:	b903      	cbnz	r3, 8007154 <__sflush_r+0x7c>
 8007152:	6560      	str	r0, [r4, #84]	; 0x54
 8007154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007156:	602f      	str	r7, [r5, #0]
 8007158:	2900      	cmp	r1, #0
 800715a:	d0ca      	beq.n	80070f2 <__sflush_r+0x1a>
 800715c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007160:	4299      	cmp	r1, r3
 8007162:	d002      	beq.n	800716a <__sflush_r+0x92>
 8007164:	4628      	mov	r0, r5
 8007166:	f000 f9d7 	bl	8007518 <_free_r>
 800716a:	2000      	movs	r0, #0
 800716c:	6360      	str	r0, [r4, #52]	; 0x34
 800716e:	e7c1      	b.n	80070f4 <__sflush_r+0x1c>
 8007170:	6a21      	ldr	r1, [r4, #32]
 8007172:	2301      	movs	r3, #1
 8007174:	4628      	mov	r0, r5
 8007176:	47b0      	blx	r6
 8007178:	1c41      	adds	r1, r0, #1
 800717a:	d1c7      	bne.n	800710c <__sflush_r+0x34>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0c4      	beq.n	800710c <__sflush_r+0x34>
 8007182:	2b1d      	cmp	r3, #29
 8007184:	d001      	beq.n	800718a <__sflush_r+0xb2>
 8007186:	2b16      	cmp	r3, #22
 8007188:	d101      	bne.n	800718e <__sflush_r+0xb6>
 800718a:	602f      	str	r7, [r5, #0]
 800718c:	e7b1      	b.n	80070f2 <__sflush_r+0x1a>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	e7ad      	b.n	80070f4 <__sflush_r+0x1c>
 8007198:	690f      	ldr	r7, [r1, #16]
 800719a:	2f00      	cmp	r7, #0
 800719c:	d0a9      	beq.n	80070f2 <__sflush_r+0x1a>
 800719e:	0793      	lsls	r3, r2, #30
 80071a0:	680e      	ldr	r6, [r1, #0]
 80071a2:	bf08      	it	eq
 80071a4:	694b      	ldreq	r3, [r1, #20]
 80071a6:	600f      	str	r7, [r1, #0]
 80071a8:	bf18      	it	ne
 80071aa:	2300      	movne	r3, #0
 80071ac:	eba6 0807 	sub.w	r8, r6, r7
 80071b0:	608b      	str	r3, [r1, #8]
 80071b2:	f1b8 0f00 	cmp.w	r8, #0
 80071b6:	dd9c      	ble.n	80070f2 <__sflush_r+0x1a>
 80071b8:	6a21      	ldr	r1, [r4, #32]
 80071ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071bc:	4643      	mov	r3, r8
 80071be:	463a      	mov	r2, r7
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b0      	blx	r6
 80071c4:	2800      	cmp	r0, #0
 80071c6:	dc06      	bgt.n	80071d6 <__sflush_r+0xfe>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	e78e      	b.n	80070f4 <__sflush_r+0x1c>
 80071d6:	4407      	add	r7, r0
 80071d8:	eba8 0800 	sub.w	r8, r8, r0
 80071dc:	e7e9      	b.n	80071b2 <__sflush_r+0xda>
 80071de:	bf00      	nop
 80071e0:	20400001 	.word	0x20400001

080071e4 <_fflush_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	690b      	ldr	r3, [r1, #16]
 80071e8:	4605      	mov	r5, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	b913      	cbnz	r3, 80071f4 <_fflush_r+0x10>
 80071ee:	2500      	movs	r5, #0
 80071f0:	4628      	mov	r0, r5
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	b118      	cbz	r0, 80071fe <_fflush_r+0x1a>
 80071f6:	6983      	ldr	r3, [r0, #24]
 80071f8:	b90b      	cbnz	r3, 80071fe <_fflush_r+0x1a>
 80071fa:	f000 f887 	bl	800730c <__sinit>
 80071fe:	4b14      	ldr	r3, [pc, #80]	; (8007250 <_fflush_r+0x6c>)
 8007200:	429c      	cmp	r4, r3
 8007202:	d11b      	bne.n	800723c <_fflush_r+0x58>
 8007204:	686c      	ldr	r4, [r5, #4]
 8007206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0ef      	beq.n	80071ee <_fflush_r+0xa>
 800720e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007210:	07d0      	lsls	r0, r2, #31
 8007212:	d404      	bmi.n	800721e <_fflush_r+0x3a>
 8007214:	0599      	lsls	r1, r3, #22
 8007216:	d402      	bmi.n	800721e <_fflush_r+0x3a>
 8007218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800721a:	f000 f915 	bl	8007448 <__retarget_lock_acquire_recursive>
 800721e:	4628      	mov	r0, r5
 8007220:	4621      	mov	r1, r4
 8007222:	f7ff ff59 	bl	80070d8 <__sflush_r>
 8007226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007228:	07da      	lsls	r2, r3, #31
 800722a:	4605      	mov	r5, r0
 800722c:	d4e0      	bmi.n	80071f0 <_fflush_r+0xc>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	059b      	lsls	r3, r3, #22
 8007232:	d4dd      	bmi.n	80071f0 <_fflush_r+0xc>
 8007234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007236:	f000 f908 	bl	800744a <__retarget_lock_release_recursive>
 800723a:	e7d9      	b.n	80071f0 <_fflush_r+0xc>
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <_fflush_r+0x70>)
 800723e:	429c      	cmp	r4, r3
 8007240:	d101      	bne.n	8007246 <_fflush_r+0x62>
 8007242:	68ac      	ldr	r4, [r5, #8]
 8007244:	e7df      	b.n	8007206 <_fflush_r+0x22>
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <_fflush_r+0x74>)
 8007248:	429c      	cmp	r4, r3
 800724a:	bf08      	it	eq
 800724c:	68ec      	ldreq	r4, [r5, #12]
 800724e:	e7da      	b.n	8007206 <_fflush_r+0x22>
 8007250:	080084c0 	.word	0x080084c0
 8007254:	080084e0 	.word	0x080084e0
 8007258:	080084a0 	.word	0x080084a0

0800725c <std>:
 800725c:	2300      	movs	r3, #0
 800725e:	b510      	push	{r4, lr}
 8007260:	4604      	mov	r4, r0
 8007262:	e9c0 3300 	strd	r3, r3, [r0]
 8007266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800726a:	6083      	str	r3, [r0, #8]
 800726c:	8181      	strh	r1, [r0, #12]
 800726e:	6643      	str	r3, [r0, #100]	; 0x64
 8007270:	81c2      	strh	r2, [r0, #14]
 8007272:	6183      	str	r3, [r0, #24]
 8007274:	4619      	mov	r1, r3
 8007276:	2208      	movs	r2, #8
 8007278:	305c      	adds	r0, #92	; 0x5c
 800727a:	f7ff fdc1 	bl	8006e00 <memset>
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <std+0x38>)
 8007280:	6263      	str	r3, [r4, #36]	; 0x24
 8007282:	4b05      	ldr	r3, [pc, #20]	; (8007298 <std+0x3c>)
 8007284:	62a3      	str	r3, [r4, #40]	; 0x28
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <std+0x40>)
 8007288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <std+0x44>)
 800728c:	6224      	str	r4, [r4, #32]
 800728e:	6323      	str	r3, [r4, #48]	; 0x30
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	08007d65 	.word	0x08007d65
 8007298:	08007d87 	.word	0x08007d87
 800729c:	08007dbf 	.word	0x08007dbf
 80072a0:	08007de3 	.word	0x08007de3

080072a4 <_cleanup_r>:
 80072a4:	4901      	ldr	r1, [pc, #4]	; (80072ac <_cleanup_r+0x8>)
 80072a6:	f000 b8af 	b.w	8007408 <_fwalk_reent>
 80072aa:	bf00      	nop
 80072ac:	080071e5 	.word	0x080071e5

080072b0 <__sfmoreglue>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	2268      	movs	r2, #104	; 0x68
 80072b4:	1e4d      	subs	r5, r1, #1
 80072b6:	4355      	muls	r5, r2
 80072b8:	460e      	mov	r6, r1
 80072ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072be:	f000 f997 	bl	80075f0 <_malloc_r>
 80072c2:	4604      	mov	r4, r0
 80072c4:	b140      	cbz	r0, 80072d8 <__sfmoreglue+0x28>
 80072c6:	2100      	movs	r1, #0
 80072c8:	e9c0 1600 	strd	r1, r6, [r0]
 80072cc:	300c      	adds	r0, #12
 80072ce:	60a0      	str	r0, [r4, #8]
 80072d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072d4:	f7ff fd94 	bl	8006e00 <memset>
 80072d8:	4620      	mov	r0, r4
 80072da:	bd70      	pop	{r4, r5, r6, pc}

080072dc <__sfp_lock_acquire>:
 80072dc:	4801      	ldr	r0, [pc, #4]	; (80072e4 <__sfp_lock_acquire+0x8>)
 80072de:	f000 b8b3 	b.w	8007448 <__retarget_lock_acquire_recursive>
 80072e2:	bf00      	nop
 80072e4:	20000271 	.word	0x20000271

080072e8 <__sfp_lock_release>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__sfp_lock_release+0x8>)
 80072ea:	f000 b8ae 	b.w	800744a <__retarget_lock_release_recursive>
 80072ee:	bf00      	nop
 80072f0:	20000271 	.word	0x20000271

080072f4 <__sinit_lock_acquire>:
 80072f4:	4801      	ldr	r0, [pc, #4]	; (80072fc <__sinit_lock_acquire+0x8>)
 80072f6:	f000 b8a7 	b.w	8007448 <__retarget_lock_acquire_recursive>
 80072fa:	bf00      	nop
 80072fc:	20000272 	.word	0x20000272

08007300 <__sinit_lock_release>:
 8007300:	4801      	ldr	r0, [pc, #4]	; (8007308 <__sinit_lock_release+0x8>)
 8007302:	f000 b8a2 	b.w	800744a <__retarget_lock_release_recursive>
 8007306:	bf00      	nop
 8007308:	20000272 	.word	0x20000272

0800730c <__sinit>:
 800730c:	b510      	push	{r4, lr}
 800730e:	4604      	mov	r4, r0
 8007310:	f7ff fff0 	bl	80072f4 <__sinit_lock_acquire>
 8007314:	69a3      	ldr	r3, [r4, #24]
 8007316:	b11b      	cbz	r3, 8007320 <__sinit+0x14>
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f7ff bff0 	b.w	8007300 <__sinit_lock_release>
 8007320:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007324:	6523      	str	r3, [r4, #80]	; 0x50
 8007326:	4b13      	ldr	r3, [pc, #76]	; (8007374 <__sinit+0x68>)
 8007328:	4a13      	ldr	r2, [pc, #76]	; (8007378 <__sinit+0x6c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	62a2      	str	r2, [r4, #40]	; 0x28
 800732e:	42a3      	cmp	r3, r4
 8007330:	bf04      	itt	eq
 8007332:	2301      	moveq	r3, #1
 8007334:	61a3      	streq	r3, [r4, #24]
 8007336:	4620      	mov	r0, r4
 8007338:	f000 f820 	bl	800737c <__sfp>
 800733c:	6060      	str	r0, [r4, #4]
 800733e:	4620      	mov	r0, r4
 8007340:	f000 f81c 	bl	800737c <__sfp>
 8007344:	60a0      	str	r0, [r4, #8]
 8007346:	4620      	mov	r0, r4
 8007348:	f000 f818 	bl	800737c <__sfp>
 800734c:	2200      	movs	r2, #0
 800734e:	60e0      	str	r0, [r4, #12]
 8007350:	2104      	movs	r1, #4
 8007352:	6860      	ldr	r0, [r4, #4]
 8007354:	f7ff ff82 	bl	800725c <std>
 8007358:	68a0      	ldr	r0, [r4, #8]
 800735a:	2201      	movs	r2, #1
 800735c:	2109      	movs	r1, #9
 800735e:	f7ff ff7d 	bl	800725c <std>
 8007362:	68e0      	ldr	r0, [r4, #12]
 8007364:	2202      	movs	r2, #2
 8007366:	2112      	movs	r1, #18
 8007368:	f7ff ff78 	bl	800725c <std>
 800736c:	2301      	movs	r3, #1
 800736e:	61a3      	str	r3, [r4, #24]
 8007370:	e7d2      	b.n	8007318 <__sinit+0xc>
 8007372:	bf00      	nop
 8007374:	0800849c 	.word	0x0800849c
 8007378:	080072a5 	.word	0x080072a5

0800737c <__sfp>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	4607      	mov	r7, r0
 8007380:	f7ff ffac 	bl	80072dc <__sfp_lock_acquire>
 8007384:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <__sfp+0x84>)
 8007386:	681e      	ldr	r6, [r3, #0]
 8007388:	69b3      	ldr	r3, [r6, #24]
 800738a:	b913      	cbnz	r3, 8007392 <__sfp+0x16>
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff ffbd 	bl	800730c <__sinit>
 8007392:	3648      	adds	r6, #72	; 0x48
 8007394:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007398:	3b01      	subs	r3, #1
 800739a:	d503      	bpl.n	80073a4 <__sfp+0x28>
 800739c:	6833      	ldr	r3, [r6, #0]
 800739e:	b30b      	cbz	r3, 80073e4 <__sfp+0x68>
 80073a0:	6836      	ldr	r6, [r6, #0]
 80073a2:	e7f7      	b.n	8007394 <__sfp+0x18>
 80073a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073a8:	b9d5      	cbnz	r5, 80073e0 <__sfp+0x64>
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <__sfp+0x88>)
 80073ac:	60e3      	str	r3, [r4, #12]
 80073ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073b2:	6665      	str	r5, [r4, #100]	; 0x64
 80073b4:	f000 f847 	bl	8007446 <__retarget_lock_init_recursive>
 80073b8:	f7ff ff96 	bl	80072e8 <__sfp_lock_release>
 80073bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073c4:	6025      	str	r5, [r4, #0]
 80073c6:	61a5      	str	r5, [r4, #24]
 80073c8:	2208      	movs	r2, #8
 80073ca:	4629      	mov	r1, r5
 80073cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073d0:	f7ff fd16 	bl	8006e00 <memset>
 80073d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073dc:	4620      	mov	r0, r4
 80073de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e0:	3468      	adds	r4, #104	; 0x68
 80073e2:	e7d9      	b.n	8007398 <__sfp+0x1c>
 80073e4:	2104      	movs	r1, #4
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7ff ff62 	bl	80072b0 <__sfmoreglue>
 80073ec:	4604      	mov	r4, r0
 80073ee:	6030      	str	r0, [r6, #0]
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d1d5      	bne.n	80073a0 <__sfp+0x24>
 80073f4:	f7ff ff78 	bl	80072e8 <__sfp_lock_release>
 80073f8:	230c      	movs	r3, #12
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	e7ee      	b.n	80073dc <__sfp+0x60>
 80073fe:	bf00      	nop
 8007400:	0800849c 	.word	0x0800849c
 8007404:	ffff0001 	.word	0xffff0001

08007408 <_fwalk_reent>:
 8007408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800740c:	4606      	mov	r6, r0
 800740e:	4688      	mov	r8, r1
 8007410:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007414:	2700      	movs	r7, #0
 8007416:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800741a:	f1b9 0901 	subs.w	r9, r9, #1
 800741e:	d505      	bpl.n	800742c <_fwalk_reent+0x24>
 8007420:	6824      	ldr	r4, [r4, #0]
 8007422:	2c00      	cmp	r4, #0
 8007424:	d1f7      	bne.n	8007416 <_fwalk_reent+0xe>
 8007426:	4638      	mov	r0, r7
 8007428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742c:	89ab      	ldrh	r3, [r5, #12]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d907      	bls.n	8007442 <_fwalk_reent+0x3a>
 8007432:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007436:	3301      	adds	r3, #1
 8007438:	d003      	beq.n	8007442 <_fwalk_reent+0x3a>
 800743a:	4629      	mov	r1, r5
 800743c:	4630      	mov	r0, r6
 800743e:	47c0      	blx	r8
 8007440:	4307      	orrs	r7, r0
 8007442:	3568      	adds	r5, #104	; 0x68
 8007444:	e7e9      	b.n	800741a <_fwalk_reent+0x12>

08007446 <__retarget_lock_init_recursive>:
 8007446:	4770      	bx	lr

08007448 <__retarget_lock_acquire_recursive>:
 8007448:	4770      	bx	lr

0800744a <__retarget_lock_release_recursive>:
 800744a:	4770      	bx	lr

0800744c <__swhatbuf_r>:
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	460e      	mov	r6, r1
 8007450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007454:	2900      	cmp	r1, #0
 8007456:	b096      	sub	sp, #88	; 0x58
 8007458:	4614      	mov	r4, r2
 800745a:	461d      	mov	r5, r3
 800745c:	da08      	bge.n	8007470 <__swhatbuf_r+0x24>
 800745e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	602a      	str	r2, [r5, #0]
 8007466:	061a      	lsls	r2, r3, #24
 8007468:	d410      	bmi.n	800748c <__swhatbuf_r+0x40>
 800746a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800746e:	e00e      	b.n	800748e <__swhatbuf_r+0x42>
 8007470:	466a      	mov	r2, sp
 8007472:	f000 fcdd 	bl	8007e30 <_fstat_r>
 8007476:	2800      	cmp	r0, #0
 8007478:	dbf1      	blt.n	800745e <__swhatbuf_r+0x12>
 800747a:	9a01      	ldr	r2, [sp, #4]
 800747c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007480:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007484:	425a      	negs	r2, r3
 8007486:	415a      	adcs	r2, r3
 8007488:	602a      	str	r2, [r5, #0]
 800748a:	e7ee      	b.n	800746a <__swhatbuf_r+0x1e>
 800748c:	2340      	movs	r3, #64	; 0x40
 800748e:	2000      	movs	r0, #0
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	b016      	add	sp, #88	; 0x58
 8007494:	bd70      	pop	{r4, r5, r6, pc}
	...

08007498 <__smakebuf_r>:
 8007498:	898b      	ldrh	r3, [r1, #12]
 800749a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800749c:	079d      	lsls	r5, r3, #30
 800749e:	4606      	mov	r6, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	d507      	bpl.n	80074b4 <__smakebuf_r+0x1c>
 80074a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	6123      	str	r3, [r4, #16]
 80074ac:	2301      	movs	r3, #1
 80074ae:	6163      	str	r3, [r4, #20]
 80074b0:	b002      	add	sp, #8
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	ab01      	add	r3, sp, #4
 80074b6:	466a      	mov	r2, sp
 80074b8:	f7ff ffc8 	bl	800744c <__swhatbuf_r>
 80074bc:	9900      	ldr	r1, [sp, #0]
 80074be:	4605      	mov	r5, r0
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 f895 	bl	80075f0 <_malloc_r>
 80074c6:	b948      	cbnz	r0, 80074dc <__smakebuf_r+0x44>
 80074c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074cc:	059a      	lsls	r2, r3, #22
 80074ce:	d4ef      	bmi.n	80074b0 <__smakebuf_r+0x18>
 80074d0:	f023 0303 	bic.w	r3, r3, #3
 80074d4:	f043 0302 	orr.w	r3, r3, #2
 80074d8:	81a3      	strh	r3, [r4, #12]
 80074da:	e7e3      	b.n	80074a4 <__smakebuf_r+0xc>
 80074dc:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <__smakebuf_r+0x7c>)
 80074de:	62b3      	str	r3, [r6, #40]	; 0x28
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	6020      	str	r0, [r4, #0]
 80074e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	9b00      	ldr	r3, [sp, #0]
 80074ec:	6163      	str	r3, [r4, #20]
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	6120      	str	r0, [r4, #16]
 80074f2:	b15b      	cbz	r3, 800750c <__smakebuf_r+0x74>
 80074f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f8:	4630      	mov	r0, r6
 80074fa:	f000 fcab 	bl	8007e54 <_isatty_r>
 80074fe:	b128      	cbz	r0, 800750c <__smakebuf_r+0x74>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f023 0303 	bic.w	r3, r3, #3
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	89a0      	ldrh	r0, [r4, #12]
 800750e:	4305      	orrs	r5, r0
 8007510:	81a5      	strh	r5, [r4, #12]
 8007512:	e7cd      	b.n	80074b0 <__smakebuf_r+0x18>
 8007514:	080072a5 	.word	0x080072a5

08007518 <_free_r>:
 8007518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800751a:	2900      	cmp	r1, #0
 800751c:	d044      	beq.n	80075a8 <_free_r+0x90>
 800751e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007522:	9001      	str	r0, [sp, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f1a1 0404 	sub.w	r4, r1, #4
 800752a:	bfb8      	it	lt
 800752c:	18e4      	addlt	r4, r4, r3
 800752e:	f000 fcb3 	bl	8007e98 <__malloc_lock>
 8007532:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <_free_r+0x94>)
 8007534:	9801      	ldr	r0, [sp, #4]
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	b933      	cbnz	r3, 8007548 <_free_r+0x30>
 800753a:	6063      	str	r3, [r4, #4]
 800753c:	6014      	str	r4, [r2, #0]
 800753e:	b003      	add	sp, #12
 8007540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007544:	f000 bcae 	b.w	8007ea4 <__malloc_unlock>
 8007548:	42a3      	cmp	r3, r4
 800754a:	d908      	bls.n	800755e <_free_r+0x46>
 800754c:	6825      	ldr	r5, [r4, #0]
 800754e:	1961      	adds	r1, r4, r5
 8007550:	428b      	cmp	r3, r1
 8007552:	bf01      	itttt	eq
 8007554:	6819      	ldreq	r1, [r3, #0]
 8007556:	685b      	ldreq	r3, [r3, #4]
 8007558:	1949      	addeq	r1, r1, r5
 800755a:	6021      	streq	r1, [r4, #0]
 800755c:	e7ed      	b.n	800753a <_free_r+0x22>
 800755e:	461a      	mov	r2, r3
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	b10b      	cbz	r3, 8007568 <_free_r+0x50>
 8007564:	42a3      	cmp	r3, r4
 8007566:	d9fa      	bls.n	800755e <_free_r+0x46>
 8007568:	6811      	ldr	r1, [r2, #0]
 800756a:	1855      	adds	r5, r2, r1
 800756c:	42a5      	cmp	r5, r4
 800756e:	d10b      	bne.n	8007588 <_free_r+0x70>
 8007570:	6824      	ldr	r4, [r4, #0]
 8007572:	4421      	add	r1, r4
 8007574:	1854      	adds	r4, r2, r1
 8007576:	42a3      	cmp	r3, r4
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	d1e0      	bne.n	800753e <_free_r+0x26>
 800757c:	681c      	ldr	r4, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	6053      	str	r3, [r2, #4]
 8007582:	4421      	add	r1, r4
 8007584:	6011      	str	r1, [r2, #0]
 8007586:	e7da      	b.n	800753e <_free_r+0x26>
 8007588:	d902      	bls.n	8007590 <_free_r+0x78>
 800758a:	230c      	movs	r3, #12
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	e7d6      	b.n	800753e <_free_r+0x26>
 8007590:	6825      	ldr	r5, [r4, #0]
 8007592:	1961      	adds	r1, r4, r5
 8007594:	428b      	cmp	r3, r1
 8007596:	bf04      	itt	eq
 8007598:	6819      	ldreq	r1, [r3, #0]
 800759a:	685b      	ldreq	r3, [r3, #4]
 800759c:	6063      	str	r3, [r4, #4]
 800759e:	bf04      	itt	eq
 80075a0:	1949      	addeq	r1, r1, r5
 80075a2:	6021      	streq	r1, [r4, #0]
 80075a4:	6054      	str	r4, [r2, #4]
 80075a6:	e7ca      	b.n	800753e <_free_r+0x26>
 80075a8:	b003      	add	sp, #12
 80075aa:	bd30      	pop	{r4, r5, pc}
 80075ac:	20000274 	.word	0x20000274

080075b0 <sbrk_aligned>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4e0e      	ldr	r6, [pc, #56]	; (80075ec <sbrk_aligned+0x3c>)
 80075b4:	460c      	mov	r4, r1
 80075b6:	6831      	ldr	r1, [r6, #0]
 80075b8:	4605      	mov	r5, r0
 80075ba:	b911      	cbnz	r1, 80075c2 <sbrk_aligned+0x12>
 80075bc:	f000 fbc2 	bl	8007d44 <_sbrk_r>
 80075c0:	6030      	str	r0, [r6, #0]
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 fbbd 	bl	8007d44 <_sbrk_r>
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	d00a      	beq.n	80075e4 <sbrk_aligned+0x34>
 80075ce:	1cc4      	adds	r4, r0, #3
 80075d0:	f024 0403 	bic.w	r4, r4, #3
 80075d4:	42a0      	cmp	r0, r4
 80075d6:	d007      	beq.n	80075e8 <sbrk_aligned+0x38>
 80075d8:	1a21      	subs	r1, r4, r0
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 fbb2 	bl	8007d44 <_sbrk_r>
 80075e0:	3001      	adds	r0, #1
 80075e2:	d101      	bne.n	80075e8 <sbrk_aligned+0x38>
 80075e4:	f04f 34ff 	mov.w	r4, #4294967295
 80075e8:	4620      	mov	r0, r4
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	20000278 	.word	0x20000278

080075f0 <_malloc_r>:
 80075f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f4:	1ccd      	adds	r5, r1, #3
 80075f6:	f025 0503 	bic.w	r5, r5, #3
 80075fa:	3508      	adds	r5, #8
 80075fc:	2d0c      	cmp	r5, #12
 80075fe:	bf38      	it	cc
 8007600:	250c      	movcc	r5, #12
 8007602:	2d00      	cmp	r5, #0
 8007604:	4607      	mov	r7, r0
 8007606:	db01      	blt.n	800760c <_malloc_r+0x1c>
 8007608:	42a9      	cmp	r1, r5
 800760a:	d905      	bls.n	8007618 <_malloc_r+0x28>
 800760c:	230c      	movs	r3, #12
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	2600      	movs	r6, #0
 8007612:	4630      	mov	r0, r6
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007618:	4e2e      	ldr	r6, [pc, #184]	; (80076d4 <_malloc_r+0xe4>)
 800761a:	f000 fc3d 	bl	8007e98 <__malloc_lock>
 800761e:	6833      	ldr	r3, [r6, #0]
 8007620:	461c      	mov	r4, r3
 8007622:	bb34      	cbnz	r4, 8007672 <_malloc_r+0x82>
 8007624:	4629      	mov	r1, r5
 8007626:	4638      	mov	r0, r7
 8007628:	f7ff ffc2 	bl	80075b0 <sbrk_aligned>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	4604      	mov	r4, r0
 8007630:	d14d      	bne.n	80076ce <_malloc_r+0xde>
 8007632:	6834      	ldr	r4, [r6, #0]
 8007634:	4626      	mov	r6, r4
 8007636:	2e00      	cmp	r6, #0
 8007638:	d140      	bne.n	80076bc <_malloc_r+0xcc>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	4631      	mov	r1, r6
 800763e:	4638      	mov	r0, r7
 8007640:	eb04 0803 	add.w	r8, r4, r3
 8007644:	f000 fb7e 	bl	8007d44 <_sbrk_r>
 8007648:	4580      	cmp	r8, r0
 800764a:	d13a      	bne.n	80076c2 <_malloc_r+0xd2>
 800764c:	6821      	ldr	r1, [r4, #0]
 800764e:	3503      	adds	r5, #3
 8007650:	1a6d      	subs	r5, r5, r1
 8007652:	f025 0503 	bic.w	r5, r5, #3
 8007656:	3508      	adds	r5, #8
 8007658:	2d0c      	cmp	r5, #12
 800765a:	bf38      	it	cc
 800765c:	250c      	movcc	r5, #12
 800765e:	4629      	mov	r1, r5
 8007660:	4638      	mov	r0, r7
 8007662:	f7ff ffa5 	bl	80075b0 <sbrk_aligned>
 8007666:	3001      	adds	r0, #1
 8007668:	d02b      	beq.n	80076c2 <_malloc_r+0xd2>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	442b      	add	r3, r5
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	e00e      	b.n	8007690 <_malloc_r+0xa0>
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	1b52      	subs	r2, r2, r5
 8007676:	d41e      	bmi.n	80076b6 <_malloc_r+0xc6>
 8007678:	2a0b      	cmp	r2, #11
 800767a:	d916      	bls.n	80076aa <_malloc_r+0xba>
 800767c:	1961      	adds	r1, r4, r5
 800767e:	42a3      	cmp	r3, r4
 8007680:	6025      	str	r5, [r4, #0]
 8007682:	bf18      	it	ne
 8007684:	6059      	strne	r1, [r3, #4]
 8007686:	6863      	ldr	r3, [r4, #4]
 8007688:	bf08      	it	eq
 800768a:	6031      	streq	r1, [r6, #0]
 800768c:	5162      	str	r2, [r4, r5]
 800768e:	604b      	str	r3, [r1, #4]
 8007690:	4638      	mov	r0, r7
 8007692:	f104 060b 	add.w	r6, r4, #11
 8007696:	f000 fc05 	bl	8007ea4 <__malloc_unlock>
 800769a:	f026 0607 	bic.w	r6, r6, #7
 800769e:	1d23      	adds	r3, r4, #4
 80076a0:	1af2      	subs	r2, r6, r3
 80076a2:	d0b6      	beq.n	8007612 <_malloc_r+0x22>
 80076a4:	1b9b      	subs	r3, r3, r6
 80076a6:	50a3      	str	r3, [r4, r2]
 80076a8:	e7b3      	b.n	8007612 <_malloc_r+0x22>
 80076aa:	6862      	ldr	r2, [r4, #4]
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	bf0c      	ite	eq
 80076b0:	6032      	streq	r2, [r6, #0]
 80076b2:	605a      	strne	r2, [r3, #4]
 80076b4:	e7ec      	b.n	8007690 <_malloc_r+0xa0>
 80076b6:	4623      	mov	r3, r4
 80076b8:	6864      	ldr	r4, [r4, #4]
 80076ba:	e7b2      	b.n	8007622 <_malloc_r+0x32>
 80076bc:	4634      	mov	r4, r6
 80076be:	6876      	ldr	r6, [r6, #4]
 80076c0:	e7b9      	b.n	8007636 <_malloc_r+0x46>
 80076c2:	230c      	movs	r3, #12
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	4638      	mov	r0, r7
 80076c8:	f000 fbec 	bl	8007ea4 <__malloc_unlock>
 80076cc:	e7a1      	b.n	8007612 <_malloc_r+0x22>
 80076ce:	6025      	str	r5, [r4, #0]
 80076d0:	e7de      	b.n	8007690 <_malloc_r+0xa0>
 80076d2:	bf00      	nop
 80076d4:	20000274 	.word	0x20000274

080076d8 <__sfputc_r>:
 80076d8:	6893      	ldr	r3, [r2, #8]
 80076da:	3b01      	subs	r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	b410      	push	{r4}
 80076e0:	6093      	str	r3, [r2, #8]
 80076e2:	da08      	bge.n	80076f6 <__sfputc_r+0x1e>
 80076e4:	6994      	ldr	r4, [r2, #24]
 80076e6:	42a3      	cmp	r3, r4
 80076e8:	db01      	blt.n	80076ee <__sfputc_r+0x16>
 80076ea:	290a      	cmp	r1, #10
 80076ec:	d103      	bne.n	80076f6 <__sfputc_r+0x1e>
 80076ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076f2:	f7ff bc31 	b.w	8006f58 <__swbuf_r>
 80076f6:	6813      	ldr	r3, [r2, #0]
 80076f8:	1c58      	adds	r0, r3, #1
 80076fa:	6010      	str	r0, [r2, #0]
 80076fc:	7019      	strb	r1, [r3, #0]
 80076fe:	4608      	mov	r0, r1
 8007700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007704:	4770      	bx	lr

08007706 <__sfputs_r>:
 8007706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007708:	4606      	mov	r6, r0
 800770a:	460f      	mov	r7, r1
 800770c:	4614      	mov	r4, r2
 800770e:	18d5      	adds	r5, r2, r3
 8007710:	42ac      	cmp	r4, r5
 8007712:	d101      	bne.n	8007718 <__sfputs_r+0x12>
 8007714:	2000      	movs	r0, #0
 8007716:	e007      	b.n	8007728 <__sfputs_r+0x22>
 8007718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771c:	463a      	mov	r2, r7
 800771e:	4630      	mov	r0, r6
 8007720:	f7ff ffda 	bl	80076d8 <__sfputc_r>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d1f3      	bne.n	8007710 <__sfputs_r+0xa>
 8007728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800772c <_vfiprintf_r>:
 800772c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	460d      	mov	r5, r1
 8007732:	b09d      	sub	sp, #116	; 0x74
 8007734:	4614      	mov	r4, r2
 8007736:	4698      	mov	r8, r3
 8007738:	4606      	mov	r6, r0
 800773a:	b118      	cbz	r0, 8007744 <_vfiprintf_r+0x18>
 800773c:	6983      	ldr	r3, [r0, #24]
 800773e:	b90b      	cbnz	r3, 8007744 <_vfiprintf_r+0x18>
 8007740:	f7ff fde4 	bl	800730c <__sinit>
 8007744:	4b89      	ldr	r3, [pc, #548]	; (800796c <_vfiprintf_r+0x240>)
 8007746:	429d      	cmp	r5, r3
 8007748:	d11b      	bne.n	8007782 <_vfiprintf_r+0x56>
 800774a:	6875      	ldr	r5, [r6, #4]
 800774c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774e:	07d9      	lsls	r1, r3, #31
 8007750:	d405      	bmi.n	800775e <_vfiprintf_r+0x32>
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	059a      	lsls	r2, r3, #22
 8007756:	d402      	bmi.n	800775e <_vfiprintf_r+0x32>
 8007758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800775a:	f7ff fe75 	bl	8007448 <__retarget_lock_acquire_recursive>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	071b      	lsls	r3, r3, #28
 8007762:	d501      	bpl.n	8007768 <_vfiprintf_r+0x3c>
 8007764:	692b      	ldr	r3, [r5, #16]
 8007766:	b9eb      	cbnz	r3, 80077a4 <_vfiprintf_r+0x78>
 8007768:	4629      	mov	r1, r5
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff fc46 	bl	8006ffc <__swsetup_r>
 8007770:	b1c0      	cbz	r0, 80077a4 <_vfiprintf_r+0x78>
 8007772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007774:	07dc      	lsls	r4, r3, #31
 8007776:	d50e      	bpl.n	8007796 <_vfiprintf_r+0x6a>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	b01d      	add	sp, #116	; 0x74
 800777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007782:	4b7b      	ldr	r3, [pc, #492]	; (8007970 <_vfiprintf_r+0x244>)
 8007784:	429d      	cmp	r5, r3
 8007786:	d101      	bne.n	800778c <_vfiprintf_r+0x60>
 8007788:	68b5      	ldr	r5, [r6, #8]
 800778a:	e7df      	b.n	800774c <_vfiprintf_r+0x20>
 800778c:	4b79      	ldr	r3, [pc, #484]	; (8007974 <_vfiprintf_r+0x248>)
 800778e:	429d      	cmp	r5, r3
 8007790:	bf08      	it	eq
 8007792:	68f5      	ldreq	r5, [r6, #12]
 8007794:	e7da      	b.n	800774c <_vfiprintf_r+0x20>
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	0598      	lsls	r0, r3, #22
 800779a:	d4ed      	bmi.n	8007778 <_vfiprintf_r+0x4c>
 800779c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800779e:	f7ff fe54 	bl	800744a <__retarget_lock_release_recursive>
 80077a2:	e7e9      	b.n	8007778 <_vfiprintf_r+0x4c>
 80077a4:	2300      	movs	r3, #0
 80077a6:	9309      	str	r3, [sp, #36]	; 0x24
 80077a8:	2320      	movs	r3, #32
 80077aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80077b2:	2330      	movs	r3, #48	; 0x30
 80077b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007978 <_vfiprintf_r+0x24c>
 80077b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077bc:	f04f 0901 	mov.w	r9, #1
 80077c0:	4623      	mov	r3, r4
 80077c2:	469a      	mov	sl, r3
 80077c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077c8:	b10a      	cbz	r2, 80077ce <_vfiprintf_r+0xa2>
 80077ca:	2a25      	cmp	r2, #37	; 0x25
 80077cc:	d1f9      	bne.n	80077c2 <_vfiprintf_r+0x96>
 80077ce:	ebba 0b04 	subs.w	fp, sl, r4
 80077d2:	d00b      	beq.n	80077ec <_vfiprintf_r+0xc0>
 80077d4:	465b      	mov	r3, fp
 80077d6:	4622      	mov	r2, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ff93 	bl	8007706 <__sfputs_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	f000 80aa 	beq.w	800793a <_vfiprintf_r+0x20e>
 80077e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e8:	445a      	add	r2, fp
 80077ea:	9209      	str	r2, [sp, #36]	; 0x24
 80077ec:	f89a 3000 	ldrb.w	r3, [sl]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80a2 	beq.w	800793a <_vfiprintf_r+0x20e>
 80077f6:	2300      	movs	r3, #0
 80077f8:	f04f 32ff 	mov.w	r2, #4294967295
 80077fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007800:	f10a 0a01 	add.w	sl, sl, #1
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	9307      	str	r3, [sp, #28]
 8007808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800780c:	931a      	str	r3, [sp, #104]	; 0x68
 800780e:	4654      	mov	r4, sl
 8007810:	2205      	movs	r2, #5
 8007812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007816:	4858      	ldr	r0, [pc, #352]	; (8007978 <_vfiprintf_r+0x24c>)
 8007818:	f7f8 fcda 	bl	80001d0 <memchr>
 800781c:	9a04      	ldr	r2, [sp, #16]
 800781e:	b9d8      	cbnz	r0, 8007858 <_vfiprintf_r+0x12c>
 8007820:	06d1      	lsls	r1, r2, #27
 8007822:	bf44      	itt	mi
 8007824:	2320      	movmi	r3, #32
 8007826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800782a:	0713      	lsls	r3, r2, #28
 800782c:	bf44      	itt	mi
 800782e:	232b      	movmi	r3, #43	; 0x2b
 8007830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007834:	f89a 3000 	ldrb.w	r3, [sl]
 8007838:	2b2a      	cmp	r3, #42	; 0x2a
 800783a:	d015      	beq.n	8007868 <_vfiprintf_r+0x13c>
 800783c:	9a07      	ldr	r2, [sp, #28]
 800783e:	4654      	mov	r4, sl
 8007840:	2000      	movs	r0, #0
 8007842:	f04f 0c0a 	mov.w	ip, #10
 8007846:	4621      	mov	r1, r4
 8007848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800784c:	3b30      	subs	r3, #48	; 0x30
 800784e:	2b09      	cmp	r3, #9
 8007850:	d94e      	bls.n	80078f0 <_vfiprintf_r+0x1c4>
 8007852:	b1b0      	cbz	r0, 8007882 <_vfiprintf_r+0x156>
 8007854:	9207      	str	r2, [sp, #28]
 8007856:	e014      	b.n	8007882 <_vfiprintf_r+0x156>
 8007858:	eba0 0308 	sub.w	r3, r0, r8
 800785c:	fa09 f303 	lsl.w	r3, r9, r3
 8007860:	4313      	orrs	r3, r2
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	46a2      	mov	sl, r4
 8007866:	e7d2      	b.n	800780e <_vfiprintf_r+0xe2>
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	1d19      	adds	r1, r3, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	9103      	str	r1, [sp, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	bfbb      	ittet	lt
 8007874:	425b      	neglt	r3, r3
 8007876:	f042 0202 	orrlt.w	r2, r2, #2
 800787a:	9307      	strge	r3, [sp, #28]
 800787c:	9307      	strlt	r3, [sp, #28]
 800787e:	bfb8      	it	lt
 8007880:	9204      	strlt	r2, [sp, #16]
 8007882:	7823      	ldrb	r3, [r4, #0]
 8007884:	2b2e      	cmp	r3, #46	; 0x2e
 8007886:	d10c      	bne.n	80078a2 <_vfiprintf_r+0x176>
 8007888:	7863      	ldrb	r3, [r4, #1]
 800788a:	2b2a      	cmp	r3, #42	; 0x2a
 800788c:	d135      	bne.n	80078fa <_vfiprintf_r+0x1ce>
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	1d1a      	adds	r2, r3, #4
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	9203      	str	r2, [sp, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfb8      	it	lt
 800789a:	f04f 33ff 	movlt.w	r3, #4294967295
 800789e:	3402      	adds	r4, #2
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007988 <_vfiprintf_r+0x25c>
 80078a6:	7821      	ldrb	r1, [r4, #0]
 80078a8:	2203      	movs	r2, #3
 80078aa:	4650      	mov	r0, sl
 80078ac:	f7f8 fc90 	bl	80001d0 <memchr>
 80078b0:	b140      	cbz	r0, 80078c4 <_vfiprintf_r+0x198>
 80078b2:	2340      	movs	r3, #64	; 0x40
 80078b4:	eba0 000a 	sub.w	r0, r0, sl
 80078b8:	fa03 f000 	lsl.w	r0, r3, r0
 80078bc:	9b04      	ldr	r3, [sp, #16]
 80078be:	4303      	orrs	r3, r0
 80078c0:	3401      	adds	r4, #1
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c8:	482c      	ldr	r0, [pc, #176]	; (800797c <_vfiprintf_r+0x250>)
 80078ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078ce:	2206      	movs	r2, #6
 80078d0:	f7f8 fc7e 	bl	80001d0 <memchr>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d03f      	beq.n	8007958 <_vfiprintf_r+0x22c>
 80078d8:	4b29      	ldr	r3, [pc, #164]	; (8007980 <_vfiprintf_r+0x254>)
 80078da:	bb1b      	cbnz	r3, 8007924 <_vfiprintf_r+0x1f8>
 80078dc:	9b03      	ldr	r3, [sp, #12]
 80078de:	3307      	adds	r3, #7
 80078e0:	f023 0307 	bic.w	r3, r3, #7
 80078e4:	3308      	adds	r3, #8
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ea:	443b      	add	r3, r7
 80078ec:	9309      	str	r3, [sp, #36]	; 0x24
 80078ee:	e767      	b.n	80077c0 <_vfiprintf_r+0x94>
 80078f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80078f4:	460c      	mov	r4, r1
 80078f6:	2001      	movs	r0, #1
 80078f8:	e7a5      	b.n	8007846 <_vfiprintf_r+0x11a>
 80078fa:	2300      	movs	r3, #0
 80078fc:	3401      	adds	r4, #1
 80078fe:	9305      	str	r3, [sp, #20]
 8007900:	4619      	mov	r1, r3
 8007902:	f04f 0c0a 	mov.w	ip, #10
 8007906:	4620      	mov	r0, r4
 8007908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800790c:	3a30      	subs	r2, #48	; 0x30
 800790e:	2a09      	cmp	r2, #9
 8007910:	d903      	bls.n	800791a <_vfiprintf_r+0x1ee>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0c5      	beq.n	80078a2 <_vfiprintf_r+0x176>
 8007916:	9105      	str	r1, [sp, #20]
 8007918:	e7c3      	b.n	80078a2 <_vfiprintf_r+0x176>
 800791a:	fb0c 2101 	mla	r1, ip, r1, r2
 800791e:	4604      	mov	r4, r0
 8007920:	2301      	movs	r3, #1
 8007922:	e7f0      	b.n	8007906 <_vfiprintf_r+0x1da>
 8007924:	ab03      	add	r3, sp, #12
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	462a      	mov	r2, r5
 800792a:	4b16      	ldr	r3, [pc, #88]	; (8007984 <_vfiprintf_r+0x258>)
 800792c:	a904      	add	r1, sp, #16
 800792e:	4630      	mov	r0, r6
 8007930:	f3af 8000 	nop.w
 8007934:	4607      	mov	r7, r0
 8007936:	1c78      	adds	r0, r7, #1
 8007938:	d1d6      	bne.n	80078e8 <_vfiprintf_r+0x1bc>
 800793a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800793c:	07d9      	lsls	r1, r3, #31
 800793e:	d405      	bmi.n	800794c <_vfiprintf_r+0x220>
 8007940:	89ab      	ldrh	r3, [r5, #12]
 8007942:	059a      	lsls	r2, r3, #22
 8007944:	d402      	bmi.n	800794c <_vfiprintf_r+0x220>
 8007946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007948:	f7ff fd7f 	bl	800744a <__retarget_lock_release_recursive>
 800794c:	89ab      	ldrh	r3, [r5, #12]
 800794e:	065b      	lsls	r3, r3, #25
 8007950:	f53f af12 	bmi.w	8007778 <_vfiprintf_r+0x4c>
 8007954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007956:	e711      	b.n	800777c <_vfiprintf_r+0x50>
 8007958:	ab03      	add	r3, sp, #12
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	462a      	mov	r2, r5
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <_vfiprintf_r+0x258>)
 8007960:	a904      	add	r1, sp, #16
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f880 	bl	8007a68 <_printf_i>
 8007968:	e7e4      	b.n	8007934 <_vfiprintf_r+0x208>
 800796a:	bf00      	nop
 800796c:	080084c0 	.word	0x080084c0
 8007970:	080084e0 	.word	0x080084e0
 8007974:	080084a0 	.word	0x080084a0
 8007978:	08008500 	.word	0x08008500
 800797c:	0800850a 	.word	0x0800850a
 8007980:	00000000 	.word	0x00000000
 8007984:	08007707 	.word	0x08007707
 8007988:	08008506 	.word	0x08008506

0800798c <_printf_common>:
 800798c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007990:	4616      	mov	r6, r2
 8007992:	4699      	mov	r9, r3
 8007994:	688a      	ldr	r2, [r1, #8]
 8007996:	690b      	ldr	r3, [r1, #16]
 8007998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800799c:	4293      	cmp	r3, r2
 800799e:	bfb8      	it	lt
 80079a0:	4613      	movlt	r3, r2
 80079a2:	6033      	str	r3, [r6, #0]
 80079a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a8:	4607      	mov	r7, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	b10a      	cbz	r2, 80079b2 <_printf_common+0x26>
 80079ae:	3301      	adds	r3, #1
 80079b0:	6033      	str	r3, [r6, #0]
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	0699      	lsls	r1, r3, #26
 80079b6:	bf42      	ittt	mi
 80079b8:	6833      	ldrmi	r3, [r6, #0]
 80079ba:	3302      	addmi	r3, #2
 80079bc:	6033      	strmi	r3, [r6, #0]
 80079be:	6825      	ldr	r5, [r4, #0]
 80079c0:	f015 0506 	ands.w	r5, r5, #6
 80079c4:	d106      	bne.n	80079d4 <_printf_common+0x48>
 80079c6:	f104 0a19 	add.w	sl, r4, #25
 80079ca:	68e3      	ldr	r3, [r4, #12]
 80079cc:	6832      	ldr	r2, [r6, #0]
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	42ab      	cmp	r3, r5
 80079d2:	dc26      	bgt.n	8007a22 <_printf_common+0x96>
 80079d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d8:	1e13      	subs	r3, r2, #0
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	bf18      	it	ne
 80079de:	2301      	movne	r3, #1
 80079e0:	0692      	lsls	r2, r2, #26
 80079e2:	d42b      	bmi.n	8007a3c <_printf_common+0xb0>
 80079e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e8:	4649      	mov	r1, r9
 80079ea:	4638      	mov	r0, r7
 80079ec:	47c0      	blx	r8
 80079ee:	3001      	adds	r0, #1
 80079f0:	d01e      	beq.n	8007a30 <_printf_common+0xa4>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	68e5      	ldr	r5, [r4, #12]
 80079f6:	6832      	ldr	r2, [r6, #0]
 80079f8:	f003 0306 	and.w	r3, r3, #6
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	bf08      	it	eq
 8007a00:	1aad      	subeq	r5, r5, r2
 8007a02:	68a3      	ldr	r3, [r4, #8]
 8007a04:	6922      	ldr	r2, [r4, #16]
 8007a06:	bf0c      	ite	eq
 8007a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a0c:	2500      	movne	r5, #0
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	bfc4      	itt	gt
 8007a12:	1a9b      	subgt	r3, r3, r2
 8007a14:	18ed      	addgt	r5, r5, r3
 8007a16:	2600      	movs	r6, #0
 8007a18:	341a      	adds	r4, #26
 8007a1a:	42b5      	cmp	r5, r6
 8007a1c:	d11a      	bne.n	8007a54 <_printf_common+0xc8>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e008      	b.n	8007a34 <_printf_common+0xa8>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4652      	mov	r2, sl
 8007a26:	4649      	mov	r1, r9
 8007a28:	4638      	mov	r0, r7
 8007a2a:	47c0      	blx	r8
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d103      	bne.n	8007a38 <_printf_common+0xac>
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a38:	3501      	adds	r5, #1
 8007a3a:	e7c6      	b.n	80079ca <_printf_common+0x3e>
 8007a3c:	18e1      	adds	r1, r4, r3
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	2030      	movs	r0, #48	; 0x30
 8007a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a46:	4422      	add	r2, r4
 8007a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a50:	3302      	adds	r3, #2
 8007a52:	e7c7      	b.n	80079e4 <_printf_common+0x58>
 8007a54:	2301      	movs	r3, #1
 8007a56:	4622      	mov	r2, r4
 8007a58:	4649      	mov	r1, r9
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	47c0      	blx	r8
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d0e6      	beq.n	8007a30 <_printf_common+0xa4>
 8007a62:	3601      	adds	r6, #1
 8007a64:	e7d9      	b.n	8007a1a <_printf_common+0x8e>
	...

08007a68 <_printf_i>:
 8007a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a6c:	7e0f      	ldrb	r7, [r1, #24]
 8007a6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a70:	2f78      	cmp	r7, #120	; 0x78
 8007a72:	4691      	mov	r9, r2
 8007a74:	4680      	mov	r8, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	469a      	mov	sl, r3
 8007a7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a7e:	d807      	bhi.n	8007a90 <_printf_i+0x28>
 8007a80:	2f62      	cmp	r7, #98	; 0x62
 8007a82:	d80a      	bhi.n	8007a9a <_printf_i+0x32>
 8007a84:	2f00      	cmp	r7, #0
 8007a86:	f000 80d8 	beq.w	8007c3a <_printf_i+0x1d2>
 8007a8a:	2f58      	cmp	r7, #88	; 0x58
 8007a8c:	f000 80a3 	beq.w	8007bd6 <_printf_i+0x16e>
 8007a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a98:	e03a      	b.n	8007b10 <_printf_i+0xa8>
 8007a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a9e:	2b15      	cmp	r3, #21
 8007aa0:	d8f6      	bhi.n	8007a90 <_printf_i+0x28>
 8007aa2:	a101      	add	r1, pc, #4	; (adr r1, 8007aa8 <_printf_i+0x40>)
 8007aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa8:	08007b01 	.word	0x08007b01
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007a91 	.word	0x08007a91
 8007ab4:	08007a91 	.word	0x08007a91
 8007ab8:	08007a91 	.word	0x08007a91
 8007abc:	08007a91 	.word	0x08007a91
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007a91 	.word	0x08007a91
 8007ac8:	08007a91 	.word	0x08007a91
 8007acc:	08007a91 	.word	0x08007a91
 8007ad0:	08007a91 	.word	0x08007a91
 8007ad4:	08007c21 	.word	0x08007c21
 8007ad8:	08007b45 	.word	0x08007b45
 8007adc:	08007c03 	.word	0x08007c03
 8007ae0:	08007a91 	.word	0x08007a91
 8007ae4:	08007a91 	.word	0x08007a91
 8007ae8:	08007c43 	.word	0x08007c43
 8007aec:	08007a91 	.word	0x08007a91
 8007af0:	08007b45 	.word	0x08007b45
 8007af4:	08007a91 	.word	0x08007a91
 8007af8:	08007a91 	.word	0x08007a91
 8007afc:	08007c0b 	.word	0x08007c0b
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	1d1a      	adds	r2, r3, #4
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	602a      	str	r2, [r5, #0]
 8007b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b10:	2301      	movs	r3, #1
 8007b12:	e0a3      	b.n	8007c5c <_printf_i+0x1f4>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	6829      	ldr	r1, [r5, #0]
 8007b18:	0606      	lsls	r6, r0, #24
 8007b1a:	f101 0304 	add.w	r3, r1, #4
 8007b1e:	d50a      	bpl.n	8007b36 <_printf_i+0xce>
 8007b20:	680e      	ldr	r6, [r1, #0]
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	da03      	bge.n	8007b30 <_printf_i+0xc8>
 8007b28:	232d      	movs	r3, #45	; 0x2d
 8007b2a:	4276      	negs	r6, r6
 8007b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b30:	485e      	ldr	r0, [pc, #376]	; (8007cac <_printf_i+0x244>)
 8007b32:	230a      	movs	r3, #10
 8007b34:	e019      	b.n	8007b6a <_printf_i+0x102>
 8007b36:	680e      	ldr	r6, [r1, #0]
 8007b38:	602b      	str	r3, [r5, #0]
 8007b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b3e:	bf18      	it	ne
 8007b40:	b236      	sxthne	r6, r6
 8007b42:	e7ef      	b.n	8007b24 <_printf_i+0xbc>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	6820      	ldr	r0, [r4, #0]
 8007b48:	1d19      	adds	r1, r3, #4
 8007b4a:	6029      	str	r1, [r5, #0]
 8007b4c:	0601      	lsls	r1, r0, #24
 8007b4e:	d501      	bpl.n	8007b54 <_printf_i+0xec>
 8007b50:	681e      	ldr	r6, [r3, #0]
 8007b52:	e002      	b.n	8007b5a <_printf_i+0xf2>
 8007b54:	0646      	lsls	r6, r0, #25
 8007b56:	d5fb      	bpl.n	8007b50 <_printf_i+0xe8>
 8007b58:	881e      	ldrh	r6, [r3, #0]
 8007b5a:	4854      	ldr	r0, [pc, #336]	; (8007cac <_printf_i+0x244>)
 8007b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b5e:	bf0c      	ite	eq
 8007b60:	2308      	moveq	r3, #8
 8007b62:	230a      	movne	r3, #10
 8007b64:	2100      	movs	r1, #0
 8007b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b6a:	6865      	ldr	r5, [r4, #4]
 8007b6c:	60a5      	str	r5, [r4, #8]
 8007b6e:	2d00      	cmp	r5, #0
 8007b70:	bfa2      	ittt	ge
 8007b72:	6821      	ldrge	r1, [r4, #0]
 8007b74:	f021 0104 	bicge.w	r1, r1, #4
 8007b78:	6021      	strge	r1, [r4, #0]
 8007b7a:	b90e      	cbnz	r6, 8007b80 <_printf_i+0x118>
 8007b7c:	2d00      	cmp	r5, #0
 8007b7e:	d04d      	beq.n	8007c1c <_printf_i+0x1b4>
 8007b80:	4615      	mov	r5, r2
 8007b82:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b86:	fb03 6711 	mls	r7, r3, r1, r6
 8007b8a:	5dc7      	ldrb	r7, [r0, r7]
 8007b8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b90:	4637      	mov	r7, r6
 8007b92:	42bb      	cmp	r3, r7
 8007b94:	460e      	mov	r6, r1
 8007b96:	d9f4      	bls.n	8007b82 <_printf_i+0x11a>
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d10b      	bne.n	8007bb4 <_printf_i+0x14c>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	07de      	lsls	r6, r3, #31
 8007ba0:	d508      	bpl.n	8007bb4 <_printf_i+0x14c>
 8007ba2:	6923      	ldr	r3, [r4, #16]
 8007ba4:	6861      	ldr	r1, [r4, #4]
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	bfde      	ittt	le
 8007baa:	2330      	movle	r3, #48	; 0x30
 8007bac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bb4:	1b52      	subs	r2, r2, r5
 8007bb6:	6122      	str	r2, [r4, #16]
 8007bb8:	f8cd a000 	str.w	sl, [sp]
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	aa03      	add	r2, sp, #12
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	f7ff fee2 	bl	800798c <_printf_common>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d14c      	bne.n	8007c66 <_printf_i+0x1fe>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	b004      	add	sp, #16
 8007bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd6:	4835      	ldr	r0, [pc, #212]	; (8007cac <_printf_i+0x244>)
 8007bd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bdc:	6829      	ldr	r1, [r5, #0]
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be4:	6029      	str	r1, [r5, #0]
 8007be6:	061d      	lsls	r5, r3, #24
 8007be8:	d514      	bpl.n	8007c14 <_printf_i+0x1ac>
 8007bea:	07df      	lsls	r7, r3, #31
 8007bec:	bf44      	itt	mi
 8007bee:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf2:	6023      	strmi	r3, [r4, #0]
 8007bf4:	b91e      	cbnz	r6, 8007bfe <_printf_i+0x196>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	f023 0320 	bic.w	r3, r3, #32
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	2310      	movs	r3, #16
 8007c00:	e7b0      	b.n	8007b64 <_printf_i+0xfc>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f043 0320 	orr.w	r3, r3, #32
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	2378      	movs	r3, #120	; 0x78
 8007c0c:	4828      	ldr	r0, [pc, #160]	; (8007cb0 <_printf_i+0x248>)
 8007c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c12:	e7e3      	b.n	8007bdc <_printf_i+0x174>
 8007c14:	0659      	lsls	r1, r3, #25
 8007c16:	bf48      	it	mi
 8007c18:	b2b6      	uxthmi	r6, r6
 8007c1a:	e7e6      	b.n	8007bea <_printf_i+0x182>
 8007c1c:	4615      	mov	r5, r2
 8007c1e:	e7bb      	b.n	8007b98 <_printf_i+0x130>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	6826      	ldr	r6, [r4, #0]
 8007c24:	6961      	ldr	r1, [r4, #20]
 8007c26:	1d18      	adds	r0, r3, #4
 8007c28:	6028      	str	r0, [r5, #0]
 8007c2a:	0635      	lsls	r5, r6, #24
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0x1cc>
 8007c30:	6019      	str	r1, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <_printf_i+0x1d2>
 8007c34:	0670      	lsls	r0, r6, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0x1c8>
 8007c38:	8019      	strh	r1, [r3, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	6123      	str	r3, [r4, #16]
 8007c3e:	4615      	mov	r5, r2
 8007c40:	e7ba      	b.n	8007bb8 <_printf_i+0x150>
 8007c42:	682b      	ldr	r3, [r5, #0]
 8007c44:	1d1a      	adds	r2, r3, #4
 8007c46:	602a      	str	r2, [r5, #0]
 8007c48:	681d      	ldr	r5, [r3, #0]
 8007c4a:	6862      	ldr	r2, [r4, #4]
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f7f8 fabe 	bl	80001d0 <memchr>
 8007c54:	b108      	cbz	r0, 8007c5a <_printf_i+0x1f2>
 8007c56:	1b40      	subs	r0, r0, r5
 8007c58:	6060      	str	r0, [r4, #4]
 8007c5a:	6863      	ldr	r3, [r4, #4]
 8007c5c:	6123      	str	r3, [r4, #16]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c64:	e7a8      	b.n	8007bb8 <_printf_i+0x150>
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	462a      	mov	r2, r5
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	47d0      	blx	sl
 8007c70:	3001      	adds	r0, #1
 8007c72:	d0ab      	beq.n	8007bcc <_printf_i+0x164>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	079b      	lsls	r3, r3, #30
 8007c78:	d413      	bmi.n	8007ca2 <_printf_i+0x23a>
 8007c7a:	68e0      	ldr	r0, [r4, #12]
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	4298      	cmp	r0, r3
 8007c80:	bfb8      	it	lt
 8007c82:	4618      	movlt	r0, r3
 8007c84:	e7a4      	b.n	8007bd0 <_printf_i+0x168>
 8007c86:	2301      	movs	r3, #1
 8007c88:	4632      	mov	r2, r6
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	47d0      	blx	sl
 8007c90:	3001      	adds	r0, #1
 8007c92:	d09b      	beq.n	8007bcc <_printf_i+0x164>
 8007c94:	3501      	adds	r5, #1
 8007c96:	68e3      	ldr	r3, [r4, #12]
 8007c98:	9903      	ldr	r1, [sp, #12]
 8007c9a:	1a5b      	subs	r3, r3, r1
 8007c9c:	42ab      	cmp	r3, r5
 8007c9e:	dcf2      	bgt.n	8007c86 <_printf_i+0x21e>
 8007ca0:	e7eb      	b.n	8007c7a <_printf_i+0x212>
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	f104 0619 	add.w	r6, r4, #25
 8007ca8:	e7f5      	b.n	8007c96 <_printf_i+0x22e>
 8007caa:	bf00      	nop
 8007cac:	08008511 	.word	0x08008511
 8007cb0:	08008522 	.word	0x08008522

08007cb4 <_putc_r>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	460d      	mov	r5, r1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	4606      	mov	r6, r0
 8007cbc:	b118      	cbz	r0, 8007cc6 <_putc_r+0x12>
 8007cbe:	6983      	ldr	r3, [r0, #24]
 8007cc0:	b90b      	cbnz	r3, 8007cc6 <_putc_r+0x12>
 8007cc2:	f7ff fb23 	bl	800730c <__sinit>
 8007cc6:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <_putc_r+0x84>)
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	d124      	bne.n	8007d16 <_putc_r+0x62>
 8007ccc:	6874      	ldr	r4, [r6, #4]
 8007cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cd0:	07d8      	lsls	r0, r3, #31
 8007cd2:	d405      	bmi.n	8007ce0 <_putc_r+0x2c>
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	0599      	lsls	r1, r3, #22
 8007cd8:	d402      	bmi.n	8007ce0 <_putc_r+0x2c>
 8007cda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cdc:	f7ff fbb4 	bl	8007448 <__retarget_lock_acquire_recursive>
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	60a3      	str	r3, [r4, #8]
 8007ce8:	da05      	bge.n	8007cf6 <_putc_r+0x42>
 8007cea:	69a2      	ldr	r2, [r4, #24]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	db1c      	blt.n	8007d2a <_putc_r+0x76>
 8007cf0:	b2eb      	uxtb	r3, r5
 8007cf2:	2b0a      	cmp	r3, #10
 8007cf4:	d019      	beq.n	8007d2a <_putc_r+0x76>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	6022      	str	r2, [r4, #0]
 8007cfc:	701d      	strb	r5, [r3, #0]
 8007cfe:	b2ed      	uxtb	r5, r5
 8007d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d02:	07da      	lsls	r2, r3, #31
 8007d04:	d405      	bmi.n	8007d12 <_putc_r+0x5e>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	059b      	lsls	r3, r3, #22
 8007d0a:	d402      	bmi.n	8007d12 <_putc_r+0x5e>
 8007d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0e:	f7ff fb9c 	bl	800744a <__retarget_lock_release_recursive>
 8007d12:	4628      	mov	r0, r5
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
 8007d16:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <_putc_r+0x88>)
 8007d18:	429c      	cmp	r4, r3
 8007d1a:	d101      	bne.n	8007d20 <_putc_r+0x6c>
 8007d1c:	68b4      	ldr	r4, [r6, #8]
 8007d1e:	e7d6      	b.n	8007cce <_putc_r+0x1a>
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <_putc_r+0x8c>)
 8007d22:	429c      	cmp	r4, r3
 8007d24:	bf08      	it	eq
 8007d26:	68f4      	ldreq	r4, [r6, #12]
 8007d28:	e7d1      	b.n	8007cce <_putc_r+0x1a>
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7ff f912 	bl	8006f58 <__swbuf_r>
 8007d34:	4605      	mov	r5, r0
 8007d36:	e7e3      	b.n	8007d00 <_putc_r+0x4c>
 8007d38:	080084c0 	.word	0x080084c0
 8007d3c:	080084e0 	.word	0x080084e0
 8007d40:	080084a0 	.word	0x080084a0

08007d44 <_sbrk_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d06      	ldr	r5, [pc, #24]	; (8007d60 <_sbrk_r+0x1c>)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	602b      	str	r3, [r5, #0]
 8007d50:	f7f9 fa94 	bl	800127c <_sbrk>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <_sbrk_r+0x1a>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b103      	cbz	r3, 8007d5e <_sbrk_r+0x1a>
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	2000027c 	.word	0x2000027c

08007d64 <__sread>:
 8007d64:	b510      	push	{r4, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6c:	f000 f8a0 	bl	8007eb0 <_read_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	bfab      	itete	ge
 8007d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d76:	89a3      	ldrhlt	r3, [r4, #12]
 8007d78:	181b      	addge	r3, r3, r0
 8007d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d7e:	bfac      	ite	ge
 8007d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d82:	81a3      	strhlt	r3, [r4, #12]
 8007d84:	bd10      	pop	{r4, pc}

08007d86 <__swrite>:
 8007d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	898b      	ldrh	r3, [r1, #12]
 8007d8e:	05db      	lsls	r3, r3, #23
 8007d90:	4605      	mov	r5, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	4616      	mov	r6, r2
 8007d96:	d505      	bpl.n	8007da4 <__swrite+0x1e>
 8007d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f000 f868 	bl	8007e74 <_lseek_r>
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dae:	81a3      	strh	r3, [r4, #12]
 8007db0:	4632      	mov	r2, r6
 8007db2:	463b      	mov	r3, r7
 8007db4:	4628      	mov	r0, r5
 8007db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	f000 b817 	b.w	8007dec <_write_r>

08007dbe <__sseek>:
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc6:	f000 f855 	bl	8007e74 <_lseek_r>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	bf15      	itete	ne
 8007dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dda:	81a3      	strheq	r3, [r4, #12]
 8007ddc:	bf18      	it	ne
 8007dde:	81a3      	strhne	r3, [r4, #12]
 8007de0:	bd10      	pop	{r4, pc}

08007de2 <__sclose>:
 8007de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de6:	f000 b813 	b.w	8007e10 <_close_r>
	...

08007dec <_write_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	; (8007e0c <_write_r+0x20>)
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f000 f911 	bl	8008022 <_write>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_write_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_write_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	2000027c 	.word	0x2000027c

08007e10 <_close_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d06      	ldr	r5, [pc, #24]	; (8007e2c <_close_r+0x1c>)
 8007e14:	2300      	movs	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f000 f932 	bl	8008084 <_close>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_close_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_close_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	2000027c 	.word	0x2000027c

08007e30 <_fstat_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d07      	ldr	r5, [pc, #28]	; (8007e50 <_fstat_r+0x20>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	602b      	str	r3, [r5, #0]
 8007e3e:	f000 f968 	bl	8008112 <_fstat>
 8007e42:	1c43      	adds	r3, r0, #1
 8007e44:	d102      	bne.n	8007e4c <_fstat_r+0x1c>
 8007e46:	682b      	ldr	r3, [r5, #0]
 8007e48:	b103      	cbz	r3, 8007e4c <_fstat_r+0x1c>
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	bd38      	pop	{r3, r4, r5, pc}
 8007e4e:	bf00      	nop
 8007e50:	2000027c 	.word	0x2000027c

08007e54 <_isatty_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d06      	ldr	r5, [pc, #24]	; (8007e70 <_isatty_r+0x1c>)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	f000 fabe 	bl	80083e0 <_isatty>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_isatty_r+0x1a>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_isatty_r+0x1a>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	2000027c 	.word	0x2000027c

08007e74 <_lseek_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4d07      	ldr	r5, [pc, #28]	; (8007e94 <_lseek_r+0x20>)
 8007e78:	4604      	mov	r4, r0
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	602a      	str	r2, [r5, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f000 f8bb 	bl	8007ffe <_lseek>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_lseek_r+0x1e>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_lseek_r+0x1e>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	2000027c 	.word	0x2000027c

08007e98 <__malloc_lock>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__malloc_lock+0x8>)
 8007e9a:	f7ff bad5 	b.w	8007448 <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	20000270 	.word	0x20000270

08007ea4 <__malloc_unlock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__malloc_unlock+0x8>)
 8007ea6:	f7ff bad0 	b.w	800744a <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	20000270 	.word	0x20000270

08007eb0 <_read_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d07      	ldr	r5, [pc, #28]	; (8007ed0 <_read_r+0x20>)
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	4608      	mov	r0, r1
 8007eb8:	4611      	mov	r1, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	602a      	str	r2, [r5, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f000 f845 	bl	8007f4e <_read>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_read_r+0x1e>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_read_r+0x1e>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	2000027c 	.word	0x2000027c

08007ed4 <findslot>:
 8007ed4:	4b0a      	ldr	r3, [pc, #40]	; (8007f00 <findslot+0x2c>)
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	4604      	mov	r4, r0
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	b118      	cbz	r0, 8007ee6 <findslot+0x12>
 8007ede:	6983      	ldr	r3, [r0, #24]
 8007ee0:	b90b      	cbnz	r3, 8007ee6 <findslot+0x12>
 8007ee2:	f7ff fa13 	bl	800730c <__sinit>
 8007ee6:	2c13      	cmp	r4, #19
 8007ee8:	d807      	bhi.n	8007efa <findslot+0x26>
 8007eea:	4806      	ldr	r0, [pc, #24]	; (8007f04 <findslot+0x30>)
 8007eec:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007ef0:	3201      	adds	r2, #1
 8007ef2:	d002      	beq.n	8007efa <findslot+0x26>
 8007ef4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	2000      	movs	r0, #0
 8007efc:	e7fc      	b.n	8007ef8 <findslot+0x24>
 8007efe:	bf00      	nop
 8007f00:	2000000c 	.word	0x2000000c
 8007f04:	2000028c 	.word	0x2000028c

08007f08 <error>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	f7fe ff4e 	bl	8006dac <__errno>
 8007f10:	2613      	movs	r6, #19
 8007f12:	4605      	mov	r5, r0
 8007f14:	2700      	movs	r7, #0
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	beab      	bkpt	0x00ab
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	602e      	str	r6, [r5, #0]
 8007f20:	4620      	mov	r0, r4
 8007f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f24 <checkerror>:
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d101      	bne.n	8007f2c <checkerror+0x8>
 8007f28:	f7ff bfee 	b.w	8007f08 <error>
 8007f2c:	4770      	bx	lr

08007f2e <_swiread>:
 8007f2e:	b530      	push	{r4, r5, lr}
 8007f30:	b085      	sub	sp, #20
 8007f32:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007f36:	9203      	str	r2, [sp, #12]
 8007f38:	2406      	movs	r4, #6
 8007f3a:	ad01      	add	r5, sp, #4
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	beab      	bkpt	0x00ab
 8007f42:	4604      	mov	r4, r0
 8007f44:	4620      	mov	r0, r4
 8007f46:	f7ff ffed 	bl	8007f24 <checkerror>
 8007f4a:	b005      	add	sp, #20
 8007f4c:	bd30      	pop	{r4, r5, pc}

08007f4e <_read>:
 8007f4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f50:	4615      	mov	r5, r2
 8007f52:	9101      	str	r1, [sp, #4]
 8007f54:	f7ff ffbe 	bl	8007ed4 <findslot>
 8007f58:	9901      	ldr	r1, [sp, #4]
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	b938      	cbnz	r0, 8007f6e <_read+0x20>
 8007f5e:	f7fe ff25 	bl	8006dac <__errno>
 8007f62:	2309      	movs	r3, #9
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6a:	b003      	add	sp, #12
 8007f6c:	bd30      	pop	{r4, r5, pc}
 8007f6e:	6800      	ldr	r0, [r0, #0]
 8007f70:	462a      	mov	r2, r5
 8007f72:	f7ff ffdc 	bl	8007f2e <_swiread>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	d0f7      	beq.n	8007f6a <_read+0x1c>
 8007f7a:	6863      	ldr	r3, [r4, #4]
 8007f7c:	1a2a      	subs	r2, r5, r0
 8007f7e:	4413      	add	r3, r2
 8007f80:	6063      	str	r3, [r4, #4]
 8007f82:	4610      	mov	r0, r2
 8007f84:	e7f1      	b.n	8007f6a <_read+0x1c>

08007f86 <_swilseek>:
 8007f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4616      	mov	r6, r2
 8007f8c:	f7ff ffa2 	bl	8007ed4 <findslot>
 8007f90:	4605      	mov	r5, r0
 8007f92:	b940      	cbnz	r0, 8007fa6 <_swilseek+0x20>
 8007f94:	f7fe ff0a 	bl	8006dac <__errno>
 8007f98:	2309      	movs	r3, #9
 8007f9a:	6003      	str	r3, [r0, #0]
 8007f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	b003      	add	sp, #12
 8007fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa6:	2e02      	cmp	r6, #2
 8007fa8:	d903      	bls.n	8007fb2 <_swilseek+0x2c>
 8007faa:	f7fe feff 	bl	8006dac <__errno>
 8007fae:	2316      	movs	r3, #22
 8007fb0:	e7f3      	b.n	8007f9a <_swilseek+0x14>
 8007fb2:	2e01      	cmp	r6, #1
 8007fb4:	d112      	bne.n	8007fdc <_swilseek+0x56>
 8007fb6:	6843      	ldr	r3, [r0, #4]
 8007fb8:	18e4      	adds	r4, r4, r3
 8007fba:	d4f6      	bmi.n	8007faa <_swilseek+0x24>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	260a      	movs	r6, #10
 8007fc0:	e9cd 3400 	strd	r3, r4, [sp]
 8007fc4:	466f      	mov	r7, sp
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	beab      	bkpt	0x00ab
 8007fcc:	4606      	mov	r6, r0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ffa8 	bl	8007f24 <checkerror>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	dbe1      	blt.n	8007f9c <_swilseek+0x16>
 8007fd8:	606c      	str	r4, [r5, #4]
 8007fda:	e7e1      	b.n	8007fa0 <_swilseek+0x1a>
 8007fdc:	2e02      	cmp	r6, #2
 8007fde:	d1ed      	bne.n	8007fbc <_swilseek+0x36>
 8007fe0:	6803      	ldr	r3, [r0, #0]
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	260c      	movs	r6, #12
 8007fe6:	466f      	mov	r7, sp
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	beab      	bkpt	0x00ab
 8007fee:	4606      	mov	r6, r0
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff ff97 	bl	8007f24 <checkerror>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	d0d0      	beq.n	8007f9c <_swilseek+0x16>
 8007ffa:	4404      	add	r4, r0
 8007ffc:	e7de      	b.n	8007fbc <_swilseek+0x36>

08007ffe <_lseek>:
 8007ffe:	f7ff bfc2 	b.w	8007f86 <_swilseek>

08008002 <_swiwrite>:
 8008002:	b530      	push	{r4, r5, lr}
 8008004:	b085      	sub	sp, #20
 8008006:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800800a:	9203      	str	r2, [sp, #12]
 800800c:	2405      	movs	r4, #5
 800800e:	ad01      	add	r5, sp, #4
 8008010:	4620      	mov	r0, r4
 8008012:	4629      	mov	r1, r5
 8008014:	beab      	bkpt	0x00ab
 8008016:	4604      	mov	r4, r0
 8008018:	4620      	mov	r0, r4
 800801a:	f7ff ff83 	bl	8007f24 <checkerror>
 800801e:	b005      	add	sp, #20
 8008020:	bd30      	pop	{r4, r5, pc}

08008022 <_write>:
 8008022:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008024:	4615      	mov	r5, r2
 8008026:	9101      	str	r1, [sp, #4]
 8008028:	f7ff ff54 	bl	8007ed4 <findslot>
 800802c:	9901      	ldr	r1, [sp, #4]
 800802e:	4604      	mov	r4, r0
 8008030:	b930      	cbnz	r0, 8008040 <_write+0x1e>
 8008032:	f7fe febb 	bl	8006dac <__errno>
 8008036:	2309      	movs	r3, #9
 8008038:	6003      	str	r3, [r0, #0]
 800803a:	f04f 30ff 	mov.w	r0, #4294967295
 800803e:	e012      	b.n	8008066 <_write+0x44>
 8008040:	6800      	ldr	r0, [r0, #0]
 8008042:	462a      	mov	r2, r5
 8008044:	f7ff ffdd 	bl	8008002 <_swiwrite>
 8008048:	2800      	cmp	r0, #0
 800804a:	dbf6      	blt.n	800803a <_write+0x18>
 800804c:	6862      	ldr	r2, [r4, #4]
 800804e:	1a2b      	subs	r3, r5, r0
 8008050:	441a      	add	r2, r3
 8008052:	42a8      	cmp	r0, r5
 8008054:	6062      	str	r2, [r4, #4]
 8008056:	d105      	bne.n	8008064 <_write+0x42>
 8008058:	2000      	movs	r0, #0
 800805a:	b003      	add	sp, #12
 800805c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008060:	f7ff bf52 	b.w	8007f08 <error>
 8008064:	4618      	mov	r0, r3
 8008066:	b003      	add	sp, #12
 8008068:	bd30      	pop	{r4, r5, pc}

0800806a <_swiclose>:
 800806a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800806c:	2402      	movs	r4, #2
 800806e:	9001      	str	r0, [sp, #4]
 8008070:	ad01      	add	r5, sp, #4
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	beab      	bkpt	0x00ab
 8008078:	4604      	mov	r4, r0
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff ff52 	bl	8007f24 <checkerror>
 8008080:	b003      	add	sp, #12
 8008082:	bd30      	pop	{r4, r5, pc}

08008084 <_close>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4605      	mov	r5, r0
 8008088:	f7ff ff24 	bl	8007ed4 <findslot>
 800808c:	4604      	mov	r4, r0
 800808e:	b930      	cbnz	r0, 800809e <_close+0x1a>
 8008090:	f7fe fe8c 	bl	8006dac <__errno>
 8008094:	2309      	movs	r3, #9
 8008096:	6003      	str	r3, [r0, #0]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	bd38      	pop	{r3, r4, r5, pc}
 800809e:	3d01      	subs	r5, #1
 80080a0:	2d01      	cmp	r5, #1
 80080a2:	d809      	bhi.n	80080b8 <_close+0x34>
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <_close+0x48>)
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d104      	bne.n	80080b8 <_close+0x34>
 80080ae:	f04f 33ff 	mov.w	r3, #4294967295
 80080b2:	6003      	str	r3, [r0, #0]
 80080b4:	2000      	movs	r0, #0
 80080b6:	e7f1      	b.n	800809c <_close+0x18>
 80080b8:	6820      	ldr	r0, [r4, #0]
 80080ba:	f7ff ffd6 	bl	800806a <_swiclose>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d1ec      	bne.n	800809c <_close+0x18>
 80080c2:	f04f 33ff 	mov.w	r3, #4294967295
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	e7e8      	b.n	800809c <_close+0x18>
 80080ca:	bf00      	nop
 80080cc:	2000028c 	.word	0x2000028c

080080d0 <_swistat>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	460c      	mov	r4, r1
 80080d4:	f7ff fefe 	bl	8007ed4 <findslot>
 80080d8:	4605      	mov	r5, r0
 80080da:	b930      	cbnz	r0, 80080ea <_swistat+0x1a>
 80080dc:	f7fe fe66 	bl	8006dac <__errno>
 80080e0:	2309      	movs	r3, #9
 80080e2:	6003      	str	r3, [r0, #0]
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	6863      	ldr	r3, [r4, #4]
 80080ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80080f8:	260c      	movs	r6, #12
 80080fa:	4630      	mov	r0, r6
 80080fc:	4629      	mov	r1, r5
 80080fe:	beab      	bkpt	0x00ab
 8008100:	4605      	mov	r5, r0
 8008102:	4628      	mov	r0, r5
 8008104:	f7ff ff0e 	bl	8007f24 <checkerror>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	bf1c      	itt	ne
 800810c:	6120      	strne	r0, [r4, #16]
 800810e:	2000      	movne	r0, #0
 8008110:	e7ea      	b.n	80080e8 <_swistat+0x18>

08008112 <_fstat>:
 8008112:	460b      	mov	r3, r1
 8008114:	b510      	push	{r4, lr}
 8008116:	2100      	movs	r1, #0
 8008118:	4604      	mov	r4, r0
 800811a:	2258      	movs	r2, #88	; 0x58
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fe6f 	bl	8006e00 <memset>
 8008122:	4601      	mov	r1, r0
 8008124:	4620      	mov	r0, r4
 8008126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800812a:	f7ff bfd1 	b.w	80080d0 <_swistat>

0800812e <_stat>:
 800812e:	b538      	push	{r3, r4, r5, lr}
 8008130:	460d      	mov	r5, r1
 8008132:	4604      	mov	r4, r0
 8008134:	2258      	movs	r2, #88	; 0x58
 8008136:	2100      	movs	r1, #0
 8008138:	4628      	mov	r0, r5
 800813a:	f7fe fe61 	bl	8006e00 <memset>
 800813e:	4620      	mov	r0, r4
 8008140:	2100      	movs	r1, #0
 8008142:	f000 f811 	bl	8008168 <_swiopen>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	4604      	mov	r4, r0
 800814a:	d00b      	beq.n	8008164 <_stat+0x36>
 800814c:	686b      	ldr	r3, [r5, #4]
 800814e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008152:	606b      	str	r3, [r5, #4]
 8008154:	4629      	mov	r1, r5
 8008156:	f7ff ffbb 	bl	80080d0 <_swistat>
 800815a:	4605      	mov	r5, r0
 800815c:	4620      	mov	r0, r4
 800815e:	f7ff ff91 	bl	8008084 <_close>
 8008162:	462c      	mov	r4, r5
 8008164:	4620      	mov	r0, r4
 8008166:	bd38      	pop	{r3, r4, r5, pc}

08008168 <_swiopen>:
 8008168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800816c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008218 <_swiopen+0xb0>
 8008170:	b097      	sub	sp, #92	; 0x5c
 8008172:	4607      	mov	r7, r0
 8008174:	460e      	mov	r6, r1
 8008176:	2500      	movs	r5, #0
 8008178:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800817c:	1c61      	adds	r1, r4, #1
 800817e:	d037      	beq.n	80081f0 <_swiopen+0x88>
 8008180:	3501      	adds	r5, #1
 8008182:	2d14      	cmp	r5, #20
 8008184:	d1f8      	bne.n	8008178 <_swiopen+0x10>
 8008186:	f7fe fe11 	bl	8006dac <__errno>
 800818a:	2318      	movs	r3, #24
 800818c:	6003      	str	r3, [r0, #0]
 800818e:	f04f 34ff 	mov.w	r4, #4294967295
 8008192:	e03d      	b.n	8008210 <_swiopen+0xa8>
 8008194:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8008198:	f240 6301 	movw	r3, #1537	; 0x601
 800819c:	07b2      	lsls	r2, r6, #30
 800819e:	bf48      	it	mi
 80081a0:	f044 0402 	orrmi.w	r4, r4, #2
 80081a4:	421e      	tst	r6, r3
 80081a6:	bf18      	it	ne
 80081a8:	f044 0404 	orrne.w	r4, r4, #4
 80081ac:	0733      	lsls	r3, r6, #28
 80081ae:	bf48      	it	mi
 80081b0:	f024 0404 	bicmi.w	r4, r4, #4
 80081b4:	4638      	mov	r0, r7
 80081b6:	bf48      	it	mi
 80081b8:	f044 0408 	orrmi.w	r4, r4, #8
 80081bc:	9700      	str	r7, [sp, #0]
 80081be:	f7f8 f857 	bl	8000270 <strlen>
 80081c2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80081c6:	2401      	movs	r4, #1
 80081c8:	4620      	mov	r0, r4
 80081ca:	4649      	mov	r1, r9
 80081cc:	beab      	bkpt	0x00ab
 80081ce:	4604      	mov	r4, r0
 80081d0:	2c00      	cmp	r4, #0
 80081d2:	db08      	blt.n	80081e6 <_swiopen+0x7e>
 80081d4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80081d8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80081dc:	2300      	movs	r3, #0
 80081de:	f8c8 3004 	str.w	r3, [r8, #4]
 80081e2:	462c      	mov	r4, r5
 80081e4:	e014      	b.n	8008210 <_swiopen+0xa8>
 80081e6:	4620      	mov	r0, r4
 80081e8:	f7ff fe8e 	bl	8007f08 <error>
 80081ec:	4604      	mov	r4, r0
 80081ee:	e00f      	b.n	8008210 <_swiopen+0xa8>
 80081f0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80081f4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80081f8:	46e9      	mov	r9, sp
 80081fa:	d1cb      	bne.n	8008194 <_swiopen+0x2c>
 80081fc:	4649      	mov	r1, r9
 80081fe:	4638      	mov	r0, r7
 8008200:	f7ff ff95 	bl	800812e <_stat>
 8008204:	3001      	adds	r0, #1
 8008206:	d0c5      	beq.n	8008194 <_swiopen+0x2c>
 8008208:	f7fe fdd0 	bl	8006dac <__errno>
 800820c:	2311      	movs	r3, #17
 800820e:	6003      	str	r3, [r0, #0]
 8008210:	4620      	mov	r0, r4
 8008212:	b017      	add	sp, #92	; 0x5c
 8008214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008218:	2000028c 	.word	0x2000028c

0800821c <_get_semihosting_exts>:
 800821c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008220:	4606      	mov	r6, r0
 8008222:	460f      	mov	r7, r1
 8008224:	482a      	ldr	r0, [pc, #168]	; (80082d0 <_get_semihosting_exts+0xb4>)
 8008226:	2100      	movs	r1, #0
 8008228:	4615      	mov	r5, r2
 800822a:	f7ff ff9d 	bl	8008168 <_swiopen>
 800822e:	462a      	mov	r2, r5
 8008230:	4604      	mov	r4, r0
 8008232:	2100      	movs	r1, #0
 8008234:	4630      	mov	r0, r6
 8008236:	f7fe fde3 	bl	8006e00 <memset>
 800823a:	1c63      	adds	r3, r4, #1
 800823c:	d016      	beq.n	800826c <_get_semihosting_exts+0x50>
 800823e:	4620      	mov	r0, r4
 8008240:	f7ff fe48 	bl	8007ed4 <findslot>
 8008244:	f04f 090c 	mov.w	r9, #12
 8008248:	4680      	mov	r8, r0
 800824a:	4648      	mov	r0, r9
 800824c:	4641      	mov	r1, r8
 800824e:	beab      	bkpt	0x00ab
 8008250:	4680      	mov	r8, r0
 8008252:	4640      	mov	r0, r8
 8008254:	f7ff fe66 	bl	8007f24 <checkerror>
 8008258:	2803      	cmp	r0, #3
 800825a:	dd02      	ble.n	8008262 <_get_semihosting_exts+0x46>
 800825c:	1ec3      	subs	r3, r0, #3
 800825e:	42ab      	cmp	r3, r5
 8008260:	dc08      	bgt.n	8008274 <_get_semihosting_exts+0x58>
 8008262:	4620      	mov	r0, r4
 8008264:	f7ff ff0e 	bl	8008084 <_close>
 8008268:	f04f 34ff 	mov.w	r4, #4294967295
 800826c:	4620      	mov	r0, r4
 800826e:	b003      	add	sp, #12
 8008270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008274:	2204      	movs	r2, #4
 8008276:	eb0d 0102 	add.w	r1, sp, r2
 800827a:	4620      	mov	r0, r4
 800827c:	f7ff fe67 	bl	8007f4e <_read>
 8008280:	2803      	cmp	r0, #3
 8008282:	ddee      	ble.n	8008262 <_get_semihosting_exts+0x46>
 8008284:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008288:	2b53      	cmp	r3, #83	; 0x53
 800828a:	d1ea      	bne.n	8008262 <_get_semihosting_exts+0x46>
 800828c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008290:	2b48      	cmp	r3, #72	; 0x48
 8008292:	d1e6      	bne.n	8008262 <_get_semihosting_exts+0x46>
 8008294:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008298:	2b46      	cmp	r3, #70	; 0x46
 800829a:	d1e2      	bne.n	8008262 <_get_semihosting_exts+0x46>
 800829c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80082a0:	2b42      	cmp	r3, #66	; 0x42
 80082a2:	d1de      	bne.n	8008262 <_get_semihosting_exts+0x46>
 80082a4:	2201      	movs	r2, #1
 80082a6:	4639      	mov	r1, r7
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7ff fe6c 	bl	8007f86 <_swilseek>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	dbd7      	blt.n	8008262 <_get_semihosting_exts+0x46>
 80082b2:	462a      	mov	r2, r5
 80082b4:	4631      	mov	r1, r6
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff fe49 	bl	8007f4e <_read>
 80082bc:	4605      	mov	r5, r0
 80082be:	4620      	mov	r0, r4
 80082c0:	f7ff fee0 	bl	8008084 <_close>
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7ff fe2d 	bl	8007f24 <checkerror>
 80082ca:	4604      	mov	r4, r0
 80082cc:	e7ce      	b.n	800826c <_get_semihosting_exts+0x50>
 80082ce:	bf00      	nop
 80082d0:	08008533 	.word	0x08008533

080082d4 <initialise_semihosting_exts>:
 80082d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082d6:	4d0a      	ldr	r5, [pc, #40]	; (8008300 <initialise_semihosting_exts+0x2c>)
 80082d8:	4c0a      	ldr	r4, [pc, #40]	; (8008304 <initialise_semihosting_exts+0x30>)
 80082da:	2100      	movs	r1, #0
 80082dc:	2201      	movs	r2, #1
 80082de:	a801      	add	r0, sp, #4
 80082e0:	6029      	str	r1, [r5, #0]
 80082e2:	6022      	str	r2, [r4, #0]
 80082e4:	f7ff ff9a 	bl	800821c <_get_semihosting_exts>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	dd07      	ble.n	80082fc <initialise_semihosting_exts+0x28>
 80082ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082f0:	f003 0201 	and.w	r2, r3, #1
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	602a      	str	r2, [r5, #0]
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	b003      	add	sp, #12
 80082fe:	bd30      	pop	{r4, r5, pc}
 8008300:	20000070 	.word	0x20000070
 8008304:	20000074 	.word	0x20000074

08008308 <_has_ext_stdout_stderr>:
 8008308:	b510      	push	{r4, lr}
 800830a:	4c04      	ldr	r4, [pc, #16]	; (800831c <_has_ext_stdout_stderr+0x14>)
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	da01      	bge.n	8008316 <_has_ext_stdout_stderr+0xe>
 8008312:	f7ff ffdf 	bl	80082d4 <initialise_semihosting_exts>
 8008316:	6820      	ldr	r0, [r4, #0]
 8008318:	bd10      	pop	{r4, pc}
 800831a:	bf00      	nop
 800831c:	20000074 	.word	0x20000074

08008320 <initialise_monitor_handles>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	b085      	sub	sp, #20
 8008326:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80083d8 <initialise_monitor_handles+0xb8>
 800832a:	f8cd 9004 	str.w	r9, [sp, #4]
 800832e:	2303      	movs	r3, #3
 8008330:	2400      	movs	r4, #0
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	af01      	add	r7, sp, #4
 8008336:	9402      	str	r4, [sp, #8]
 8008338:	2501      	movs	r5, #1
 800833a:	4628      	mov	r0, r5
 800833c:	4639      	mov	r1, r7
 800833e:	beab      	bkpt	0x00ab
 8008340:	4605      	mov	r5, r0
 8008342:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80083dc <initialise_monitor_handles+0xbc>
 8008346:	4623      	mov	r3, r4
 8008348:	4c20      	ldr	r4, [pc, #128]	; (80083cc <initialise_monitor_handles+0xac>)
 800834a:	f8c8 5000 	str.w	r5, [r8]
 800834e:	f04f 32ff 	mov.w	r2, #4294967295
 8008352:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8008356:	3301      	adds	r3, #1
 8008358:	2b14      	cmp	r3, #20
 800835a:	d1fa      	bne.n	8008352 <initialise_monitor_handles+0x32>
 800835c:	f7ff ffd4 	bl	8008308 <_has_ext_stdout_stderr>
 8008360:	4d1b      	ldr	r5, [pc, #108]	; (80083d0 <initialise_monitor_handles+0xb0>)
 8008362:	b1d0      	cbz	r0, 800839a <initialise_monitor_handles+0x7a>
 8008364:	f04f 0a03 	mov.w	sl, #3
 8008368:	2304      	movs	r3, #4
 800836a:	f8cd 9004 	str.w	r9, [sp, #4]
 800836e:	2601      	movs	r6, #1
 8008370:	f8cd a00c 	str.w	sl, [sp, #12]
 8008374:	9302      	str	r3, [sp, #8]
 8008376:	4630      	mov	r0, r6
 8008378:	4639      	mov	r1, r7
 800837a:	beab      	bkpt	0x00ab
 800837c:	4683      	mov	fp, r0
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <initialise_monitor_handles+0xb4>)
 8008380:	f8cd 9004 	str.w	r9, [sp, #4]
 8008384:	f8c3 b000 	str.w	fp, [r3]
 8008388:	2308      	movs	r3, #8
 800838a:	f8cd a00c 	str.w	sl, [sp, #12]
 800838e:	9302      	str	r3, [sp, #8]
 8008390:	4630      	mov	r0, r6
 8008392:	4639      	mov	r1, r7
 8008394:	beab      	bkpt	0x00ab
 8008396:	4606      	mov	r6, r0
 8008398:	602e      	str	r6, [r5, #0]
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	bf02      	ittt	eq
 80083a0:	4b0c      	ldreq	r3, [pc, #48]	; (80083d4 <initialise_monitor_handles+0xb4>)
 80083a2:	681b      	ldreq	r3, [r3, #0]
 80083a4:	602b      	streq	r3, [r5, #0]
 80083a6:	2600      	movs	r6, #0
 80083a8:	f8d8 3000 	ldr.w	r3, [r8]
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	6066      	str	r6, [r4, #4]
 80083b0:	f7ff ffaa 	bl	8008308 <_has_ext_stdout_stderr>
 80083b4:	b130      	cbz	r0, 80083c4 <initialise_monitor_handles+0xa4>
 80083b6:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <initialise_monitor_handles+0xb4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80083c4:	b005      	add	sp, #20
 80083c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ca:	bf00      	nop
 80083cc:	2000028c 	.word	0x2000028c
 80083d0:	20000280 	.word	0x20000280
 80083d4:	20000288 	.word	0x20000288
 80083d8:	08008549 	.word	0x08008549
 80083dc:	20000284 	.word	0x20000284

080083e0 <_isatty>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	f7ff fd77 	bl	8007ed4 <findslot>
 80083e6:	2509      	movs	r5, #9
 80083e8:	4604      	mov	r4, r0
 80083ea:	b920      	cbnz	r0, 80083f6 <_isatty+0x16>
 80083ec:	f7fe fcde 	bl	8006dac <__errno>
 80083f0:	6005      	str	r5, [r0, #0]
 80083f2:	4620      	mov	r0, r4
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	4628      	mov	r0, r5
 80083f8:	4621      	mov	r1, r4
 80083fa:	beab      	bkpt	0x00ab
 80083fc:	4604      	mov	r4, r0
 80083fe:	2c01      	cmp	r4, #1
 8008400:	d0f7      	beq.n	80083f2 <_isatty+0x12>
 8008402:	f7fe fcd3 	bl	8006dac <__errno>
 8008406:	2400      	movs	r4, #0
 8008408:	4605      	mov	r5, r0
 800840a:	2613      	movs	r6, #19
 800840c:	4630      	mov	r0, r6
 800840e:	4621      	mov	r1, r4
 8008410:	beab      	bkpt	0x00ab
 8008412:	4606      	mov	r6, r0
 8008414:	602e      	str	r6, [r5, #0]
 8008416:	e7ec      	b.n	80083f2 <_isatty+0x12>

08008418 <_init>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr

08008424 <_fini>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr
