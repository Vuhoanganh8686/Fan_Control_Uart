
Fan_Control_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c10  08006c10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c10  08006c10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c10  08006c10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001f0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001482a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb8  00000000  00000000  00034866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00037520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f73a  00000000  00000000  00039640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160b7  00000000  00000000  00058d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c08a9  00000000  00000000  0006ee31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f6da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000475c  00000000  00000000  0012f72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bc0 	.word	0x08006bc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006bc0 	.word	0x08006bc0

080001c8 <flash_erase>:
FLASH_EraseInitTypeDef flash_erase_control_mode_init;
FLASH_EraseInitTypeDef flash_erase_wind_mode_init;


void flash_erase()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    /*
	 * @brief init flash erase variables
	 */
	flash_erase_power_init.TypeErase =  FLASH_TYPEERASE_PAGES;
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <flash_erase+0x48>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
	flash_erase_power_init.NbPages = 1;
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <flash_erase+0x48>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	609a      	str	r2, [r3, #8]
	flash_erase_power_init.PageAddress = ADDR_FLASH_PAGE_0;
 80001d8:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <flash_erase+0x48>)
 80001da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001de:	605a      	str	r2, [r3, #4]

	flash_erase_control_mode_init.TypeErase = FLASH_TYPEERASE_PAGES ;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <flash_erase+0x4c>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
	flash_erase_control_mode_init.NbPages = 1;
 80001e6:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <flash_erase+0x4c>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	609a      	str	r2, [r3, #8]
	flash_erase_control_mode_init.PageAddress = ADDR_FLASH_PAGE_1;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <flash_erase+0x4c>)
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <flash_erase+0x50>)
 80001f0:	605a      	str	r2, [r3, #4]

	flash_erase_wind_mode_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <flash_erase+0x54>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
	flash_erase_wind_mode_init.NbPages = 1;
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <flash_erase+0x54>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	609a      	str	r2, [r3, #8]
	flash_erase_wind_mode_init.PageAddress = ADDR_FLASH_PAGE_2;
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <flash_erase+0x54>)
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <flash_erase+0x58>)
 8000202:	605a      	str	r2, [r3, #4]
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000030 	.word	0x20000030
 8000214:	2000003c 	.word	0x2000003c
 8000218:	08004000 	.word	0x08004000
 800021c:	20000048 	.word	0x20000048
 8000220:	08008000 	.word	0x08008000

08000224 <mutate_power>:

void mutate_power(POWER power){
 8000224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000228:	b097      	sub	sp, #92	; 0x5c
 800022a:	af10      	add	r7, sp, #64	; 0x40
 800022c:	4603      	mov	r3, r0
 800022e:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Mutate power variable
	 * @param power set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_1;
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <mutate_power+0xb8>)
 8000232:	617b      	str	r3, [r7, #20]

	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_2;
 8000234:	4b2a      	ldr	r3, [pc, #168]	; (80002e0 <mutate_power+0xbc>)
 8000236:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_0;
 8000238:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800023c:	60fb      	str	r3, [r7, #12]
	if(*p_power != power){
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	429a      	cmp	r2, r3
 8000246:	d044      	beq.n	80002d2 <mutate_power+0xae>
		if(power == OFF){
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d114      	bne.n	8000278 <mutate_power+0x54>
			wind_control(htim1, LEVEL_0);
 800024e:	4e25      	ldr	r6, [pc, #148]	; (80002e4 <mutate_power+0xc0>)
 8000250:	2300      	movs	r3, #0
 8000252:	930f      	str	r3, [sp, #60]	; 0x3c
 8000254:	466d      	mov	r5, sp
 8000256:	f106 0410 	add.w	r4, r6, #16
 800025a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800025c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800025e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000266:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800026a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800026e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000272:	f000 f8f3 	bl	800045c <wind_control>
 8000276:	e019      	b.n	80002ac <mutate_power+0x88>
		}
		else{
			if(*p_control_mode == MANUAL){
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d115      	bne.n	80002ac <mutate_power+0x88>
				wind_control(htim1, *p_wind_mode);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	b2db      	uxtb	r3, r3
 8000286:	4e17      	ldr	r6, [pc, #92]	; (80002e4 <mutate_power+0xc0>)
 8000288:	930f      	str	r3, [sp, #60]	; 0x3c
 800028a:	466d      	mov	r5, sp
 800028c:	f106 0410 	add.w	r4, r6, #16
 8000290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800029a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800029c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80002a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80002a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002a8:	f000 f8d8 	bl	800045c <wind_control>
			}
		}
		HAL_FLASH_Unlock();
 80002ac:	f002 fb68 	bl	8002980 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, &p_error_page);
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <mutate_power+0xc4>)
 80002b2:	480e      	ldr	r0, [pc, #56]	; (80002ec <mutate_power+0xc8>)
 80002b4:	f002 fc28 	bl	8002b08 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_0, power);
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	2200      	movs	r2, #0
 80002bc:	4698      	mov	r8, r3
 80002be:	4691      	mov	r9, r2
 80002c0:	4642      	mov	r2, r8
 80002c2:	464b      	mov	r3, r9
 80002c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80002c8:	2003      	movs	r0, #3
 80002ca:	f002 fae9 	bl	80028a0 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80002ce:	f002 fb7d 	bl	80029cc <HAL_FLASH_Lock>
	}
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002dc:	08004000 	.word	0x08004000
 80002e0:	08008000 	.word	0x08008000
 80002e4:	200000a4 	.word	0x200000a4
 80002e8:	2000002c 	.word	0x2000002c
 80002ec:	20000030 	.word	0x20000030

080002f0 <mutate_control_mode>:

void mutate_control_mode(CONTROL_MODE control_mode){
 80002f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f2:	b095      	sub	sp, #84	; 0x54
 80002f4:	af10      	add	r7, sp, #64	; 0x40
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate control mode variable
	 * @control_mode set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_1;
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <mutate_control_mode+0x7c>)
 80002fc:	60fb      	str	r3, [r7, #12]
	if(*p_control_mode != control_mode){
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	429a      	cmp	r2, r3
 8000306:	d02c      	beq.n	8000362 <mutate_control_mode+0x72>
		HAL_FLASH_Unlock();
 8000308:	f002 fb3a 	bl	8002980 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, &p_error_page);
 800030c:	4918      	ldr	r1, [pc, #96]	; (8000370 <mutate_control_mode+0x80>)
 800030e:	4819      	ldr	r0, [pc, #100]	; (8000374 <mutate_control_mode+0x84>)
 8000310:	f002 fbfa 	bl	8002b08 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_1, control_mode);
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2200      	movs	r2, #0
 8000318:	461c      	mov	r4, r3
 800031a:	4615      	mov	r5, r2
 800031c:	4622      	mov	r2, r4
 800031e:	462b      	mov	r3, r5
 8000320:	4912      	ldr	r1, [pc, #72]	; (800036c <mutate_control_mode+0x7c>)
 8000322:	2003      	movs	r0, #3
 8000324:	f002 fabc 	bl	80028a0 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8000328:	f002 fb50 	bl	80029cc <HAL_FLASH_Lock>
		if(control_mode == MANUAL){
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d117      	bne.n	8000362 <mutate_control_mode+0x72>
			uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_2;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <mutate_control_mode+0x88>)
 8000334:	60bb      	str	r3, [r7, #8]
			wind_control(htim1, *p_wind_mode);
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4e0f      	ldr	r6, [pc, #60]	; (800037c <mutate_control_mode+0x8c>)
 800033e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000340:	466d      	mov	r5, sp
 8000342:	f106 0410 	add.w	r4, r6, #16
 8000346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800034a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800034c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800034e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000352:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000356:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800035a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800035e:	f000 f87d 	bl	800045c <wind_control>
		}
	}
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	bf00      	nop
 800036c:	08004000 	.word	0x08004000
 8000370:	2000002c 	.word	0x2000002c
 8000374:	2000003c 	.word	0x2000003c
 8000378:	08008000 	.word	0x08008000
 800037c:	200000a4 	.word	0x200000a4

08000380 <mutate_wind_mode>:

void mutate_wind_mode(WIND_MODE wind_mode){
 8000380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000382:	b095      	sub	sp, #84	; 0x54
 8000384:	af10      	add	r7, sp, #64	; 0x40
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate wind mode variable
	 * @wind_mode set value
	 */

	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_2;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <mutate_wind_mode+0x6c>)
 800038c:	60fb      	str	r3, [r7, #12]
	if(*p_wind_mode != wind_mode){
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	429a      	cmp	r2, r3
 8000396:	d025      	beq.n	80003e4 <mutate_wind_mode+0x64>
		HAL_FLASH_Unlock();
 8000398:	f002 faf2 	bl	8002980 <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, &p_error_page);
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <mutate_wind_mode+0x70>)
 800039e:	4815      	ldr	r0, [pc, #84]	; (80003f4 <mutate_wind_mode+0x74>)
 80003a0:	f002 fbb2 	bl	8002b08 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_2, wind_mode);
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2200      	movs	r2, #0
 80003a8:	461c      	mov	r4, r3
 80003aa:	4615      	mov	r5, r2
 80003ac:	4622      	mov	r2, r4
 80003ae:	462b      	mov	r3, r5
 80003b0:	490e      	ldr	r1, [pc, #56]	; (80003ec <mutate_wind_mode+0x6c>)
 80003b2:	2003      	movs	r0, #3
 80003b4:	f002 fa74 	bl	80028a0 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80003b8:	f002 fb08 	bl	80029cc <HAL_FLASH_Lock>
		wind_control(htim1, wind_mode);
 80003bc:	4e0e      	ldr	r6, [pc, #56]	; (80003f8 <mutate_wind_mode+0x78>)
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80003c2:	466d      	mov	r5, sp
 80003c4:	f106 0410 	add.w	r4, r6, #16
 80003c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80003d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80003dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003e0:	f000 f83c 	bl	800045c <wind_control>
	}
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ec:	08008000 	.word	0x08008000
 80003f0:	2000002c 	.word	0x2000002c
 80003f4:	20000048 	.word	0x20000048
 80003f8:	200000a4 	.word	0x200000a4

080003fc <get_power>:

uint8_t get_power(){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
	/*
	 * @return power
	 */
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_0;
 8000402:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000406:	607b      	str	r3, [r7, #4]
	return *p_power;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	b2db      	uxtb	r3, r3
}
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
	...

0800041c <get_control_mode>:

uint8_t get_control_mode(){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
	/*
	 * @return control mode
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_1;
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <get_control_mode+0x1c>)
 8000424:	607b      	str	r3, [r7, #4]
	return *p_control_mode;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	08004000 	.word	0x08004000

0800043c <get_wind_mode>:

uint8_t get_wind_mode(){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
	/*
	 * @return wind mode
	 */
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_2;
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <get_wind_mode+0x1c>)
 8000444:	607b      	str	r3, [r7, #4]
	return *p_wind_mode;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	b2db      	uxtb	r3, r3
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	08008000 	.word	0x08008000

0800045c <wind_control>:

void wind_control(TIM_HandleTypeDef tim_handle, WIND_MODE wind_mode){
 800045c:	b084      	sub	sp, #16
 800045e:	b490      	push	{r4, r7}
 8000460:	af00      	add	r7, sp, #0
 8000462:	f107 0408 	add.w	r4, r7, #8
 8000466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * @brief Control PWM
	 * @param tim_handler timer handler
	 * @param wind_mode wind level to be controlled
	 */
	switch(wind_mode){
 800046a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800046e:	2b02      	cmp	r3, #2
 8000470:	d00f      	beq.n	8000492 <wind_control+0x36>
 8000472:	2b02      	cmp	r3, #2
 8000474:	dc12      	bgt.n	800049c <wind_control+0x40>
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <wind_control+0x24>
 800047a:	2b01      	cmp	r3, #1
 800047c:	d004      	beq.n	8000488 <wind_control+0x2c>
		break;
	case LEVEL_2:
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
		break;
	}
}
 800047e:	e00d      	b.n	800049c <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 0);
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2200      	movs	r2, #0
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000486:	e009      	b.n	800049c <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 599);
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	f240 2257 	movw	r2, #599	; 0x257
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000490:	e004      	b.n	800049c <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	f240 321f 	movw	r2, #799	; 0x31f
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800049a:	bf00      	nop
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc90      	pop	{r4, r7}
 80004a2:	b004      	add	sp, #16
 80004a4:	4770      	bx	lr
	...

080004a8 <check_and_fix_variables>:

void check_and_fix_variables(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
	/*
	 *@brief check correctness of the flash memory storing state variables and fix
	 */
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_0;
 80004ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004b2:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_1;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <check_and_fix_variables+0x68>)
 80004b6:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_2;
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <check_and_fix_variables+0x6c>)
 80004ba:	607b      	str	r3, [r7, #4]
	if(*p_power != ON && *p_power != OFF){
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d006      	beq.n	80004d2 <check_and_fix_variables+0x2a>
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d002      	beq.n	80004d2 <check_and_fix_variables+0x2a>
		mutate_power(OFF);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f7ff fea9 	bl	8000224 <mutate_power>
	}
	if(*p_control_mode != AUTOMATIC && *p_control_mode != MANUAL){
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <check_and_fix_variables+0x40>
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d002      	beq.n	80004e8 <check_and_fix_variables+0x40>
		mutate_control_mode(AUTOMATIC);
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff ff04 	bl	80002f0 <mutate_control_mode>
	}
	if(*p_wind_mode != LEVEL_0 && *p_wind_mode != LEVEL_1 && *p_wind_mode != LEVEL_2){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00a      	beq.n	8000506 <check_and_fix_variables+0x5e>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d006      	beq.n	8000506 <check_and_fix_variables+0x5e>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d002      	beq.n	8000506 <check_and_fix_variables+0x5e>
		mutate_wind_mode(LEVEL_0);
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff ff3d 	bl	8000380 <mutate_wind_mode>
	}
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08004000 	.word	0x08004000
 8000514:	08008000 	.word	0x08008000

08000518 <restart_before_state>:

void restart_before_state(){
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	b095      	sub	sp, #84	; 0x54
 800051c:	af10      	add	r7, sp, #64	; 0x40
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_0;
 800051e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000522:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_1;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <restart_before_state+0x58>)
 8000526:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_2;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <restart_before_state+0x5c>)
 800052a:	607b      	str	r3, [r7, #4]
	if(*p_power == ON && *p_control_mode == MANUAL){
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d119      	bne.n	8000568 <restart_before_state+0x50>
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d115      	bne.n	8000568 <restart_before_state+0x50>
		wind_control(htim1, *p_wind_mode);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4e0d      	ldr	r6, [pc, #52]	; (8000578 <restart_before_state+0x60>)
 8000544:	930f      	str	r3, [sp, #60]	; 0x3c
 8000546:	466d      	mov	r5, sp
 8000548:	f106 0410 	add.w	r4, r6, #16
 800054c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800054e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000558:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800055c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000560:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000564:	f7ff ff7a 	bl	800045c <wind_control>
	}
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	08004000 	.word	0x08004000
 8000574:	08008000 	.word	0x08008000
 8000578:	200000a4 	.word	0x200000a4

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fe4f 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f84f 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 faa1 	bl	8000ad0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800058e:	f000 f917 	bl	80007c0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000592:	f000 f8a5 	bl	80006e0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000596:	f000 fa6b 	bl	8000a70 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 800059a:	f000 f9bd 	bl	8000918 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  flash_erase();
 800059e:	f7ff fe13 	bl	80001c8 <flash_erase>
  check_and_fix_variables();
 80005a2:	f7ff ff81 	bl	80004a8 <check_and_fix_variables>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005a6:	2100      	movs	r1, #0
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <main+0x94>)
 80005aa:	f004 fa13 	bl	80049d4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 80005ae:	4819      	ldr	r0, [pc, #100]	; (8000614 <main+0x98>)
 80005b0:	f004 f944 	bl	800483c <HAL_TIM_Base_Start_IT>
  restart_before_state();
 80005b4:	f7ff ffb0 	bl	8000518 <restart_before_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_UART_Receive(&huart1, receiveBuffer, 2, HAL_MAX_DELAY);
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	2202      	movs	r2, #2
 80005be:	4916      	ldr	r1, [pc, #88]	; (8000618 <main+0x9c>)
 80005c0:	4816      	ldr	r0, [pc, #88]	; (800061c <main+0xa0>)
 80005c2:	f005 fae1 	bl	8005b88 <HAL_UART_Receive>
	  if(*(receiveBuffer+1) == 0x04){
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <main+0x9c>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d107      	bne.n	80005de <main+0x62>
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 2, HAL_MAX_DELAY);
 80005ce:	4914      	ldr	r1, [pc, #80]	; (8000620 <main+0xa4>)
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2202      	movs	r2, #2
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <main+0xa0>)
 80005d8:	f005 fad6 	bl	8005b88 <HAL_UART_Receive>
 80005dc:	e006      	b.n	80005ec <main+0x70>
	  }
	  else{
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 3, HAL_MAX_DELAY);
 80005de:	4910      	ldr	r1, [pc, #64]	; (8000620 <main+0xa4>)
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	2203      	movs	r2, #3
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0xa0>)
 80005e8:	f005 face 	bl	8005b88 <HAL_UART_Receive>
	  }
	  uint8_t status = handle_message(receiveBuffer, sendBuffer);
 80005ec:	490d      	ldr	r1, [pc, #52]	; (8000624 <main+0xa8>)
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x9c>)
 80005f0:	f000 fab0 	bl	8000b54 <handle_message>
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
	  if(status != 0){
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0dc      	beq.n	80005b8 <main+0x3c>
		  HAL_UART_Transmit(&huart1, sendBuffer, status, HAL_MAX_DELAY);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	b29a      	uxth	r2, r3
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	4907      	ldr	r1, [pc, #28]	; (8000624 <main+0xa8>)
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <main+0xa0>)
 800060a:	f005 fa33 	bl	8005a74 <HAL_UART_Transmit>
  {
 800060e:	e7d3      	b.n	80005b8 <main+0x3c>
 8000610:	200000a4 	.word	0x200000a4
 8000614:	200000f0 	.word	0x200000f0
 8000618:	200001c8 	.word	0x200001c8
 800061c:	2000013c 	.word	0x2000013c
 8000620:	200001ca 	.word	0x200001ca
 8000624:	200001d0 	.word	0x200001d0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09e      	sub	sp, #120	; 0x78
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000632:	2228      	movs	r2, #40	; 0x28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 faba 	bl	8006bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	223c      	movs	r2, #60	; 0x3c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 faac 	bl	8006bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800066c:	2300      	movs	r3, #0
 800066e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fc65 	bl	8002f44 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000680:	f000 fa62 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fc8e 	bl	8003fc0 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006aa:	f000 fa4d 	bl	8000b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80006ae:	f243 0381 	movw	r3, #12417	; 0x3081
 80006b2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006be:	2300      	movs	r3, #0
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 feaf 	bl	800442c <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006d4:	f000 fa38 	bl	8000b48 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3778      	adds	r7, #120	; 0x78
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000704:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000708:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800070a:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <MX_ADC1_Init+0xdc>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_ADC1_Init+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_ADC1_Init+0xdc>)
 800072c:	2200      	movs	r2, #0
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000732:	2201      	movs	r2, #1
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC1_Init+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC1_Init+0xdc>)
 800074c:	2204      	movs	r2, #4
 800074e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000752:	2200      	movs	r2, #0
 8000754:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075c:	4817      	ldr	r0, [pc, #92]	; (80007bc <MX_ADC1_Init+0xdc>)
 800075e:	f000 fde5 	bl	800132c <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000768:	f000 f9ee 	bl	8000b48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_ADC1_Init+0xdc>)
 8000778:	f001 fdb2 	bl	80022e0 <HAL_ADCEx_MultiModeConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000782:	f000 f9e1 	bl	8000b48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000786:	2308      	movs	r3, #8
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2301      	movs	r3, #1
 800078c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC1_Init+0xdc>)
 80007a4:	f001 fab0 	bl	8001d08 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80007ae:	f000 f9cb 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000054 	.word	0x20000054

080007c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09a      	sub	sp, #104	; 0x68
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	222c      	movs	r2, #44	; 0x2c
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 f9d8 	bl	8006bb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000800:	4b43      	ldr	r3, [pc, #268]	; (8000910 <MX_TIM1_Init+0x150>)
 8000802:	4a44      	ldr	r2, [pc, #272]	; (8000914 <MX_TIM1_Init+0x154>)
 8000804:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000806:	4b42      	ldr	r3, [pc, #264]	; (8000910 <MX_TIM1_Init+0x150>)
 8000808:	224f      	movs	r2, #79	; 0x4f
 800080a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b40      	ldr	r3, [pc, #256]	; (8000910 <MX_TIM1_Init+0x150>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <MX_TIM1_Init+0x150>)
 8000814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000818:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <MX_TIM1_Init+0x150>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000820:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <MX_TIM1_Init+0x150>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <MX_TIM1_Init+0x150>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800082c:	4838      	ldr	r0, [pc, #224]	; (8000910 <MX_TIM1_Init+0x150>)
 800082e:	f003 ffad 	bl	800478c <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000838:	f000 f986 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000846:	4619      	mov	r1, r3
 8000848:	4831      	ldr	r0, [pc, #196]	; (8000910 <MX_TIM1_Init+0x150>)
 800084a:	f004 fad7 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000854:	f000 f978 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000858:	482d      	ldr	r0, [pc, #180]	; (8000910 <MX_TIM1_Init+0x150>)
 800085a:	f004 f859 	bl	8004910 <HAL_TIM_PWM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000864:	f000 f970 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000874:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000878:	4619      	mov	r1, r3
 800087a:	4825      	ldr	r0, [pc, #148]	; (8000910 <MX_TIM1_Init+0x150>)
 800087c:	f004 ffae 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000886:	f000 f95f 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088a:	2360      	movs	r3, #96	; 0x60
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000892:	2300      	movs	r3, #0
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000896:	2300      	movs	r3, #0
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	4818      	ldr	r0, [pc, #96]	; (8000910 <MX_TIM1_Init+0x150>)
 80008b0:	f004 f990 	bl	8004bd4 <HAL_TIM_PWM_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008ba:	f000 f945 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_TIM1_Init+0x150>)
 80008f4:	f004 fff2 	bl	80058dc <HAL_TIMEx_ConfigBreakDeadTime>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80008fe:	f000 f923 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <MX_TIM1_Init+0x150>)
 8000904:	f000 fb6a 	bl	8000fdc <HAL_TIM_MspPostInit>

}
 8000908:	bf00      	nop
 800090a:	3768      	adds	r7, #104	; 0x68
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000a4 	.word	0x200000a4
 8000914:	40012c00 	.word	0x40012c00

08000918 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09a      	sub	sp, #104	; 0x68
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	222c      	movs	r2, #44	; 0x2c
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f006 f92c 	bl	8006bb0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000958:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <MX_TIM8_Init+0x150>)
 800095a:	4a44      	ldr	r2, [pc, #272]	; (8000a6c <MX_TIM8_Init+0x154>)
 800095c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 800095e:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000960:	224f      	movs	r2, #79	; 0x4f
 8000962:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49999;
 800096a:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <MX_TIM8_Init+0x150>)
 800096c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000970:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <MX_TIM8_Init+0x150>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000984:	4838      	ldr	r0, [pc, #224]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000986:	f003 ff01 	bl	800478c <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000990:	f000 f8da 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800099e:	4619      	mov	r1, r3
 80009a0:	4831      	ldr	r0, [pc, #196]	; (8000a68 <MX_TIM8_Init+0x150>)
 80009a2:	f004 fa2b 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80009ac:	f000 f8cc 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009b0:	482d      	ldr	r0, [pc, #180]	; (8000a68 <MX_TIM8_Init+0x150>)
 80009b2:	f003 ffad 	bl	8004910 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80009bc:	f000 f8c4 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4825      	ldr	r0, [pc, #148]	; (8000a68 <MX_TIM8_Init+0x150>)
 80009d4:	f004 ff02 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80009de:	f000 f8b3 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e2:	2360      	movs	r3, #96	; 0x60
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000a08:	f004 f8e4 	bl	8004bd4 <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000a12:	f000 f899 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000a4c:	f004 ff46 	bl	80058dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000a56:	f000 f877 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MX_TIM8_Init+0x150>)
 8000a5c:	f000 fabe 	bl	8000fdc <HAL_TIM_MspPostInit>

}
 8000a60:	bf00      	nop
 8000a62:	3768      	adds	r7, #104	; 0x68
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000f0 	.word	0x200000f0
 8000a6c:	40013400 	.word	0x40013400

08000a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <MX_USART1_UART_Init+0x5c>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000ab4:	f004 ff90 	bl	80059d8 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f843 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000013c 	.word	0x2000013c
 8000acc:	40013800 	.word	0x40013800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b28:	6153      	str	r3, [r2, #20]
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_GPIO_Init+0x74>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <handle_message>:
POWER power = OFF;
WIND_MODE wind_mode = LEVEL_0;
CONTROL_MODE control_mode = AUTOMATIC;


uint8_t handle_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]

    *sent_buffer = 0x02;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2202      	movs	r2, #2
 8000b62:	701a      	strb	r2, [r3, #0]
    uint8_t send_length;
    uint8_t* stx = received_buffer;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	623b      	str	r3, [r7, #32]
    if(*stx != 0x02){
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d003      	beq.n	8000b78 <handle_message+0x24>
        send_length = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error_msg;
 8000b76:	e06a      	b.n	8000c4e <handle_message+0xfa>
    }

    uint8_t* txRxID  = received_buffer + 1;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buffer + 1;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buffer + 2;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	3302      	adds	r3, #2
 8000b88:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
    
    switch (*txRxID) {
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d832      	bhi.n	8000bfa <handle_message+0xa6>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <handle_message+0x48>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bc3 	.word	0x08000bc3
 8000ba4:	08000bd9 	.word	0x08000bd9
 8000ba8:	08000bef 	.word	0x08000bef
        case FRAME_TURN_ON_OFF:
            process_power_message(received_buffer, sent_buffer);
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f854 	bl	8000c5c <process_power_message>
            received_data_length = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000bc0:	e01f      	b.n	8000c02 <handle_message+0xae>
        
        case FRAME_SELECT_MODE:
            process_control_mode_message(received_buffer, sent_buffer);
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f878 	bl	8000cba <process_control_mode_message>
            received_data_length = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000bd6:	e014      	b.n	8000c02 <handle_message+0xae>
        
        case FRAME_SELECT_FAN_SPEED:
            process_wind_mode_message(received_buffer, sent_buffer);
 8000bd8:	6839      	ldr	r1, [r7, #0]
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f8a1 	bl	8000d22 <process_wind_mode_message>
            received_data_length = 1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000bec:	e009      	b.n	8000c02 <handle_message+0xae>
        
        case FRAME_READ_STATUS:
            return process_states_request_message(received_buffer, sent_buffer);
 8000bee:	6839      	ldr	r1, [r7, #0]
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f8d1 	bl	8000d98 <process_states_request_message>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	e02b      	b.n	8000c52 <handle_message+0xfe>
            received_data_length = 0;
            sent_data_length =  process_states_request_message(received_buffer, sent_buffer);
        
        default:
            send_length = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            goto error_msg;
 8000c00:	e025      	b.n	8000c4e <handle_message+0xfa>
    }

    *sent_frame_type = *txRxID+ 0x80;
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	3b80      	subs	r3, #128	; 0x80
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c14:	701a      	strb	r2, [r3, #0]

    uint8_t* received_ETX = received_buffer + 3 + received_data_length;
 8000c16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c1a:	3303      	adds	r3, #3
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d003      	beq.n	8000c32 <handle_message+0xde>
		send_length = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto error_msg;
 8000c30:	e00d      	b.n	8000c4e <handle_message+0xfa>
    }

    uint8_t* sent_ETX = sent_buffer + 3 + sent_data_length; 
 8000c32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c36:	3303      	adds	r3, #3
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2203      	movs	r2, #3
 8000c42:	701a      	strb	r2, [r3, #0]
	send_length = sent_data_length + 4;
 8000c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c48:	3304      	adds	r3, #4
 8000c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    error_msg : return send_length;
 8000c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop

08000c5c <process_power_message>:

void process_power_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
    if (check_message_data_length(received_buffer, 1)) {
 8000c66:	2101      	movs	r1, #1
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 f8e9 	bl	8000e40 <check_message_data_length>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01e      	beq.n	8000cb2 <process_power_message+0x56>
    uint8_t* received_data = received_buffer + 3;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3303      	adds	r3, #3
 8000c78:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	60bb      	str	r3, [r7, #8]
	if(*received_data == OFF){
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d106      	bne.n	8000c96 <process_power_message+0x3a>
		mutate_power(OFF);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff facb 	bl	8000224 <mutate_power>
		*sent_data = 0x00;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	}
	else{
		*sent_data = 0xFF;
	}
    } 
}
 8000c94:	e00d      	b.n	8000cb2 <process_power_message+0x56>
	else if(*received_data == ON){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d106      	bne.n	8000cac <process_power_message+0x50>
		mutate_power(ON);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fac0 	bl	8000224 <mutate_power>
		*sent_data = 0x00;
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
}
 8000caa:	e002      	b.n	8000cb2 <process_power_message+0x56>
		*sent_data = 0xFF;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <process_control_mode_message>:

void process_control_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
    // Implement logic to process control mode message
    // Update control_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1)){
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f8ba 	bl	8000e40 <check_message_data_length>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d022      	beq.n	8000d18 <process_control_mode_message+0x5e>
    uint8_t* received_data = received_buffer + 3;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	3303      	adds	r3, #3
 8000cdc:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000cde:	f7ff fb8d 	bl	80003fc <get_power>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d103      	bne.n	8000cf0 <process_control_mode_message+0x36>
		*sent_data = 0xFF;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	22ff      	movs	r2, #255	; 0xff
 8000cec:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000cee:	e014      	b.n	8000d1a <process_control_mode_message+0x60>
	}
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <process_control_mode_message+0x46>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d108      	bne.n	8000d12 <process_control_mode_message+0x58>
		mutate_control_mode(*received_data);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff faf3 	bl	80002f0 <mutate_control_mode>
		*sent_data = 0x00;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
	}
	else{
		*sent_data = 0xFF;
	}
} goto error_msg;
 8000d10:	e002      	b.n	8000d18 <process_control_mode_message+0x5e>
		*sent_data = 0xFF;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	22ff      	movs	r2, #255	; 0xff
 8000d16:	701a      	strb	r2, [r3, #0]
} goto error_msg;
 8000d18:	bf00      	nop

error_msg: return;
 8000d1a:	bf00      	nop

}
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <process_wind_mode_message>:

void process_wind_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
    // Implement logic to process wind mode message
    // Update wind_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1))
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f886 	bl	8000e40 <check_message_data_length>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d02b      	beq.n	8000d92 <process_wind_mode_message+0x70>
    {
    uint8_t* received_data = received_buffer + 3;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3303      	adds	r3, #3
 8000d3e:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	3303      	adds	r3, #3
 8000d44:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000d46:	f7ff fb59 	bl	80003fc <get_power>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <process_wind_mode_message+0x36>
		*sent_data = 0xFF;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	22ff      	movs	r2, #255	; 0xff
 8000d54:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000d56:	e01b      	b.n	8000d90 <process_wind_mode_message+0x6e>
	}

	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <process_wind_mode_message+0x4e>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d003      	beq.n	8000d70 <process_wind_mode_message+0x4e>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d10b      	bne.n	8000d88 <process_wind_mode_message+0x66>
		mutate_wind_mode(*received_data);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb03 	bl	8000380 <mutate_wind_mode>
		*sent_data = 0x00;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
		mutate_control_mode(MANUAL);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fab5 	bl	80002f0 <mutate_control_mode>
 8000d86:	e003      	b.n	8000d90 <process_wind_mode_message+0x6e>
	}
	else{
		*sent_data = 0xFF;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	701a      	strb	r2, [r3, #0]
	}
	error_msg: return;
 8000d8e:	e7ff      	b.n	8000d90 <process_wind_mode_message+0x6e>
 8000d90:	bf00      	nop
    }

}
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <process_states_request_message>:

uint8_t process_states_request_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    // Implement logic to process states request message
    // Update sent_buf accordingly
    uint8_t* sent_data = sent_buffer + 3;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	3303      	adds	r3, #3
 8000da6:	61fb      	str	r3, [r7, #28]
	uint8_t* power_state = sent_data + 1;
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	3301      	adds	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
	uint8_t* control_mode_state = sent_data + 2;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3302      	adds	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
	uint8_t* wind_mode_state = sent_data + 3;	
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3303      	adds	r3, #3
 8000db8:	613b      	str	r3, [r7, #16]
	uint8_t* temperature_state = sent_data + 4;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	60fb      	str	r3, [r7, #12]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buffer, 0)){
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f83c 	bl	8000e40 <check_message_data_length>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <process_states_request_message+0x44>
		sent_data_length = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		*sent_data = 0xFF;
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e028      	b.n	8000e2e <process_states_request_message+0x96>
	}
	else{
		*sent_data = 0x00;
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		*power_state = get_power();
 8000de2:	f7ff fb0b 	bl	80003fc <get_power>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	701a      	strb	r2, [r3, #0]
		*control_mode_state = get_control_mode();
 8000dee:	f7ff fb15 	bl	800041c <get_control_mode>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	701a      	strb	r2, [r3, #0]
		*wind_mode_state = get_wind_mode();
 8000dfa:	f7ff fb1f 	bl	800043c <get_wind_mode>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	701a      	strb	r2, [r3, #0]
		int temp = (int) temperature;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <process_states_request_message+0xa4>)
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e10:	ee17 3a90 	vmov	r3, s15
 8000e14:	623b      	str	r3, [r7, #32]
		if(temp < 0){
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	da01      	bge.n	8000e20 <process_states_request_message+0x88>
			temp = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
		}
		*temperature_state = (uint8_t) temp;
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	701a      	strb	r2, [r3, #0]
		sent_data_length = 5;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return sent_data_length;
 8000e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001c4 	.word	0x200001c4

08000e40 <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buffer, uint8_t expected_value) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
    uint8_t* length = received_buffer + 2;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	60fb      	str	r3, [r7, #12]
    if (*length == expected_value) {
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	78fa      	ldrb	r2, [r7, #3]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d101      	bne.n	8000e60 <check_message_data_length+0x20>
        return 1; // Data length is correct
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <check_message_data_length+0x22>
    } else {
        return 0; // Data length is incorrect
 8000e60:	2300      	movs	r3, #0
    }
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed8:	d144      	bne.n	8000f64 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6153      	str	r3, [r2, #20]
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000efc:	6153      	str	r3, [r2, #20]
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_ADC_MspInit+0xb4>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f22:	2304      	movs	r3, #4
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <HAL_ADC_MspInit+0xb8>)
 8000f36:	f001 fe8b 	bl	8002c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f001 fe7e 	bl	8002c50 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2012      	movs	r0, #18
 8000f5a:	f001 fbf4 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f5e:	2012      	movs	r0, #18
 8000f60:	f001 fc0d 	bl	800277e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000800 	.word	0x48000800

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <HAL_TIM_Base_MspInit+0x5c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10c      	bne.n	8000fa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f9e:	e010      	b.n	8000fc2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40013400 	.word	0x40013400

08000fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_TIM_MspPostInit+0xa8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d11d      	bne.n	800103a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001028:	2302      	movs	r3, #2
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <HAL_TIM_MspPostInit+0xb0>)
 8001034:	f001 fe0c 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001038:	e020      	b.n	800107c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d11b      	bne.n	800107c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 800104a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800104e:	6153      	str	r3, [r2, #20]
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_TIM_MspPostInit+0xac>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800105c:	2340      	movs	r3, #64	; 0x40
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800106c:	2304      	movs	r3, #4
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <HAL_TIM_MspPostInit+0xb8>)
 8001078:	f001 fdea 	bl	8002c50 <HAL_GPIO_Init>
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40012c00 	.word	0x40012c00
 8001088:	40021000 	.word	0x40021000
 800108c:	48001000 	.word	0x48001000
 8001090:	40013400 	.word	0x40013400
 8001094:	48000800 	.word	0x48000800

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_UART_MspInit+0x8c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d12f      	bne.n	800111a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_UART_MspInit+0x90>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_UART_MspInit+0x90>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_UART_MspInit+0x90>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_UART_MspInit+0x90>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <HAL_UART_MspInit+0x90>)
 80010d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_UART_MspInit+0x90>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010ea:	2330      	movs	r3, #48	; 0x30
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fa:	2307      	movs	r3, #7
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <HAL_UART_MspInit+0x94>)
 8001106:	f001 fda3 	bl	8002c50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2025      	movs	r0, #37	; 0x25
 8001110:	f001 fb19 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001114:	2025      	movs	r0, #37	; 0x25
 8001116:	f001 fb32 	bl	800277e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40013800 	.word	0x40013800
 8001128:	40021000 	.word	0x40021000
 800112c:	48000800 	.word	0x48000800

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f898 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <ADC1_2_IRQHandler+0x10>)
 800118a:	f000 faaf 	bl	80016ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000054 	.word	0x20000054

08001198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <USART1_IRQHandler+0x10>)
 800119e:	f004 fda9 	bl	8005cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000013c 	.word	0x2000013c

080011ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d4:	f7ff ffea 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f005 fcb3 	bl	8006b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff f9bb 	bl	800057c <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001208:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001214:	08006c18 	.word	0x08006c18
  ldr r2, =_sbss
 8001218:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800121c:	20000200 	.word	0x20000200

08001220 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC3_IRQHandler>
	...

08001224 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x28>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x28>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f001 fa7b 	bl	8002730 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fe16 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fa93 	bl	800279a <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f001 fa5b 	bl	8002746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	200001dc 	.word	0x200001dc

080012d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;  
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200001dc 	.word	0x200001dc

080012f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09a      	sub	sp, #104	; 0x68
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e1c9      	b.n	80016e0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d176      	bne.n	800144c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d152      	bne.n	800140c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fd99 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d13b      	bne.n	800140c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f001 f895 	bl	80024c4 <ADC_Disable>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d12f      	bne.n	800140c <HAL_ADC_Init+0xe0>
 80013ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d12b      	bne.n	800140c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013bc:	f023 0302 	bic.w	r3, r3, #2
 80013c0:	f043 0202 	orr.w	r2, r3, #2
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e8:	4b86      	ldr	r3, [pc, #536]	; (8001604 <HAL_ADC_Init+0x2d8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a86      	ldr	r2, [pc, #536]	; (8001608 <HAL_ADC_Init+0x2dc>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9a      	lsrs	r2, r3, #18
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013fe:	e002      	b.n	8001406 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3b01      	subs	r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f9      	bne.n	8001400 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001428:	d110      	bne.n	800144c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f023 0312 	bic.w	r3, r3, #18
 8001432:	f043 0210 	orr.w	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 8136 	bne.w	80016c6 <HAL_ADC_Init+0x39a>
 800145a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 8131 	bne.w	80016c6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8129 	bne.w	80016c6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800147c:	f043 0202 	orr.w	r2, r3, #2
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800148c:	d004      	beq.n	8001498 <HAL_ADC_Init+0x16c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a5e      	ldr	r2, [pc, #376]	; (800160c <HAL_ADC_Init+0x2e0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_ADC_Init+0x170>
 8001498:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <HAL_ADC_Init+0x2e4>)
 800149a:	e000      	b.n	800149e <HAL_ADC_Init+0x172>
 800149c:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <HAL_ADC_Init+0x2e8>)
 800149e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a8:	d102      	bne.n	80014b0 <HAL_ADC_Init+0x184>
 80014aa:	4b58      	ldr	r3, [pc, #352]	; (800160c <HAL_ADC_Init+0x2e0>)
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e01a      	b.n	80014e6 <HAL_ADC_Init+0x1ba>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a55      	ldr	r2, [pc, #340]	; (800160c <HAL_ADC_Init+0x2e0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d103      	bne.n	80014c2 <HAL_ADC_Init+0x196>
 80014ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e011      	b.n	80014e6 <HAL_ADC_Init+0x1ba>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a54      	ldr	r2, [pc, #336]	; (8001618 <HAL_ADC_Init+0x2ec>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d102      	bne.n	80014d2 <HAL_ADC_Init+0x1a6>
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_ADC_Init+0x2f0>)
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e009      	b.n	80014e6 <HAL_ADC_Init+0x1ba>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a51      	ldr	r2, [pc, #324]	; (800161c <HAL_ADC_Init+0x2f0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d102      	bne.n	80014e2 <HAL_ADC_Init+0x1b6>
 80014dc:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <HAL_ADC_Init+0x2ec>)
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e001      	b.n	80014e6 <HAL_ADC_Init+0x1ba>
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_ADC_Init+0x1da>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ADC_Init+0x1da>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_ADC_Init+0x1dc>
 8001506:	2300      	movs	r3, #0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11c      	bne.n	8001546 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800150c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800150e:	2b00      	cmp	r3, #0
 8001510:	d010      	beq.n	8001534 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_ADC_Init+0x202>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_ADC_Init+0x202>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_ADC_Init+0x204>
 800152e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001530:	2b00      	cmp	r3, #0
 8001532:	d108      	bne.n	8001546 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	431a      	orrs	r2, r3
 8001542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001544:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7e5b      	ldrb	r3, [r3, #25]
 800154a:	035b      	lsls	r3, r3, #13
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001550:	2a01      	cmp	r2, #1
 8001552:	d002      	beq.n	800155a <HAL_ADC_Init+0x22e>
 8001554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001558:	e000      	b.n	800155c <HAL_ADC_Init+0x230>
 800155a:	2200      	movs	r2, #0
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4313      	orrs	r3, r2
 800156a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800156c:	4313      	orrs	r3, r2
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d11b      	bne.n	80015b2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7e5b      	ldrb	r3, [r3, #25]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	3b01      	subs	r3, #1
 8001588:	045a      	lsls	r2, r3, #17
 800158a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800158c:	4313      	orrs	r3, r2
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	663b      	str	r3, [r7, #96]	; 0x60
 8001594:	e00d      	b.n	80015b2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800159e:	f043 0220 	orr.w	r2, r3, #32
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d03a      	beq.n	8001630 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a16      	ldr	r2, [pc, #88]	; (8001618 <HAL_ADC_Init+0x2ec>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d004      	beq.n	80015ce <HAL_ADC_Init+0x2a2>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <HAL_ADC_Init+0x2f0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d128      	bne.n	8001620 <HAL_ADC_Init+0x2f4>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80015d6:	d012      	beq.n	80015fe <HAL_ADC_Init+0x2d2>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e0:	d00a      	beq.n	80015f8 <HAL_ADC_Init+0x2cc>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80015ea:	d002      	beq.n	80015f2 <HAL_ADC_Init+0x2c6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	e018      	b.n	8001624 <HAL_ADC_Init+0x2f8>
 80015f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f6:	e015      	b.n	8001624 <HAL_ADC_Init+0x2f8>
 80015f8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80015fc:	e012      	b.n	8001624 <HAL_ADC_Init+0x2f8>
 80015fe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001602:	e00f      	b.n	8001624 <HAL_ADC_Init+0x2f8>
 8001604:	20000000 	.word	0x20000000
 8001608:	431bde83 	.word	0x431bde83
 800160c:	50000100 	.word	0x50000100
 8001610:	50000300 	.word	0x50000300
 8001614:	50000700 	.word	0x50000700
 8001618:	50000400 	.word	0x50000400
 800161c:	50000500 	.word	0x50000500
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001628:	4313      	orrs	r3, r2
 800162a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800162c:	4313      	orrs	r3, r2
 800162e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d114      	bne.n	8001668 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7e1b      	ldrb	r3, [r3, #24]
 8001656:	039a      	lsls	r2, r3, #14
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4313      	orrs	r3, r2
 8001662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001664:	4313      	orrs	r3, r2
 8001666:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_ADC_Init+0x3bc>)
 8001670:	4013      	ands	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001678:	430b      	orrs	r3, r1
 800167a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10c      	bne.n	800169e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f023 010f 	bic.w	r1, r3, #15
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
 800169c:	e007      	b.n	80016ae <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 020f 	bic.w	r2, r2, #15
 80016ac:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f023 0303 	bic.w	r3, r3, #3
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
 80016c4:	e00a      	b.n	80016dc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f023 0312 	bic.w	r3, r3, #18
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3768      	adds	r7, #104	; 0x68
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	fff0c007 	.word	0xfff0c007

080016ec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <HAL_ADC_IRQHandler+0x38>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10b      	bne.n	800173c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80bc 	beq.w	80018a8 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80b6 	beq.w	80018a8 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175c:	d004      	beq.n	8001768 <HAL_ADC_IRQHandler+0x7c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a90      	ldr	r2, [pc, #576]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d106      	bne.n	8001776 <HAL_ADC_IRQHandler+0x8a>
 8001768:	4b8f      	ldr	r3, [pc, #572]	; (80019a8 <HAL_ADC_IRQHandler+0x2bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2b00      	cmp	r3, #0
 8001772:	d03e      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x106>
 8001774:	e005      	b.n	8001782 <HAL_ADC_IRQHandler+0x96>
 8001776:	4b8d      	ldr	r3, [pc, #564]	; (80019ac <HAL_ADC_IRQHandler+0x2c0>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2b00      	cmp	r3, #0
 8001780:	d037      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x106>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178a:	d004      	beq.n	8001796 <HAL_ADC_IRQHandler+0xaa>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a84      	ldr	r2, [pc, #528]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d106      	bne.n	80017a4 <HAL_ADC_IRQHandler+0xb8>
 8001796:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <HAL_ADC_IRQHandler+0x2bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d027      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x106>
 80017a2:	e005      	b.n	80017b0 <HAL_ADC_IRQHandler+0xc4>
 80017a4:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_ADC_IRQHandler+0x2c0>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d020      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x106>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b8:	d004      	beq.n	80017c4 <HAL_ADC_IRQHandler+0xd8>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a79      	ldr	r2, [pc, #484]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d106      	bne.n	80017d2 <HAL_ADC_IRQHandler+0xe6>
 80017c4:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <HAL_ADC_IRQHandler+0x2bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2b09      	cmp	r3, #9
 80017ce:	d010      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x106>
 80017d0:	e005      	b.n	80017de <HAL_ADC_IRQHandler+0xf2>
 80017d2:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_ADC_IRQHandler+0x2c0>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2b09      	cmp	r3, #9
 80017dc:	d009      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x106>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e6:	d004      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x106>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a70      	ldr	r2, [pc, #448]	; (80019b0 <HAL_ADC_IRQHandler+0x2c4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d104      	bne.n	80017fc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	e00f      	b.n	800181c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001804:	d004      	beq.n	8001810 <HAL_ADC_IRQHandler+0x124>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d102      	bne.n	8001816 <HAL_ADC_IRQHandler+0x12a>
 8001810:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001814:	e000      	b.n	8001818 <HAL_ADC_IRQHandler+0x12c>
 8001816:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_ADC_IRQHandler+0x2c4>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001826:	2b00      	cmp	r3, #0
 8001828:	d137      	bne.n	800189a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001830:	2b00      	cmp	r3, #0
 8001832:	d132      	bne.n	800189a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d02d      	beq.n	800189a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11a      	bne.n	8001882 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 020c 	bic.w	r2, r2, #12
 800185a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d112      	bne.n	800189a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	641a      	str	r2, [r3, #64]	; 0x40
 8001880:	e00b      	b.n	800189a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f043 0210 	orr.w	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fd28 	bl	80012f0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	220c      	movs	r2, #12
 80018a6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <HAL_ADC_IRQHandler+0x1d0>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10b      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8138 	beq.w	8001b38 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8132 	beq.w	8001b38 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e8:	d004      	beq.n	80018f4 <HAL_ADC_IRQHandler+0x208>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d106      	bne.n	8001902 <HAL_ADC_IRQHandler+0x216>
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_ADC_IRQHandler+0x2bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03e      	beq.n	800197e <HAL_ADC_IRQHandler+0x292>
 8001900:	e005      	b.n	800190e <HAL_ADC_IRQHandler+0x222>
 8001902:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_ADC_IRQHandler+0x2c0>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b00      	cmp	r3, #0
 800190c:	d037      	beq.n	800197e <HAL_ADC_IRQHandler+0x292>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001916:	d004      	beq.n	8001922 <HAL_ADC_IRQHandler+0x236>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d106      	bne.n	8001930 <HAL_ADC_IRQHandler+0x244>
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_ADC_IRQHandler+0x2bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2b05      	cmp	r3, #5
 800192c:	d027      	beq.n	800197e <HAL_ADC_IRQHandler+0x292>
 800192e:	e005      	b.n	800193c <HAL_ADC_IRQHandler+0x250>
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_ADC_IRQHandler+0x2c0>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	2b05      	cmp	r3, #5
 800193a:	d020      	beq.n	800197e <HAL_ADC_IRQHandler+0x292>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001944:	d004      	beq.n	8001950 <HAL_ADC_IRQHandler+0x264>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d106      	bne.n	800195e <HAL_ADC_IRQHandler+0x272>
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_ADC_IRQHandler+0x2bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2b09      	cmp	r3, #9
 800195a:	d010      	beq.n	800197e <HAL_ADC_IRQHandler+0x292>
 800195c:	e005      	b.n	800196a <HAL_ADC_IRQHandler+0x27e>
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_ADC_IRQHandler+0x2c0>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2b09      	cmp	r3, #9
 8001968:	d009      	beq.n	800197e <HAL_ADC_IRQHandler+0x292>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001972:	d004      	beq.n	800197e <HAL_ADC_IRQHandler+0x292>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_ADC_IRQHandler+0x2c4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d104      	bne.n	8001988 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	e018      	b.n	80019ba <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001990:	d004      	beq.n	800199c <HAL_ADC_IRQHandler+0x2b0>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_ADC_IRQHandler+0x2b8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d10b      	bne.n	80019b4 <HAL_ADC_IRQHandler+0x2c8>
 800199c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019a0:	e009      	b.n	80019b6 <HAL_ADC_IRQHandler+0x2ca>
 80019a2:	bf00      	nop
 80019a4:	50000100 	.word	0x50000100
 80019a8:	50000300 	.word	0x50000300
 80019ac:	50000700 	.word	0x50000700
 80019b0:	50000400 	.word	0x50000400
 80019b4:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_ADC_IRQHandler+0x514>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 80b0 	bne.w	8001b2a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00d      	beq.n	80019f0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 80a3 	bne.w	8001b2a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 809d 	bne.w	8001b2a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8097 	beq.w	8001b2a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a04:	d004      	beq.n	8001a10 <HAL_ADC_IRQHandler+0x324>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7e      	ldr	r2, [pc, #504]	; (8001c04 <HAL_ADC_IRQHandler+0x518>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d106      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x332>
 8001a10:	4b7d      	ldr	r3, [pc, #500]	; (8001c08 <HAL_ADC_IRQHandler+0x51c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d03e      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ae>
 8001a1c:	e005      	b.n	8001a2a <HAL_ADC_IRQHandler+0x33e>
 8001a1e:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_ADC_IRQHandler+0x520>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d037      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ae>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a32:	d004      	beq.n	8001a3e <HAL_ADC_IRQHandler+0x352>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a72      	ldr	r2, [pc, #456]	; (8001c04 <HAL_ADC_IRQHandler+0x518>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d106      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x360>
 8001a3e:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <HAL_ADC_IRQHandler+0x51c>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d027      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ae>
 8001a4a:	e005      	b.n	8001a58 <HAL_ADC_IRQHandler+0x36c>
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_ADC_IRQHandler+0x520>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2b06      	cmp	r3, #6
 8001a56:	d020      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ae>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a60:	d004      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x380>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <HAL_ADC_IRQHandler+0x518>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x38e>
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_ADC_IRQHandler+0x51c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2b07      	cmp	r3, #7
 8001a76:	d010      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ae>
 8001a78:	e005      	b.n	8001a86 <HAL_ADC_IRQHandler+0x39a>
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <HAL_ADC_IRQHandler+0x520>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d009      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ae>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ae>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_ADC_IRQHandler+0x514>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d104      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e00f      	b.n	8001ac4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aac:	d004      	beq.n	8001ab8 <HAL_ADC_IRQHandler+0x3cc>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <HAL_ADC_IRQHandler+0x518>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d102      	bne.n	8001abe <HAL_ADC_IRQHandler+0x3d2>
 8001ab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001abc:	e000      	b.n	8001ac0 <HAL_ADC_IRQHandler+0x3d4>
 8001abe:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_ADC_IRQHandler+0x514>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d12d      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11a      	bne.n	8001b12 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001aea:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d112      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b10:	e00b      	b.n	8001b2a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8c4 	bl	8001cb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2260      	movs	r2, #96	; 0x60
 8001b36:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d011      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x47a>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00c      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fbd3 	bl	8001304 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d012      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x4aa>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00d      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8aa 	bl	8001ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b94:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d012      	beq.n	8001bc6 <HAL_ADC_IRQHandler+0x4da>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f89c 	bl	8001cf4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d04f      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x584>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d04a      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e02d      	b.n	8001c44 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf0:	d004      	beq.n	8001bfc <HAL_ADC_IRQHandler+0x510>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_ADC_IRQHandler+0x518>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d109      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x524>
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_ADC_IRQHandler+0x51c>)
 8001bfe:	e008      	b.n	8001c12 <HAL_ADC_IRQHandler+0x526>
 8001c00:	50000400 	.word	0x50000400
 8001c04:	50000100 	.word	0x50000100
 8001c08:	50000300 	.word	0x50000300
 8001c0c:	50000700 	.word	0x50000700
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_ADC_IRQHandler+0x5c8>)
 8001c12:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10a      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e007      	b.n	8001c44 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001c40:	2301      	movs	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10e      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f043 0202 	orr.w	r2, r3, #2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fb58 	bl	8001318 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d018      	beq.n	8001cac <HAL_ADC_IRQHandler+0x5c0>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f043 0208 	orr.w	r2, r3, #8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f810 	bl	8001ccc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	50000700 	.word	0x50000700

08001cb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b09b      	sub	sp, #108	; 0x6c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x22>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e2ca      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x5b8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 82ae 	bne.w	800229e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d81c      	bhi.n	8001d84 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	231f      	movs	r3, #31
 8001d60:	4093      	lsls	r3, r2
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4019      	ands	r1, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
 8001d82:	e063      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	d81e      	bhi.n	8001dca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	3b1e      	subs	r3, #30
 8001da0:	221f      	movs	r2, #31
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4019      	ands	r1, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	3b1e      	subs	r3, #30
 8001dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc8:	e040      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b0e      	cmp	r3, #14
 8001dd0:	d81e      	bhi.n	8001e10 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	3b3c      	subs	r3, #60	; 0x3c
 8001de6:	221f      	movs	r2, #31
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4019      	ands	r1, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	3b3c      	subs	r3, #60	; 0x3c
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e0e:	e01d      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	3b5a      	subs	r3, #90	; 0x5a
 8001e24:	221f      	movs	r2, #31
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4019      	ands	r1, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	3b5a      	subs	r3, #90	; 0x5a
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80e5 	bne.w	8002026 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d91c      	bls.n	8001e9e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6999      	ldr	r1, [r3, #24]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4019      	ands	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6898      	ldr	r0, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b1e      	subs	r3, #30
 8001e90:	fa00 f203 	lsl.w	r2, r0, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	619a      	str	r2, [r3, #24]
 8001e9c:	e019      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6959      	ldr	r1, [r3, #20]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d84f      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0x28c>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_ADC_ConfigChannel+0x1f4>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f2f 	.word	0x08001f2f
 8001f04:	08001f51 	.word	0x08001f51
 8001f08:	08001f73 	.word	0x08001f73
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f12:	4b9a      	ldr	r3, [pc, #616]	; (800217c <HAL_ADC_ConfigChannel+0x474>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	0691      	lsls	r1, r2, #26
 8001f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f2a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f2c:	e07e      	b.n	800202c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f34:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_ADC_ConfigChannel+0x474>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	0691      	lsls	r1, r2, #26
 8001f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f40:	430a      	orrs	r2, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f4c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f4e:	e06d      	b.n	800202c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f56:	4b89      	ldr	r3, [pc, #548]	; (800217c <HAL_ADC_ConfigChannel+0x474>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	0691      	lsls	r1, r2, #26
 8001f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f62:	430a      	orrs	r2, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f6e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f70:	e05c      	b.n	800202c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f78:	4b80      	ldr	r3, [pc, #512]	; (800217c <HAL_ADC_ConfigChannel+0x474>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	0691      	lsls	r1, r2, #26
 8001f82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f84:	430a      	orrs	r2, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f90:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f92:	e04b      	b.n	800202c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	069b      	lsls	r3, r3, #26
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d107      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fb6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	069b      	lsls	r3, r3, #26
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fda:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	069b      	lsls	r3, r3, #26
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ffe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	069b      	lsls	r3, r3, #26
 8002010:	429a      	cmp	r2, r3
 8002012:	d10a      	bne.n	800202a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002022:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002024:	e001      	b.n	800202a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002026:	bf00      	nop
 8002028:	e000      	b.n	800202c <HAL_ADC_ConfigChannel+0x324>
      break;
 800202a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_ADC_ConfigChannel+0x344>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x344>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_ADC_ConfigChannel+0x346>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 8130 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d00f      	beq.n	800207c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	400a      	ands	r2, r1
 8002076:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800207a:	e049      	b.n	8002110 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b09      	cmp	r3, #9
 800209c:	d91c      	bls.n	80020d8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6999      	ldr	r1, [r3, #24]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	3b1b      	subs	r3, #27
 80020b0:	2207      	movs	r2, #7
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4019      	ands	r1, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6898      	ldr	r0, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	3b1b      	subs	r3, #27
 80020ca:	fa00 f203 	lsl.w	r2, r0, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	619a      	str	r2, [r3, #24]
 80020d6:	e01b      	b.n	8002110 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6959      	ldr	r1, [r3, #20]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	2207      	movs	r2, #7
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4019      	ands	r1, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6898      	ldr	r0, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	fa00 f203 	lsl.w	r2, r0, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002118:	d004      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x41c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_ADC_ConfigChannel+0x478>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x420>
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_ADC_ConfigChannel+0x47c>)
 8002126:	e000      	b.n	800212a <HAL_ADC_ConfigChannel+0x422>
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_ADC_ConfigChannel+0x480>)
 800212a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b10      	cmp	r3, #16
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002144:	2b11      	cmp	r3, #17
 8002146:	d105      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002158:	2b12      	cmp	r3, #18
 800215a:	f040 80ab 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800215e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80a4 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002174:	d10a      	bne.n	800218c <HAL_ADC_ConfigChannel+0x484>
 8002176:	4b02      	ldr	r3, [pc, #8]	; (8002180 <HAL_ADC_ConfigChannel+0x478>)
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e022      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x4ba>
 800217c:	83fff000 	.word	0x83fff000
 8002180:	50000100 	.word	0x50000100
 8002184:	50000300 	.word	0x50000300
 8002188:	50000700 	.word	0x50000700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4e      	ldr	r2, [pc, #312]	; (80022cc <HAL_ADC_ConfigChannel+0x5c4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d103      	bne.n	800219e <HAL_ADC_ConfigChannel+0x496>
 8002196:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e011      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x4ba>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d102      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x4a6>
 80021a8:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e009      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x4ba>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a48      	ldr	r2, [pc, #288]	; (80022d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d102      	bne.n	80021be <HAL_ADC_ConfigChannel+0x4b6>
 80021b8:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e001      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x4ba>
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x4da>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x4da>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x4dc>
 80021e2:	2300      	movs	r3, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d150      	bne.n	800228a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d010      	beq.n	8002210 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_ADC_ConfigChannel+0x502>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x502>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_ADC_ConfigChannel+0x504>
 800220a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800220c:	2b00      	cmp	r3, #0
 800220e:	d13c      	bne.n	800228a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b10      	cmp	r3, #16
 8002216:	d11d      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x54c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002220:	d118      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800222a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <HAL_ADC_ConfigChannel+0x5d4>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	0c9a      	lsrs	r2, r3, #18
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002244:	e002      	b.n	800224c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002252:	e02e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b11      	cmp	r3, #17
 800225a:	d10b      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x56c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002264:	d106      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800226e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002270:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002272:	e01e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b12      	cmp	r3, #18
 800227a:	d11a      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800227c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002286:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002288:	e013      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800229c:	e00a      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022b0:	e000      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022b2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	376c      	adds	r7, #108	; 0x6c
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	50000100 	.word	0x50000100
 80022d0:	50000400 	.word	0x50000400
 80022d4:	50000500 	.word	0x50000500
 80022d8:	20000000 	.word	0x20000000
 80022dc:	431bde83 	.word	0x431bde83

080022e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b099      	sub	sp, #100	; 0x64
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f8:	d102      	bne.n	8002300 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80022fa:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	e01a      	b.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d103      	bne.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800230a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	e011      	b.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d102      	bne.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800231c:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	e009      	b.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a64      	ldr	r2, [pc, #400]	; (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d102      	bne.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	e001      	b.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b0      	b.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800234a:	2302      	movs	r3, #2
 800234c:	e0a9      	b.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f040 808d 	bne.w	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 8086 	bne.w	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237c:	d004      	beq.n	8002388 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a4b      	ldr	r2, [pc, #300]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002388:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800238a:	e000      	b.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800238e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d040      	beq.n	800241a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023aa:	035b      	lsls	r3, r3, #13
 80023ac:	430b      	orrs	r3, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d15c      	bne.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80023f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d14b      	bne.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002404:	f023 030f 	bic.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	6811      	ldr	r1, [r2, #0]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6892      	ldr	r2, [r2, #8]
 8002410:	430a      	orrs	r2, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002416:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002418:	e03c      	b.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800241a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002424:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d108      	bne.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d123      	bne.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002468:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d112      	bne.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800246e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002476:	f023 030f 	bic.w	r3, r3, #15
 800247a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800247c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800247e:	e009      	b.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f043 0220 	orr.w	r2, r3, #32
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002492:	e000      	b.n	8002496 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002494:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800249e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80024a2:	4618      	mov	r0, r3
 80024a4:	3764      	adds	r7, #100	; 0x64
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	50000100 	.word	0x50000100
 80024b4:	50000400 	.word	0x50000400
 80024b8:	50000500 	.word	0x50000500
 80024bc:	50000300 	.word	0x50000300
 80024c0:	50000700 	.word	0x50000700

080024c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <ADC_Disable+0x2c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <ADC_Disable+0x2c>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <ADC_Disable+0x2e>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d047      	beq.n	8002586 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030d 	and.w	r3, r3, #13
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10f      	bne.n	8002524 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0202 	orr.w	r2, r2, #2
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2203      	movs	r2, #3
 800251a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800251c:	f7fe fedc 	bl	80012d8 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002522:	e029      	b.n	8002578 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f043 0210 	orr.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e023      	b.n	8002588 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002540:	f7fe feca 	bl	80012d8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d914      	bls.n	8002578 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10d      	bne.n	8002578 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f043 0210 	orr.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e007      	b.n	8002588 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d0dc      	beq.n	8002540 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <__NVIC_EnableIRQ+0x38>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026fc:	d301      	bcc.n	8002702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <SysTick_Config+0x40>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270a:	210f      	movs	r1, #15
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f7ff ff8e 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <SysTick_Config+0x40>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <SysTick_Config+0x40>)
 800271c:	2207      	movs	r2, #7
 800271e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	e000e010 	.word	0xe000e010

08002730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff29 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002758:	f7ff ff3e 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 800275c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	f7ff ff8e 	bl	8002684 <NVIC_EncodePriority>
 8002768:	4602      	mov	r2, r0
 800276a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff5d 	bl	8002630 <__NVIC_SetPriority>
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff31 	bl	80025f4 <__NVIC_EnableIRQ>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ffa2 	bl	80026ec <SysTick_Config>
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d008      	beq.n	80027d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e020      	b.n	8002818 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 020e 	bic.w	r2, r2, #14
 80027e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002836:	2b02      	cmp	r3, #2
 8002838:	d005      	beq.n	8002846 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e027      	b.n	8002896 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 020e 	bic.w	r2, r2, #14
 8002854:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
    } 
  }
  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028ba:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_FLASH_Program+0xd8>)
 80028bc:	7e1b      	ldrb	r3, [r3, #24]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_FLASH_Program+0x26>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e054      	b.n	8002970 <HAL_FLASH_Program+0xd0>
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <HAL_FLASH_Program+0xd8>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028d0:	f000 f8a8 	bl	8002a24 <FLASH_WaitForLastOperation>
 80028d4:	4603      	mov	r3, r0
 80028d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d144      	bne.n	8002968 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80028e4:	2301      	movs	r3, #1
 80028e6:	757b      	strb	r3, [r7, #21]
 80028e8:	e007      	b.n	80028fa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d102      	bne.n	80028f6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80028f0:	2302      	movs	r3, #2
 80028f2:	757b      	strb	r3, [r7, #21]
 80028f4:	e001      	b.n	80028fa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80028f6:	2304      	movs	r3, #4
 80028f8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	75bb      	strb	r3, [r7, #22]
 80028fe:	e02d      	b.n	800295c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002900:	7dbb      	ldrb	r3, [r7, #22]
 8002902:	005a      	lsls	r2, r3, #1
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	eb02 0c03 	add.w	ip, r2, r3
 800290a:	7dbb      	ldrb	r3, [r7, #22]
 800290c:	0119      	lsls	r1, r3, #4
 800290e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002912:	f1c1 0620 	rsb	r6, r1, #32
 8002916:	f1a1 0020 	sub.w	r0, r1, #32
 800291a:	fa22 f401 	lsr.w	r4, r2, r1
 800291e:	fa03 f606 	lsl.w	r6, r3, r6
 8002922:	4334      	orrs	r4, r6
 8002924:	fa23 f000 	lsr.w	r0, r3, r0
 8002928:	4304      	orrs	r4, r0
 800292a:	fa23 f501 	lsr.w	r5, r3, r1
 800292e:	b2a3      	uxth	r3, r4
 8002930:	4619      	mov	r1, r3
 8002932:	4660      	mov	r0, ip
 8002934:	f000 f85a 	bl	80029ec <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002938:	f24c 3050 	movw	r0, #50000	; 0xc350
 800293c:	f000 f872 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_FLASH_Program+0xdc>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	4a0c      	ldr	r2, [pc, #48]	; (800297c <HAL_FLASH_Program+0xdc>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002956:	7dbb      	ldrb	r3, [r7, #22]
 8002958:	3301      	adds	r3, #1
 800295a:	75bb      	strb	r3, [r7, #22]
 800295c:	7dba      	ldrb	r2, [r7, #22]
 800295e:	7d7b      	ldrb	r3, [r7, #21]
 8002960:	429a      	cmp	r2, r3
 8002962:	d3cd      	bcc.n	8002900 <HAL_FLASH_Program+0x60>
 8002964:	e000      	b.n	8002968 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002966:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_FLASH_Program+0xd8>)
 800296a:	2200      	movs	r2, #0
 800296c:	761a      	strb	r2, [r3, #24]

  return status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002978:	200001e0 	.word	0x200001e0
 800297c:	40022000 	.word	0x40022000

08002980 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_FLASH_Unlock+0x40>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_FLASH_Unlock+0x40>)
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_FLASH_Unlock+0x44>)
 800299a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_FLASH_Unlock+0x40>)
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_FLASH_Unlock+0x48>)
 80029a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_FLASH_Unlock+0x40>)
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40022000 	.word	0x40022000
 80029c4:	45670123 	.word	0x45670123
 80029c8:	cdef89ab 	.word	0xcdef89ab

080029cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_FLASH_Lock+0x1c>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_FLASH_Lock+0x1c>)
 80029d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029da:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40022000 	.word	0x40022000

080029ec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <FLASH_Program_HalfWord+0x30>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <FLASH_Program_HalfWord+0x34>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <FLASH_Program_HalfWord+0x34>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	801a      	strh	r2, [r3, #0]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	200001e0 	.word	0x200001e0
 8002a20:	40022000 	.word	0x40022000

08002a24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7fe fc54 	bl	80012d8 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a32:	e010      	b.n	8002a56 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d00c      	beq.n	8002a56 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <FLASH_WaitForLastOperation+0x2e>
 8002a42:	f7fe fc49 	bl	80012d8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d201      	bcs.n	8002a56 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e01f      	b.n	8002a96 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d0e8      	beq.n	8002a34 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d102      	bne.n	8002a74 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a70:	2220      	movs	r2, #32
 8002a72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d005      	beq.n	8002a8c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d103      	bne.n	8002a94 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a8c:	f000 f80a 	bl	8002aa4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000

08002aa4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002aae:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <FLASH_SetErrorCode+0x5c>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d109      	bne.n	8002ace <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <FLASH_SetErrorCode+0x60>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <FLASH_SetErrorCode+0x60>)
 8002ac4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <FLASH_SetErrorCode+0x5c>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d109      	bne.n	8002aee <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <FLASH_SetErrorCode+0x60>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <FLASH_SetErrorCode+0x60>)
 8002ae4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <FLASH_SetErrorCode+0x5c>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60d3      	str	r3, [r2, #12]
}  
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40022000 	.word	0x40022000
 8002b04:	200001e0 	.word	0x200001e0

08002b08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_FLASHEx_Erase+0xcc>)
 8002b1c:	7e1b      	ldrb	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_FLASHEx_Erase+0x1e>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e052      	b.n	8002bcc <HAL_FLASHEx_Erase+0xc4>
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_FLASHEx_Erase+0xcc>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d115      	bne.n	8002b60 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b38:	f7ff ff74 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d140      	bne.n	8002bc4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002b42:	f000 f84b 	bl	8002bdc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b4a:	f7ff ff6b 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_FLASHEx_Erase+0xd0>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <HAL_FLASHEx_Erase+0xd0>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6113      	str	r3, [r2, #16]
 8002b5e:	e031      	b.n	8002bc4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b64:	f7ff ff5e 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d12a      	bne.n	8002bc4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	e019      	b.n	8002bb2 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002b7e:	68b8      	ldr	r0, [r7, #8]
 8002b80:	f000 f846 	bl	8002c10 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b88:	f7ff ff4c 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_FLASHEx_Erase+0xd0>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_FLASHEx_Erase+0xd0>)
 8002b96:	f023 0302 	bic.w	r3, r3, #2
 8002b9a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	601a      	str	r2, [r3, #0]
            break;
 8002ba8:	e00c      	b.n	8002bc4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	02da      	lsls	r2, r3, #11
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3dc      	bcc.n	8002b7e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_FLASHEx_Erase+0xcc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	761a      	strb	r2, [r3, #24]

  return status;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200001e0 	.word	0x200001e0
 8002bd8:	40022000 	.word	0x40022000

08002bdc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <FLASH_MassErase+0x2c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <FLASH_MassErase+0x30>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <FLASH_MassErase+0x30>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <FLASH_MassErase+0x30>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <FLASH_MassErase+0x30>)
 8002bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfc:	6113      	str	r3, [r2, #16]
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	200001e0 	.word	0x200001e0
 8002c0c:	40022000 	.word	0x40022000

08002c10 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <FLASH_PageErase+0x38>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <FLASH_PageErase+0x3c>)
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <FLASH_PageErase+0x3c>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <FLASH_PageErase+0x3c>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <FLASH_PageErase+0x3c>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <FLASH_PageErase+0x3c>)
 8002c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3a:	6113      	str	r3, [r2, #16]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	200001e0 	.word	0x200001e0
 8002c4c:	40022000 	.word	0x40022000

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5e:	e154      	b.n	8002f0a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8146 	beq.w	8002f04 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d005      	beq.n	8002c90 <HAL_GPIO_Init+0x40>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d130      	bne.n	8002cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 0201 	and.w	r2, r3, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d017      	beq.n	8002d2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d123      	bne.n	8002d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	6939      	ldr	r1, [r7, #16]
 8002d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80a0 	beq.w	8002f04 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_GPIO_Init+0x2d8>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a57      	ldr	r2, [pc, #348]	; (8002f28 <HAL_GPIO_Init+0x2d8>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <HAL_GPIO_Init+0x2d8>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ddc:	4a53      	ldr	r2, [pc, #332]	; (8002f2c <HAL_GPIO_Init+0x2dc>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e06:	d019      	beq.n	8002e3c <HAL_GPIO_Init+0x1ec>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_GPIO_Init+0x2e0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_GPIO_Init+0x1e8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a48      	ldr	r2, [pc, #288]	; (8002f34 <HAL_GPIO_Init+0x2e4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00d      	beq.n	8002e34 <HAL_GPIO_Init+0x1e4>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a47      	ldr	r2, [pc, #284]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <HAL_GPIO_Init+0x1e0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_GPIO_Init+0x2ec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_GPIO_Init+0x1dc>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e008      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e2c:	2305      	movs	r3, #5
 8002e2e:	e006      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e30:	2303      	movs	r3, #3
 8002e32:	e004      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e002      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	f002 0203 	and.w	r2, r2, #3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4093      	lsls	r3, r2
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e4e:	4937      	ldr	r1, [pc, #220]	; (8002f2c <HAL_GPIO_Init+0x2dc>)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5c:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e80:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002eaa:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb0:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f47f aea3 	bne.w	8002c60 <HAL_GPIO_Init+0x10>
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	48000400 	.word	0x48000400
 8002f34:	48000800 	.word	0x48000800
 8002f38:	48000c00 	.word	0x48000c00
 8002f3c:	48001000 	.word	0x48001000
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f001 b823 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 817d 	beq.w	800327a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f80:	4bbc      	ldr	r3, [pc, #752]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f8c:	4bb9      	ldr	r3, [pc, #740]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d15c      	bne.n	8003052 <HAL_RCC_OscConfig+0x10e>
 8002f98:	4bb6      	ldr	r3, [pc, #728]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa4:	d155      	bne.n	8003052 <HAL_RCC_OscConfig+0x10e>
 8002fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002faa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x94>
 8002fd2:	4ba8      	ldr	r3, [pc, #672]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e015      	b.n	8003004 <HAL_RCC_OscConfig+0xc0>
 8002fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fdc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ff4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003000:	4b9c      	ldr	r3, [pc, #624]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003008:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800300c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003010:	fa92 f2a2 	rbit	r2, r2
 8003014:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003018:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800301c:	fab2 f282 	clz	r2, r2
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f002 021f 	and.w	r2, r2, #31
 800302c:	2101      	movs	r1, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 811f 	beq.w	8003278 <HAL_RCC_OscConfig+0x334>
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 8116 	bne.w	8003278 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f000 bfaf 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x12e>
 8003064:	4b83      	ldr	r3, [pc, #524]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a82      	ldr	r2, [pc, #520]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e036      	b.n	80030e0 <HAL_RCC_OscConfig+0x19c>
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x158>
 8003082:	4b7c      	ldr	r3, [pc, #496]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a7b      	ldr	r2, [pc, #492]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b79      	ldr	r3, [pc, #484]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a78      	ldr	r2, [pc, #480]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e021      	b.n	80030e0 <HAL_RCC_OscConfig+0x19c>
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x184>
 80030ae:	4b71      	ldr	r3, [pc, #452]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a70      	ldr	r2, [pc, #448]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6e      	ldr	r3, [pc, #440]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6d      	ldr	r2, [pc, #436]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0x19c>
 80030c8:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a69      	ldr	r2, [pc, #420]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b67      	ldr	r3, [pc, #412]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a66      	ldr	r2, [pc, #408]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030e0:	4b64      	ldr	r3, [pc, #400]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f023 020f 	bic.w	r2, r3, #15
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	495f      	ldr	r1, [pc, #380]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d059      	beq.n	80031be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe f8e5 	bl	80012d8 <HAL_GetTick>
 800310e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	e00a      	b.n	800312a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003114:	f7fe f8e0 	bl	80012d8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d902      	bls.n	800312a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	f000 bf43 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
 800312a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800312e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800313e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_RCC_OscConfig+0x218>
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e015      	b.n	8003188 <HAL_RCC_OscConfig+0x244>
 800315c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003160:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003174:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003178:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003184:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800318c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003190:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003194:	fa92 f2a2 	rbit	r2, r2
 8003198:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800319c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031a0:	fab2 f282 	clz	r2, r2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	f042 0220 	orr.w	r2, r2, #32
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f002 021f 	and.w	r2, r2, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ab      	beq.n	8003114 <HAL_RCC_OscConfig+0x1d0>
 80031bc:	e05d      	b.n	800327a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe f88b 	bl	80012d8 <HAL_GetTick>
 80031c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe f886 	bl	80012d8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	; 0x64
 80031d6:	d902      	bls.n	80031de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	f000 bee9 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
 80031de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80031f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <HAL_RCC_OscConfig+0x2cc>
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e015      	b.n	800323c <HAL_RCC_OscConfig+0x2f8>
 8003210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003214:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003228:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800322c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_RCC_OscConfig+0x330>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003240:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003244:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003248:	fa92 f2a2 	rbit	r2, r2
 800324c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003250:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0220 	orr.w	r2, r2, #32
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ab      	bne.n	80031c8 <HAL_RCC_OscConfig+0x284>
 8003270:	e003      	b.n	800327a <HAL_RCC_OscConfig+0x336>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 817d 	beq.w	800358a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003290:	4ba6      	ldr	r3, [pc, #664]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800329c:	4ba3      	ldr	r3, [pc, #652]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d172      	bne.n	800338e <HAL_RCC_OscConfig+0x44a>
 80032a8:	4ba0      	ldr	r3, [pc, #640]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d16c      	bne.n	800338e <HAL_RCC_OscConfig+0x44a>
 80032b4:	2302      	movs	r3, #2
 80032b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80032c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0x3a0>
 80032de:	4b93      	ldr	r3, [pc, #588]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e013      	b.n	800330c <HAL_RCC_OscConfig+0x3c8>
 80032e4:	2302      	movs	r3, #2
 80032e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80032f6:	2302      	movs	r3, #2
 80032f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80032fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003308:	4b88      	ldr	r3, [pc, #544]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2202      	movs	r2, #2
 800330e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003312:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003316:	fa92 f2a2 	rbit	r2, r2
 800331a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800331e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f042 0220 	orr.w	r2, r2, #32
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f002 021f 	and.w	r2, r2, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCC_OscConfig+0x410>
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d002      	beq.n	8003354 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f000 be2e 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b75      	ldr	r3, [pc, #468]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	21f8      	movs	r1, #248	; 0xf8
 800336a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003372:	fa91 f1a1 	rbit	r1, r1
 8003376:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800337a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800337e:	fab1 f181 	clz	r1, r1
 8003382:	b2c9      	uxtb	r1, r1
 8003384:	408b      	lsls	r3, r1
 8003386:	4969      	ldr	r1, [pc, #420]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338c:	e0fd      	b.n	800358a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8088 	beq.w	80034b0 <HAL_RCC_OscConfig+0x56c>
 80033a0:	2301      	movs	r3, #1
 80033a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	2301      	movs	r3, #1
 80033ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fd ff84 	bl	80012d8 <HAL_GetTick>
 80033d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fd ff7f 	bl	80012d8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	f000 bde2 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80033fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d102      	bne.n	800341c <HAL_RCC_OscConfig+0x4d8>
 8003416:	4b45      	ldr	r3, [pc, #276]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	e013      	b.n	8003444 <HAL_RCC_OscConfig+0x500>
 800341c:	2302      	movs	r3, #2
 800341e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800342e:	2302      	movs	r3, #2
 8003430:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003434:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003440:	4b3a      	ldr	r3, [pc, #232]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2202      	movs	r2, #2
 8003446:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800344a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800344e:	fa92 f2a2 	rbit	r2, r2
 8003452:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003456:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f042 0220 	orr.w	r2, r2, #32
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f002 021f 	and.w	r2, r2, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0af      	beq.n	80033d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	21f8      	movs	r1, #248	; 0xf8
 800348c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003494:	fa91 f1a1 	rbit	r1, r1
 8003498:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800349c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80034a0:	fab1 f181 	clz	r1, r1
 80034a4:	b2c9      	uxtb	r1, r1
 80034a6:	408b      	lsls	r3, r1
 80034a8:	4920      	ldr	r1, [pc, #128]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
 80034ae:	e06c      	b.n	800358a <HAL_RCC_OscConfig+0x646>
 80034b0:	2301      	movs	r3, #1
 80034b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	461a      	mov	r2, r3
 80034d8:	2300      	movs	r3, #0
 80034da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fd fefc 	bl	80012d8 <HAL_GetTick>
 80034e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fd fef7 	bl	80012d8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d902      	bls.n	80034fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	f000 bd5a 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
 80034fc:	2302      	movs	r3, #2
 80034fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800350e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d104      	bne.n	8003530 <HAL_RCC_OscConfig+0x5ec>
 8003526:	4b01      	ldr	r3, [pc, #4]	; (800352c <HAL_RCC_OscConfig+0x5e8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	e015      	b.n	8003558 <HAL_RCC_OscConfig+0x614>
 800352c:	40021000 	.word	0x40021000
 8003530:	2302      	movs	r3, #2
 8003532:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003542:	2302      	movs	r3, #2
 8003544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003548:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003554:	4bc8      	ldr	r3, [pc, #800]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2202      	movs	r2, #2
 800355a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800355e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003562:	fa92 f2a2 	rbit	r2, r2
 8003566:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800356a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800356e:	fab2 f282 	clz	r2, r2
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f042 0220 	orr.w	r2, r2, #32
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f002 021f 	and.w	r2, r2, #31
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f202 	lsl.w	r2, r1, r2
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ad      	bne.n	80034e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8110 	beq.w	80037c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d079      	beq.n	80036a4 <HAL_RCC_OscConfig+0x760>
 80035b0:	2301      	movs	r3, #1
 80035b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	4bab      	ldr	r3, [pc, #684]	; (800387c <HAL_RCC_OscConfig+0x938>)
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	461a      	mov	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fd fe7d 	bl	80012d8 <HAL_GetTick>
 80035de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fd fe78 	bl	80012d8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d902      	bls.n	80035fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	f000 bcdb 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800360c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003610:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003614:	2202      	movs	r2, #2
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003638:	2202      	movs	r2, #2
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003652:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003654:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 8003656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003660:	2102      	movs	r1, #2
 8003662:	6019      	str	r1, [r3, #0]
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f1a3 	rbit	r1, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800367a:	6019      	str	r1, [r3, #0]
  return result;
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2101      	movs	r1, #1
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0a0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x6a0>
 80036a2:	e08d      	b.n	80037c0 <HAL_RCC_OscConfig+0x87c>
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	fa93 f2a3 	rbit	r2, r3
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036c6:	601a      	str	r2, [r3, #0]
  return result;
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	4b68      	ldr	r3, [pc, #416]	; (800387c <HAL_RCC_OscConfig+0x938>)
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	461a      	mov	r2, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fdf7 	bl	80012d8 <HAL_GetTick>
 80036ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fd fdf2 	bl	80012d8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d902      	bls.n	8003706 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	f000 bc55 	b.w	8003fb0 <HAL_RCC_OscConfig+0x106c>
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800370e:	2202      	movs	r2, #2
 8003710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fa93 f2a3 	rbit	r2, r3
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003732:	2202      	movs	r2, #2
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003756:	2202      	movs	r2, #2
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003770:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 8003774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800377e:	2102      	movs	r1, #2
 8003780:	6019      	str	r1, [r3, #0]
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	fa93 f1a3 	rbit	r1, r3
 8003790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003794:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003798:	6019      	str	r1, [r3, #0]
  return result;
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d197      	bne.n	80036f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 81a1 	beq.w	8003b18 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d116      	bne.n	8003816 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	61d3      	str	r3, [r2, #28]
 80037f4:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800380e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <HAL_RCC_OscConfig+0x93c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11a      	bne.n	8003858 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <HAL_RCC_OscConfig+0x93c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_RCC_OscConfig+0x93c>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fd fd53 	bl	80012d8 <HAL_GetTick>
 8003832:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	e009      	b.n	800384c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003838:	f7fd fd4e 	bl	80012d8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b64      	cmp	r3, #100	; 0x64
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e3b1      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCC_OscConfig+0x93c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10d      	bne.n	8003884 <HAL_RCC_OscConfig+0x940>
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4a02      	ldr	r2, [pc, #8]	; (8003878 <HAL_RCC_OscConfig+0x934>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6213      	str	r3, [r2, #32]
 8003874:	e03c      	b.n	80038f0 <HAL_RCC_OscConfig+0x9ac>
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	10908120 	.word	0x10908120
 8003880:	40007000 	.word	0x40007000
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10c      	bne.n	80038ae <HAL_RCC_OscConfig+0x96a>
 8003894:	4bc1      	ldr	r3, [pc, #772]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4ac0      	ldr	r2, [pc, #768]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	4bbe      	ldr	r3, [pc, #760]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4abd      	ldr	r2, [pc, #756]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038a6:	f023 0304 	bic.w	r3, r3, #4
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	e020      	b.n	80038f0 <HAL_RCC_OscConfig+0x9ac>
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x994>
 80038be:	4bb7      	ldr	r3, [pc, #732]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4ab6      	ldr	r2, [pc, #728]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6213      	str	r3, [r2, #32]
 80038ca:	4bb4      	ldr	r3, [pc, #720]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4ab3      	ldr	r2, [pc, #716]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6213      	str	r3, [r2, #32]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0x9ac>
 80038d8:	4bb0      	ldr	r3, [pc, #704]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4aaf      	ldr	r2, [pc, #700]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	4bad      	ldr	r3, [pc, #692]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4aac      	ldr	r2, [pc, #688]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8081 	beq.w	8003a04 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7fd fce9 	bl	80012d8 <HAL_GetTick>
 8003906:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd fce4 	bl	80012d8 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e345      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
 8003924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003928:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800392c:	2202      	movs	r2, #2
 800392e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	fa93 f2a3 	rbit	r2, r3
 800393e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003942:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800396a:	601a      	str	r2, [r3, #0]
  return result;
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003974:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d102      	bne.n	8003990 <HAL_RCC_OscConfig+0xa4c>
 800398a:	4b84      	ldr	r3, [pc, #528]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	e013      	b.n	80039b8 <HAL_RCC_OscConfig+0xa74>
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003998:	2202      	movs	r2, #2
 800399a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	fa93 f2a3 	rbit	r2, r3
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	4b79      	ldr	r3, [pc, #484]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80039c0:	2102      	movs	r1, #2
 80039c2:	6011      	str	r1, [r2, #0]
 80039c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	fa92 f1a2 	rbit	r1, r2
 80039d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039da:	6011      	str	r1, [r2, #0]
  return result;
 80039dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	fab2 f282 	clz	r2, r2
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	f002 021f 	and.w	r2, r2, #31
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d084      	beq.n	800390c <HAL_RCC_OscConfig+0x9c8>
 8003a02:	e07f      	b.n	8003b04 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a04:	f7fd fc68 	bl	80012d8 <HAL_GetTick>
 8003a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fc63 	bl	80012d8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e2c4      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a2e:	2202      	movs	r2, #2
 8003a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a52:	2202      	movs	r2, #2
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a6c:	601a      	str	r2, [r3, #0]
  return result;
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f043 0302 	orr.w	r3, r3, #2
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d102      	bne.n	8003a92 <HAL_RCC_OscConfig+0xb4e>
 8003a8c:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	e013      	b.n	8003aba <HAL_RCC_OscConfig+0xb76>
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fa93 f2a3 	rbit	r2, r3
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003abe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	6011      	str	r1, [r2, #0]
 8003ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	fa92 f1a2 	rbit	r1, r2
 8003ad4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003adc:	6011      	str	r1, [r2, #0]
  return result;
 8003ade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ae2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	fab2 f282 	clz	r2, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f002 021f 	and.w	r2, r2, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f202 	lsl.w	r2, r1, r2
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d184      	bne.n	8003a0e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 8003b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8242 	beq.w	8003fae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b2a:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <HAL_RCC_OscConfig+0xc58>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	f000 8213 	beq.w	8003f5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f040 8162 	bne.w	8003e0e <HAL_RCC_OscConfig+0xeca>
 8003b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	fa93 f2a3 	rbit	r2, r3
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b6e:	601a      	str	r2, [r3, #0]
  return result;
 8003b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fd fba2 	bl	80012d8 <HAL_GetTick>
 8003b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCC_OscConfig+0xc70>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fb9a 	bl	80012d8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1fd      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	fa93 f2a3 	rbit	r2, r3
 8003bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003bd8:	601a      	str	r2, [r3, #0]
  return result;
 8003bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bde:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCC_OscConfig+0xcba>
 8003bf8:	4bb0      	ldr	r3, [pc, #704]	; (8003ebc <HAL_RCC_OscConfig+0xf78>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	e027      	b.n	8003c4e <HAL_RCC_OscConfig+0xd0a>
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	fa93 f2a3 	rbit	r2, r3
 8003c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	4b9c      	ldr	r3, [pc, #624]	; (8003ebc <HAL_RCC_OscConfig+0xf78>)
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c5a:	6011      	str	r1, [r2, #0]
 8003c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	fa92 f1a2 	rbit	r1, r2
 8003c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c72:	6011      	str	r1, [r2, #0]
  return result;
 8003c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	fab2 f282 	clz	r2, r2
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f042 0220 	orr.w	r2, r2, #32
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f002 021f 	and.w	r2, r2, #31
 8003c8e:	2101      	movs	r1, #1
 8003c90:	fa01 f202 	lsl.w	r2, r1, r2
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d182      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9a:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0xf78>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	497f      	ldr	r1, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0xf78>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003cca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	fa93 f2a3 	rbit	r2, r3
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ce6:	601a      	str	r2, [r3, #0]
  return result;
 8003ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003cf0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	461a      	mov	r2, r3
 8003d04:	2301      	movs	r3, #1
 8003d06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd fae6 	bl	80012d8 <HAL_GetTick>
 8003d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d10:	e009      	b.n	8003d26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fd fae1 	bl	80012d8 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e144      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
 8003d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	fa93 f2a3 	rbit	r2, r3
 8003d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d4a:	601a      	str	r2, [r3, #0]
  return result;
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <HAL_RCC_OscConfig+0xe2c>
 8003d6a:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <HAL_RCC_OscConfig+0xf78>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	e027      	b.n	8003dc0 <HAL_RCC_OscConfig+0xe7c>
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	fa93 f2a3 	rbit	r2, r3
 8003d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	fa93 f2a3 	rbit	r2, r3
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <HAL_RCC_OscConfig+0xf78>)
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dcc:	6011      	str	r1, [r2, #0]
 8003dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	fa92 f1a2 	rbit	r1, r2
 8003ddc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003de0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003de4:	6011      	str	r1, [r2, #0]
  return result;
 8003de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	fab2 f282 	clz	r2, r2
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	f042 0220 	orr.w	r2, r2, #32
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	f002 021f 	and.w	r2, r2, #31
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f202 	lsl.w	r2, r1, r2
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d082      	beq.n	8003d12 <HAL_RCC_OscConfig+0xdce>
 8003e0c:	e0cf      	b.n	8003fae <HAL_RCC_OscConfig+0x106a>
 8003e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e20:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e32:	601a      	str	r2, [r3, #0]
  return result;
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	fab3 f383 	clz	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2300      	movs	r3, #0
 8003e52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd fa40 	bl	80012d8 <HAL_GetTick>
 8003e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5c:	e009      	b.n	8003e72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fd fa3b 	bl	80012d8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e09e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
 8003e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fa93 f2a3 	rbit	r2, r3
 8003e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e96:	601a      	str	r2, [r3, #0]
  return result;
 8003e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ea0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d104      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xf7c>
 8003eb6:	4b01      	ldr	r3, [pc, #4]	; (8003ebc <HAL_RCC_OscConfig+0xf78>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	e029      	b.n	8003f10 <HAL_RCC_OscConfig+0xfcc>
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	fa93 f2a3 	rbit	r2, r3
 8003edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	fa93 f2a3 	rbit	r2, r3
 8003f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x1078>)
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	fa92 f1a2 	rbit	r1, r2
 8003f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f34:	6011      	str	r1, [r2, #0]
  return result;
 8003f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	fab2 f282 	clz	r2, r2
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	f042 0220 	orr.w	r2, r2, #32
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	f002 021f 	and.w	r2, r2, #31
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f202 	lsl.w	r2, r1, r2
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d180      	bne.n	8003e5e <HAL_RCC_OscConfig+0xf1a>
 8003f5c:	e027      	b.n	8003fae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e01e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_RCC_OscConfig+0x1078>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d10b      	bne.n	8003faa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000

08003fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b09e      	sub	sp, #120	; 0x78
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e162      	b.n	800429e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b90      	ldr	r3, [pc, #576]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d910      	bls.n	8004008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	498b      	ldr	r1, [pc, #556]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b89      	ldr	r3, [pc, #548]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e14a      	b.n	800429e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004014:	4b82      	ldr	r3, [pc, #520]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	497f      	ldr	r1, [pc, #508]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80dc 	beq.w	80041ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d13c      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xf6>
 800403c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d102      	bne.n	8004066 <HAL_RCC_ClockConfig+0xa6>
 8004060:	4b6f      	ldr	r3, [pc, #444]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	e00f      	b.n	8004086 <HAL_RCC_ClockConfig+0xc6>
 8004066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800406a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	667b      	str	r3, [r7, #100]	; 0x64
 8004074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004078:	663b      	str	r3, [r7, #96]	; 0x60
 800407a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004082:	4b67      	ldr	r3, [pc, #412]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800408a:	65ba      	str	r2, [r7, #88]	; 0x58
 800408c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800408e:	fa92 f2a2 	rbit	r2, r2
 8004092:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004096:	fab2 f282 	clz	r2, r2
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f042 0220 	orr.w	r2, r2, #32
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f002 021f 	and.w	r2, r2, #31
 80040a6:	2101      	movs	r1, #1
 80040a8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d17b      	bne.n	80041aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0f3      	b.n	800429e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d13c      	bne.n	8004138 <HAL_RCC_ClockConfig+0x178>
 80040be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d102      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x128>
 80040e2:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	e00f      	b.n	8004108 <HAL_RCC_ClockConfig+0x148>
 80040e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	647b      	str	r3, [r7, #68]	; 0x44
 80040f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40
 80040fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004104:	4b46      	ldr	r3, [pc, #280]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800410c:	63ba      	str	r2, [r7, #56]	; 0x38
 800410e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004110:	fa92 f2a2 	rbit	r2, r2
 8004114:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004118:	fab2 f282 	clz	r2, r2
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	f042 0220 	orr.w	r2, r2, #32
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	f002 021f 	and.w	r2, r2, #31
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f202 	lsl.w	r2, r1, r2
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d13a      	bne.n	80041aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b2      	b.n	800429e <HAL_RCC_ClockConfig+0x2de>
 8004138:	2302      	movs	r3, #2
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d102      	bne.n	8004160 <HAL_RCC_ClockConfig+0x1a0>
 800415a:	4b31      	ldr	r3, [pc, #196]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	e00d      	b.n	800417c <HAL_RCC_ClockConfig+0x1bc>
 8004160:	2302      	movs	r3, #2
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
 800416c:	2302      	movs	r3, #2
 800416e:	623b      	str	r3, [r7, #32]
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	4b29      	ldr	r3, [pc, #164]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2202      	movs	r2, #2
 800417e:	61ba      	str	r2, [r7, #24]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	fa92 f2a2 	rbit	r2, r2
 8004186:	617a      	str	r2, [r7, #20]
  return result;
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	fab2 f282 	clz	r2, r2
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f042 0220 	orr.w	r2, r2, #32
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	f002 021f 	and.w	r2, r2, #31
 800419a:	2101      	movs	r1, #1
 800419c:	fa01 f202 	lsl.w	r2, r1, r2
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e079      	b.n	800429e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	491a      	ldr	r1, [pc, #104]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fd f88c 	bl	80012d8 <HAL_GetTick>
 80041c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd f888 	bl	80012d8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e061      	b.n	800429e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d214      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0207 	bic.w	r2, r3, #7
 8004202:	4906      	ldr	r1, [pc, #24]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_RCC_ClockConfig+0x25c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e040      	b.n	800429e <HAL_RCC_ClockConfig+0x2de>
 800421c:	40022000 	.word	0x40022000
 8004220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <HAL_RCC_ClockConfig+0x2e8>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	491a      	ldr	r1, [pc, #104]	; (80042a8 <HAL_RCC_ClockConfig+0x2e8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424e:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <HAL_RCC_ClockConfig+0x2e8>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4912      	ldr	r1, [pc, #72]	; (80042a8 <HAL_RCC_ClockConfig+0x2e8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004262:	f000 f829 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004266:	4601      	mov	r1, r0
 8004268:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <HAL_RCC_ClockConfig+0x2e8>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004270:	22f0      	movs	r2, #240	; 0xf0
 8004272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	fa92 f2a2 	rbit	r2, r2
 800427a:	60fa      	str	r2, [r7, #12]
  return result;
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	fab2 f282 	clz	r2, r2
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	40d3      	lsrs	r3, r2
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x2ec>)
 8004288:	5cd3      	ldrb	r3, [r2, r3]
 800428a:	fa21 f303 	lsr.w	r3, r1, r3
 800428e:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <HAL_RCC_ClockConfig+0x2f0>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_RCC_ClockConfig+0x2f4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc ffda 	bl	8001250 <HAL_InitTick>
  
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3778      	adds	r7, #120	; 0x78
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	08006bd8 	.word	0x08006bd8
 80042b0:	20000000 	.word	0x20000000
 80042b4:	20000004 	.word	0x20000004

080042b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b08b      	sub	sp, #44	; 0x2c
 80042bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x30>
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x36>
 80042e6:	e03c      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_GetSysClockFreq+0xc4>)
 80042ea:	623b      	str	r3, [r7, #32]
      break;
 80042ec:	e03c      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80042f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80042f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	fa92 f2a2 	rbit	r2, r2
 8004300:	607a      	str	r2, [r7, #4]
  return result;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	fab2 f282 	clz	r2, r2
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	40d3      	lsrs	r3, r2
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <HAL_RCC_GetSysClockFreq+0xc8>)
 800430e:	5cd3      	ldrb	r3, [r2, r3]
 8004310:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	220f      	movs	r2, #15
 800431c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	fa92 f2a2 	rbit	r2, r2
 8004324:	60fa      	str	r2, [r7, #12]
  return result;
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	fab2 f282 	clz	r2, r2
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	40d3      	lsrs	r3, r2
 8004330:	4a14      	ldr	r2, [pc, #80]	; (8004384 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004340:	4a0e      	ldr	r2, [pc, #56]	; (800437c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	fbb2 f2f3 	udiv	r2, r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
 8004350:	e004      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	623b      	str	r3, [r7, #32]
      break;
 8004360:	e002      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004364:	623b      	str	r3, [r7, #32]
      break;
 8004366:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004368:	6a3b      	ldr	r3, [r7, #32]
}
 800436a:	4618      	mov	r0, r3
 800436c:	372c      	adds	r7, #44	; 0x2c
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	007a1200 	.word	0x007a1200
 8004380:	08006bf0 	.word	0x08006bf0
 8004384:	08006c00 	.word	0x08006c00
 8004388:	003d0900 	.word	0x003d0900

0800438c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000000 	.word	0x20000000

080043a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043aa:	f7ff ffef 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043ae:	4601      	mov	r1, r0
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	fa92 f2a2 	rbit	r2, r2
 80043c4:	603a      	str	r2, [r7, #0]
  return result;
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	fab2 f282 	clz	r2, r2
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	40d3      	lsrs	r3, r2
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000
 80043e4:	08006be8 	.word	0x08006be8

080043e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80043ee:	f7ff ffcd 	bl	800438c <HAL_RCC_GetHCLKFreq>
 80043f2:	4601      	mov	r1, r0
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80043fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	fa92 f2a2 	rbit	r2, r2
 8004408:	603a      	str	r2, [r7, #0]
  return result;
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	fab2 f282 	clz	r2, r2
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	40d3      	lsrs	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	08006be8 	.word	0x08006be8

0800442c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b092      	sub	sp, #72	; 0x48
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800443c:	2300      	movs	r3, #0
 800443e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80d4 	beq.w	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004450:	4b4e      	ldr	r3, [pc, #312]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10e      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445c:	4b4b      	ldr	r3, [pc, #300]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4a4a      	ldr	r2, [pc, #296]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	61d3      	str	r3, [r2, #28]
 8004468:	4b48      	ldr	r3, [pc, #288]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b45      	ldr	r3, [pc, #276]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d118      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b42      	ldr	r3, [pc, #264]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a41      	ldr	r2, [pc, #260]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800448c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004492:	f7fc ff21 	bl	80012d8 <HAL_GetTick>
 8004496:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	e008      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449a:	f7fc ff1d 	bl	80012d8 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	; 0x64
 80044a6:	d901      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e169      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b38      	ldr	r3, [pc, #224]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044b8:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8084 	beq.w	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d07c      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d8:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	fa93 f3a3 	rbit	r3, r3
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f2:	fab3 f383 	clz	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	461a      	mov	r2, r3
 8004502:	2301      	movs	r3, #1
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	461a      	mov	r2, r3
 8004526:	2300      	movs	r3, #0
 8004528:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04b      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fc fecd 	bl	80012d8 <HAL_GetTick>
 800453e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004540:	e00a      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fc fec9 	bl	80012d8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e113      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004558:	2302      	movs	r3, #2
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
 8004564:	2302      	movs	r3, #2
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	61fb      	str	r3, [r7, #28]
  return result;
 8004570:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004572:	fab3 f383 	clz	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f043 0302 	orr.w	r3, r3, #2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d108      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004586:	4b01      	ldr	r3, [pc, #4]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	e00d      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800458c:	40021000 	.word	0x40021000
 8004590:	40007000 	.word	0x40007000
 8004594:	10908100 	.word	0x10908100
 8004598:	2302      	movs	r3, #2
 800459a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	4b78      	ldr	r3, [pc, #480]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2202      	movs	r2, #2
 80045aa:	613a      	str	r2, [r7, #16]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	fa92 f2a2 	rbit	r2, r2
 80045b2:	60fa      	str	r2, [r7, #12]
  return result;
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	fab2 f282 	clz	r2, r2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	f002 021f 	and.w	r2, r2, #31
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f202 	lsl.w	r2, r1, r2
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0b7      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045d2:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	496a      	ldr	r1, [pc, #424]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ec:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4a65      	ldr	r2, [pc, #404]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004604:	4b60      	ldr	r3, [pc, #384]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f023 0203 	bic.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	495d      	ldr	r1, [pc, #372]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004622:	4b59      	ldr	r3, [pc, #356]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4956      	ldr	r1, [pc, #344]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004640:	4b51      	ldr	r3, [pc, #324]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	494e      	ldr	r1, [pc, #312]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f023 0210 	bic.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4947      	ldr	r1, [pc, #284]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800467c:	4b42      	ldr	r3, [pc, #264]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	493f      	ldr	r1, [pc, #252]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f023 0220 	bic.w	r2, r3, #32
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4938      	ldr	r1, [pc, #224]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b8:	4b33      	ldr	r3, [pc, #204]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	4930      	ldr	r1, [pc, #192]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	4929      	ldr	r1, [pc, #164]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	4921      	ldr	r1, [pc, #132]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004712:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	491a      	ldr	r1, [pc, #104]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004730:	4b15      	ldr	r3, [pc, #84]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	4912      	ldr	r1, [pc, #72]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473e:	4313      	orrs	r3, r2
 8004740:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800474e:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	490b      	ldr	r1, [pc, #44]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	4903      	ldr	r1, [pc, #12]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3748      	adds	r7, #72	; 0x48
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000

0800478c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e049      	b.n	8004832 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fbde 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 fbe0 	bl	8004f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d001      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e04a      	b.n	80048ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d013      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_TIM_Base_Start_IT+0xc0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <HAL_TIM_Base_Start_IT+0xc4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1a      	ldr	r2, [pc, #104]	; (8004904 <HAL_TIM_Base_Start_IT+0xc8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x6c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_TIM_Base_Start_IT+0xcc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d115      	bne.n	80048d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <HAL_TIM_Base_Start_IT+0xd0>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b06      	cmp	r3, #6
 80048b8:	d015      	beq.n	80048e6 <HAL_TIM_Base_Start_IT+0xaa>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c0:	d011      	beq.n	80048e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	e008      	b.n	80048e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800
 8004904:	40013400 	.word	0x40013400
 8004908:	40014000 	.word	0x40014000
 800490c:	00010007 	.word	0x00010007

08004910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e049      	b.n	80049b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f841 	bl	80049be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fb1e 	bl	8004f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_TIM_PWM_Start+0x24>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e03c      	b.n	8004a72 <HAL_TIM_PWM_Start+0x9e>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d109      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x3e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	e02f      	b.n	8004a72 <HAL_TIM_PWM_Start+0x9e>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d109      	bne.n	8004a2c <HAL_TIM_PWM_Start+0x58>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e022      	b.n	8004a72 <HAL_TIM_PWM_Start+0x9e>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	d109      	bne.n	8004a46 <HAL_TIM_PWM_Start+0x72>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	bf14      	ite	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	2300      	moveq	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e015      	b.n	8004a72 <HAL_TIM_PWM_Start+0x9e>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d109      	bne.n	8004a60 <HAL_TIM_PWM_Start+0x8c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e008      	b.n	8004a72 <HAL_TIM_PWM_Start+0x9e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e097      	b.n	8004baa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start+0xb6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a88:	e023      	b.n	8004ad2 <HAL_TIM_PWM_Start+0xfe>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Start+0xc6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a98:	e01b      	b.n	8004ad2 <HAL_TIM_PWM_Start+0xfe>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xd6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa8:	e013      	b.n	8004ad2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xe6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab8:	e00b      	b.n	8004ad2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b10      	cmp	r3, #16
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start+0xf6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac8:	e003      	b.n	8004ad2 <HAL_TIM_PWM_Start+0xfe>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fe58 	bl	8005790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a33      	ldr	r2, [pc, #204]	; (8004bb4 <HAL_TIM_PWM_Start+0x1e0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x13e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a32      	ldr	r2, [pc, #200]	; (8004bb8 <HAL_TIM_PWM_Start+0x1e4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x13e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <HAL_TIM_PWM_Start+0x1e8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x13e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	; (8004bc0 <HAL_TIM_PWM_Start+0x1ec>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x13e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <HAL_TIM_PWM_Start+0x1f0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x142>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HAL_TIM_PWM_Start+0x144>
 8004b16:	2300      	movs	r3, #0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <HAL_TIM_PWM_Start+0x1e0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_TIM_PWM_Start+0x194>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d013      	beq.n	8004b68 <HAL_TIM_PWM_Start+0x194>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a20      	ldr	r2, [pc, #128]	; (8004bc8 <HAL_TIM_PWM_Start+0x1f4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_TIM_PWM_Start+0x194>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_TIM_PWM_Start+0x1f8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_TIM_PWM_Start+0x194>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <HAL_TIM_PWM_Start+0x1e4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIM_PWM_Start+0x194>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <HAL_TIM_PWM_Start+0x1e8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d115      	bne.n	8004b94 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d015      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1d2>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d011      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	e008      	b.n	8004ba6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e000      	b.n	8004ba8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40013400 	.word	0x40013400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	00010007 	.word	0x00010007

08004bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e0ff      	b.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b14      	cmp	r3, #20
 8004bfe:	f200 80f0 	bhi.w	8004de2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004de3 	.word	0x08004de3
 8004c10:	08004de3 	.word	0x08004de3
 8004c14:	08004de3 	.word	0x08004de3
 8004c18:	08004c9d 	.word	0x08004c9d
 8004c1c:	08004de3 	.word	0x08004de3
 8004c20:	08004de3 	.word	0x08004de3
 8004c24:	08004de3 	.word	0x08004de3
 8004c28:	08004cdf 	.word	0x08004cdf
 8004c2c:	08004de3 	.word	0x08004de3
 8004c30:	08004de3 	.word	0x08004de3
 8004c34:	08004de3 	.word	0x08004de3
 8004c38:	08004d1f 	.word	0x08004d1f
 8004c3c:	08004de3 	.word	0x08004de3
 8004c40:	08004de3 	.word	0x08004de3
 8004c44:	08004de3 	.word	0x08004de3
 8004c48:	08004d61 	.word	0x08004d61
 8004c4c:	08004de3 	.word	0x08004de3
 8004c50:	08004de3 	.word	0x08004de3
 8004c54:	08004de3 	.word	0x08004de3
 8004c58:	08004da1 	.word	0x08004da1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa24 	bl	80050b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0208 	orr.w	r2, r2, #8
 8004c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0204 	bic.w	r2, r2, #4
 8004c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	619a      	str	r2, [r3, #24]
      break;
 8004c9a:	e0a5      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fa94 	bl	80051d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	619a      	str	r2, [r3, #24]
      break;
 8004cdc:	e084      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fafd 	bl	80052e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0208 	orr.w	r2, r2, #8
 8004cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0204 	bic.w	r2, r2, #4
 8004d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69d9      	ldr	r1, [r3, #28]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	61da      	str	r2, [r3, #28]
      break;
 8004d1c:	e064      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fb65 	bl	80053f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	021a      	lsls	r2, r3, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	61da      	str	r2, [r3, #28]
      break;
 8004d5e:	e043      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fbae 	bl	80054c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0208 	orr.w	r2, r2, #8
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d9e:	e023      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fbf2 	bl	8005590 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004de0:	e002      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      break;
 8004de6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop

08004dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_ConfigClockSource+0x1c>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0b6      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x18a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e54:	d03e      	beq.n	8004ed4 <HAL_TIM_ConfigClockSource+0xd8>
 8004e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5a:	f200 8087 	bhi.w	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e62:	f000 8086 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x176>
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6a:	d87f      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e6c:	2b70      	cmp	r3, #112	; 0x70
 8004e6e:	d01a      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0xaa>
 8004e70:	2b70      	cmp	r3, #112	; 0x70
 8004e72:	d87b      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e74:	2b60      	cmp	r3, #96	; 0x60
 8004e76:	d050      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x11e>
 8004e78:	2b60      	cmp	r3, #96	; 0x60
 8004e7a:	d877      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d03c      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0xfe>
 8004e80:	2b50      	cmp	r3, #80	; 0x50
 8004e82:	d873      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d058      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x13e>
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d86f      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e8c:	2b30      	cmp	r3, #48	; 0x30
 8004e8e:	d064      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15e>
 8004e90:	2b30      	cmp	r3, #48	; 0x30
 8004e92:	d86b      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d060      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15e>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d867      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05c      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15e>
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d05a      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15e>
 8004ea4:	e062      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6899      	ldr	r1, [r3, #8]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f000 fc4b 	bl	8005750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	609a      	str	r2, [r3, #8]
      break;
 8004ed2:	e04f      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	6899      	ldr	r1, [r3, #8]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f000 fc34 	bl	8005750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef6:	609a      	str	r2, [r3, #8]
      break;
 8004ef8:	e03c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 fba8 	bl	800565c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2150      	movs	r1, #80	; 0x50
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fc01 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004f18:	e02c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f000 fbc7 	bl	80056ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2160      	movs	r1, #96	; 0x60
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fbf1 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004f38:	e01c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f000 fb88 	bl	800565c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2140      	movs	r1, #64	; 0x40
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fbe1 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004f58:	e00c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f000 fbd8 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8004f6a:	e003      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e000      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3c      	ldr	r2, [pc, #240]	; (8005094 <TIM_Base_SetConfig+0x104>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00f      	beq.n	8004fc8 <TIM_Base_SetConfig+0x38>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fae:	d00b      	beq.n	8004fc8 <TIM_Base_SetConfig+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a39      	ldr	r2, [pc, #228]	; (8005098 <TIM_Base_SetConfig+0x108>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_Base_SetConfig+0x38>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <TIM_Base_SetConfig+0x10c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a37      	ldr	r2, [pc, #220]	; (80050a0 <TIM_Base_SetConfig+0x110>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d108      	bne.n	8004fda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2d      	ldr	r2, [pc, #180]	; (8005094 <TIM_Base_SetConfig+0x104>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01b      	beq.n	800501a <TIM_Base_SetConfig+0x8a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d017      	beq.n	800501a <TIM_Base_SetConfig+0x8a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <TIM_Base_SetConfig+0x108>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_Base_SetConfig+0x8a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	; (800509c <TIM_Base_SetConfig+0x10c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_Base_SetConfig+0x8a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <TIM_Base_SetConfig+0x110>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <TIM_Base_SetConfig+0x114>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <TIM_Base_SetConfig+0x118>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a25      	ldr	r2, [pc, #148]	; (80050ac <TIM_Base_SetConfig+0x11c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a10      	ldr	r2, [pc, #64]	; (8005094 <TIM_Base_SetConfig+0x104>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00f      	beq.n	8005078 <TIM_Base_SetConfig+0xe8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <TIM_Base_SetConfig+0x110>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00b      	beq.n	8005078 <TIM_Base_SetConfig+0xe8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <TIM_Base_SetConfig+0x114>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_Base_SetConfig+0xe8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <TIM_Base_SetConfig+0x118>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0xe8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <TIM_Base_SetConfig+0x11c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	615a      	str	r2, [r3, #20]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 0302 	bic.w	r3, r3, #2
 80050fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2c      	ldr	r2, [pc, #176]	; (80051bc <TIM_OC1_SetConfig+0x10c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00f      	beq.n	8005130 <TIM_OC1_SetConfig+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <TIM_OC1_SetConfig+0x110>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_OC1_SetConfig+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <TIM_OC1_SetConfig+0x114>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_OC1_SetConfig+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <TIM_OC1_SetConfig+0x118>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC1_SetConfig+0x80>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a28      	ldr	r2, [pc, #160]	; (80051cc <TIM_OC1_SetConfig+0x11c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10c      	bne.n	800514a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0308 	bic.w	r3, r3, #8
 8005136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f023 0304 	bic.w	r3, r3, #4
 8005148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <TIM_OC1_SetConfig+0x10c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00f      	beq.n	8005172 <TIM_OC1_SetConfig+0xc2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <TIM_OC1_SetConfig+0x110>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00b      	beq.n	8005172 <TIM_OC1_SetConfig+0xc2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <TIM_OC1_SetConfig+0x114>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_OC1_SetConfig+0xc2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <TIM_OC1_SetConfig+0x118>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC1_SetConfig+0xc2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a17      	ldr	r2, [pc, #92]	; (80051cc <TIM_OC1_SetConfig+0x11c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d111      	bne.n	8005196 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0210 	bic.w	r2, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0320 	bic.w	r3, r3, #32
 800521e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a28      	ldr	r2, [pc, #160]	; (80052d0 <TIM_OC2_SetConfig+0x100>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_OC2_SetConfig+0x6c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a27      	ldr	r2, [pc, #156]	; (80052d4 <TIM_OC2_SetConfig+0x104>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10d      	bne.n	8005258 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <TIM_OC2_SetConfig+0x100>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00f      	beq.n	8005280 <TIM_OC2_SetConfig+0xb0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <TIM_OC2_SetConfig+0x104>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00b      	beq.n	8005280 <TIM_OC2_SetConfig+0xb0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <TIM_OC2_SetConfig+0x108>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_OC2_SetConfig+0xb0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <TIM_OC2_SetConfig+0x10c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC2_SetConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <TIM_OC2_SetConfig+0x110>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d113      	bne.n	80052a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005286:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800528e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40013400 	.word	0x40013400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800

080052e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <TIM_OC3_SetConfig+0xfc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_OC3_SetConfig+0x6a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <TIM_OC3_SetConfig+0x100>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10d      	bne.n	800536a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005368:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <TIM_OC3_SetConfig+0xfc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00f      	beq.n	8005392 <TIM_OC3_SetConfig+0xae>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <TIM_OC3_SetConfig+0x100>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_OC3_SetConfig+0xae>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <TIM_OC3_SetConfig+0x104>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_OC3_SetConfig+0xae>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <TIM_OC3_SetConfig+0x108>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC3_SetConfig+0xae>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <TIM_OC3_SetConfig+0x10c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d113      	bne.n	80053ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	031b      	lsls	r3, r3, #12
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <TIM_OC4_SetConfig+0xc0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00f      	beq.n	8005478 <TIM_OC4_SetConfig+0x84>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <TIM_OC4_SetConfig+0xc4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_OC4_SetConfig+0x84>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a16      	ldr	r2, [pc, #88]	; (80054bc <TIM_OC4_SetConfig+0xc8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_OC4_SetConfig+0x84>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <TIM_OC4_SetConfig+0xcc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC4_SetConfig+0x84>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <TIM_OC4_SetConfig+0xd0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d109      	bne.n	800548c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800

080054c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800550c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a17      	ldr	r2, [pc, #92]	; (800557c <TIM_OC5_SetConfig+0xb4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00f      	beq.n	8005542 <TIM_OC5_SetConfig+0x7a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a16      	ldr	r2, [pc, #88]	; (8005580 <TIM_OC5_SetConfig+0xb8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_OC5_SetConfig+0x7a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <TIM_OC5_SetConfig+0xbc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_OC5_SetConfig+0x7a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <TIM_OC5_SetConfig+0xc0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_OC5_SetConfig+0x7a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a13      	ldr	r2, [pc, #76]	; (800558c <TIM_OC5_SetConfig+0xc4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d109      	bne.n	8005556 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005548:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	621a      	str	r2, [r3, #32]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40013400 	.word	0x40013400
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <TIM_OC6_SetConfig+0xb8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC6_SetConfig+0x7c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a17      	ldr	r2, [pc, #92]	; (800564c <TIM_OC6_SetConfig+0xbc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC6_SetConfig+0x7c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a16      	ldr	r2, [pc, #88]	; (8005650 <TIM_OC6_SetConfig+0xc0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC6_SetConfig+0x7c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a15      	ldr	r2, [pc, #84]	; (8005654 <TIM_OC6_SetConfig+0xc4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC6_SetConfig+0x7c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a14      	ldr	r2, [pc, #80]	; (8005658 <TIM_OC6_SetConfig+0xc8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800

0800565c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 030a 	bic.w	r3, r3, #10
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0210 	bic.w	r2, r3, #16
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	031b      	lsls	r3, r3, #12
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 0307 	orr.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2201      	movs	r2, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	401a      	ands	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e063      	b.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2b      	ldr	r2, [pc, #172]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d108      	bne.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800582e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005840:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d018      	beq.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d013      	beq.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00e      	beq.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a17      	ldr	r2, [pc, #92]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a12      	ldr	r2, [pc, #72]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d10c      	bne.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40014000 	.word	0x40014000

080058dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e065      	b.n	80059c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d115      	bne.n	80059b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	051b      	lsls	r3, r3, #20
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40013400 	.word	0x40013400

080059d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e040      	b.n	8005a6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fb fb4c 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2224      	movs	r2, #36	; 0x24
 8005a04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fc72 	bl	8006300 <UART_SetConfig>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e022      	b.n	8005a6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fe3a 	bl	80066a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fec1 	bl	80067ec <UART_CheckIdleState>
 8005a6a:	4603      	mov	r3, r0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	4613      	mov	r3, r2
 8005a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d178      	bne.n	8005b7e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_UART_Transmit+0x24>
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e071      	b.n	8005b80 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2221      	movs	r2, #33	; 0x21
 8005aa8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aaa:	f7fb fc15 	bl	80012d8 <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac8:	d108      	bne.n	8005adc <HAL_UART_Transmit+0x68>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	e003      	b.n	8005ae4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ae4:	e030      	b.n	8005b48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 ff23 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e03c      	b.n	8005b80 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	3302      	adds	r3, #2
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e008      	b.n	8005b36 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	b292      	uxth	r2, r2
 8005b2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3301      	adds	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1c8      	bne.n	8005ae6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2140      	movs	r1, #64	; 0x40
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 feec 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e005      	b.n	8005b80 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	f040 80a3 	bne.w	8005cea <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_UART_Receive+0x28>
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e09b      	b.n	8005cec <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2222      	movs	r2, #34	; 0x22
 8005bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bca:	f7fb fb85 	bl	80012d8 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be8:	d10e      	bne.n	8005c08 <HAL_UART_Receive+0x80>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_UART_Receive+0x76>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bfc:	e01a      	b.n	8005c34 <HAL_UART_Receive+0xac>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	22ff      	movs	r2, #255	; 0xff
 8005c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c06:	e015      	b.n	8005c34 <HAL_UART_Receive+0xac>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10d      	bne.n	8005c2c <HAL_UART_Receive+0xa4>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <HAL_UART_Receive+0x9a>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	22ff      	movs	r2, #255	; 0xff
 8005c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c20:	e008      	b.n	8005c34 <HAL_UART_Receive+0xac>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	227f      	movs	r2, #127	; 0x7f
 8005c26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c2a:	e003      	b.n	8005c34 <HAL_UART_Receive+0xac>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c3a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c44:	d108      	bne.n	8005c58 <HAL_UART_Receive+0xd0>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	e003      	b.n	8005c60 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c60:	e037      	b.n	8005cd2 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fe65 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e033      	b.n	8005cec <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10c      	bne.n	8005ca4 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	8a7b      	ldrh	r3, [r7, #18]
 8005c94:	4013      	ands	r3, r2
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e00d      	b.n	8005cc0 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	8a7b      	ldrh	r3, [r7, #18]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1c1      	bne.n	8005c62 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e000      	b.n	8005cec <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3720      	adds	r7, #32
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b0ba      	sub	sp, #232	; 0xe8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d22:	4013      	ands	r3, r2
 8005d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d115      	bne.n	8005d5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00f      	beq.n	8005d5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 82ab 	beq.w	80062a8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
      }
      return;
 8005d5a:	e2a5      	b.n	80062a8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8117 	beq.w	8005f94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d76:	4b85      	ldr	r3, [pc, #532]	; (8005f8c <HAL_UART_IRQHandler+0x298>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 810a 	beq.w	8005f94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d011      	beq.n	8005db0 <HAL_UART_IRQHandler+0xbc>
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da6:	f043 0201 	orr.w	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d011      	beq.n	8005de0 <HAL_UART_IRQHandler+0xec>
 8005dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd6:	f043 0204 	orr.w	r2, r3, #4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d011      	beq.n	8005e10 <HAL_UART_IRQHandler+0x11c>
 8005dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00b      	beq.n	8005e10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e06:	f043 0202 	orr.w	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d017      	beq.n	8005e4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e42:	f043 0208 	orr.w	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d012      	beq.n	8005e7e <HAL_UART_IRQHandler+0x18a>
 8005e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e74:	f043 0220 	orr.w	r2, r3, #32
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8211 	beq.w	80062ac <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d005      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04f      	beq.n	8005f76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fd97 	bl	8006a0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee6:	2b40      	cmp	r3, #64	; 0x40
 8005ee8:	d141      	bne.n	8005f6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3308      	adds	r3, #8
 8005f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1d9      	bne.n	8005eea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d013      	beq.n	8005f66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f42:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <HAL_UART_IRQHandler+0x29c>)
 8005f44:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fc fc6a 	bl	8002824 <HAL_DMA_Abort_IT>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d017      	beq.n	8005f86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	e00f      	b.n	8005f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9b4 	bl	80062d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	e00b      	b.n	8005f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f9b0 	bl	80062d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	e007      	b.n	8005f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f9ac 	bl	80062d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005f84:	e192      	b.n	80062ac <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f86:	bf00      	nop
    return;
 8005f88:	e190      	b.n	80062ac <HAL_UART_IRQHandler+0x5b8>
 8005f8a:	bf00      	nop
 8005f8c:	04000120 	.word	0x04000120
 8005f90:	08006ad3 	.word	0x08006ad3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	f040 814b 	bne.w	8006234 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8144 	beq.w	8006234 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 813d 	beq.w	8006234 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	f040 80b5 	bne.w	800613c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8164 	beq.w	80062b0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	f080 815c 	bcs.w	80062b0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	2b20      	cmp	r3, #32
 800600a:	f000 8086 	beq.w	800611a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006038:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800603c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006044:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1da      	bne.n	800600e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800607c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006080:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006084:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800608e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e1      	bne.n	8006058 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3308      	adds	r3, #8
 800609a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3308      	adds	r3, #8
 80060b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e3      	bne.n	8006094 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ea:	f023 0310 	bic.w	r3, r3, #16
 80060ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80060fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800610a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e4      	bne.n	80060da <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006114:	4618      	mov	r0, r3
 8006116:	f7fc fb4c 	bl	80027b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800612c:	b29b      	uxth	r3, r3
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	b29b      	uxth	r3, r3
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8d7 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800613a:	e0b9      	b.n	80062b0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006148:	b29b      	uxth	r3, r3
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80ab 	beq.w	80062b4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800615e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80a6 	beq.w	80062b4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800617c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800618a:	647b      	str	r3, [r7, #68]	; 0x44
 800618c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e4      	bne.n	8006168 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	623b      	str	r3, [r7, #32]
   return(result);
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	f023 0301 	bic.w	r3, r3, #1
 80061b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061c2:	633a      	str	r2, [r7, #48]	; 0x30
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e3      	bne.n	800619e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0310 	bic.w	r3, r3, #16
 80061fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	69b9      	ldr	r1, [r7, #24]
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	617b      	str	r3, [r7, #20]
   return(result);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e4      	bne.n	80061ea <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f85b 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006232:	e03f      	b.n	80062b4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00e      	beq.n	800625e <HAL_UART_IRQHandler+0x56a>
 8006240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fc7b 	bl	8006b52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800625c:	e02d      	b.n	80062ba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00e      	beq.n	8006288 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01c      	beq.n	80062b8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
    }
    return;
 8006286:	e017      	b.n	80062b8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d012      	beq.n	80062ba <HAL_UART_IRQHandler+0x5c6>
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00c      	beq.n	80062ba <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fc2c 	bl	8006afe <UART_EndTransmit_IT>
    return;
 80062a6:	e008      	b.n	80062ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80062a8:	bf00      	nop
 80062aa:	e006      	b.n	80062ba <HAL_UART_IRQHandler+0x5c6>
    return;
 80062ac:	bf00      	nop
 80062ae:	e004      	b.n	80062ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80062b0:	bf00      	nop
 80062b2:	e002      	b.n	80062ba <HAL_UART_IRQHandler+0x5c6>
      return;
 80062b4:	bf00      	nop
 80062b6:	e000      	b.n	80062ba <HAL_UART_IRQHandler+0x5c6>
    return;
 80062b8:	bf00      	nop
  }

}
 80062ba:	37e8      	adds	r7, #232	; 0xe8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800632e:	f023 030c 	bic.w	r3, r3, #12
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	6979      	ldr	r1, [r7, #20]
 8006338:	430b      	orrs	r3, r1
 800633a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4aa7      	ldr	r2, [pc, #668]	; (8006618 <UART_SetConfig+0x318>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d120      	bne.n	80063c2 <UART_SetConfig+0xc2>
 8006380:	4ba6      	ldr	r3, [pc, #664]	; (800661c <UART_SetConfig+0x31c>)
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	2b03      	cmp	r3, #3
 800638a:	d817      	bhi.n	80063bc <UART_SetConfig+0xbc>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0x94>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063b7 	.word	0x080063b7
 80063a0:	080063ab 	.word	0x080063ab
 80063a4:	2301      	movs	r3, #1
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e0b5      	b.n	8006516 <UART_SetConfig+0x216>
 80063aa:	2302      	movs	r3, #2
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e0b2      	b.n	8006516 <UART_SetConfig+0x216>
 80063b0:	2304      	movs	r3, #4
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e0af      	b.n	8006516 <UART_SetConfig+0x216>
 80063b6:	2308      	movs	r3, #8
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e0ac      	b.n	8006516 <UART_SetConfig+0x216>
 80063bc:	2310      	movs	r3, #16
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e0a9      	b.n	8006516 <UART_SetConfig+0x216>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a96      	ldr	r2, [pc, #600]	; (8006620 <UART_SetConfig+0x320>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d124      	bne.n	8006416 <UART_SetConfig+0x116>
 80063cc:	4b93      	ldr	r3, [pc, #588]	; (800661c <UART_SetConfig+0x31c>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063d8:	d011      	beq.n	80063fe <UART_SetConfig+0xfe>
 80063da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063de:	d817      	bhi.n	8006410 <UART_SetConfig+0x110>
 80063e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063e4:	d011      	beq.n	800640a <UART_SetConfig+0x10a>
 80063e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ea:	d811      	bhi.n	8006410 <UART_SetConfig+0x110>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <UART_SetConfig+0xf8>
 80063f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f4:	d006      	beq.n	8006404 <UART_SetConfig+0x104>
 80063f6:	e00b      	b.n	8006410 <UART_SetConfig+0x110>
 80063f8:	2300      	movs	r3, #0
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e08b      	b.n	8006516 <UART_SetConfig+0x216>
 80063fe:	2302      	movs	r3, #2
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e088      	b.n	8006516 <UART_SetConfig+0x216>
 8006404:	2304      	movs	r3, #4
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e085      	b.n	8006516 <UART_SetConfig+0x216>
 800640a:	2308      	movs	r3, #8
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e082      	b.n	8006516 <UART_SetConfig+0x216>
 8006410:	2310      	movs	r3, #16
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e07f      	b.n	8006516 <UART_SetConfig+0x216>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a82      	ldr	r2, [pc, #520]	; (8006624 <UART_SetConfig+0x324>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d124      	bne.n	800646a <UART_SetConfig+0x16a>
 8006420:	4b7e      	ldr	r3, [pc, #504]	; (800661c <UART_SetConfig+0x31c>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006428:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800642c:	d011      	beq.n	8006452 <UART_SetConfig+0x152>
 800642e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006432:	d817      	bhi.n	8006464 <UART_SetConfig+0x164>
 8006434:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006438:	d011      	beq.n	800645e <UART_SetConfig+0x15e>
 800643a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800643e:	d811      	bhi.n	8006464 <UART_SetConfig+0x164>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <UART_SetConfig+0x14c>
 8006444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006448:	d006      	beq.n	8006458 <UART_SetConfig+0x158>
 800644a:	e00b      	b.n	8006464 <UART_SetConfig+0x164>
 800644c:	2300      	movs	r3, #0
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e061      	b.n	8006516 <UART_SetConfig+0x216>
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e05e      	b.n	8006516 <UART_SetConfig+0x216>
 8006458:	2304      	movs	r3, #4
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e05b      	b.n	8006516 <UART_SetConfig+0x216>
 800645e:	2308      	movs	r3, #8
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e058      	b.n	8006516 <UART_SetConfig+0x216>
 8006464:	2310      	movs	r3, #16
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e055      	b.n	8006516 <UART_SetConfig+0x216>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a6e      	ldr	r2, [pc, #440]	; (8006628 <UART_SetConfig+0x328>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d124      	bne.n	80064be <UART_SetConfig+0x1be>
 8006474:	4b69      	ldr	r3, [pc, #420]	; (800661c <UART_SetConfig+0x31c>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800647c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006480:	d011      	beq.n	80064a6 <UART_SetConfig+0x1a6>
 8006482:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006486:	d817      	bhi.n	80064b8 <UART_SetConfig+0x1b8>
 8006488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648c:	d011      	beq.n	80064b2 <UART_SetConfig+0x1b2>
 800648e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006492:	d811      	bhi.n	80064b8 <UART_SetConfig+0x1b8>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <UART_SetConfig+0x1a0>
 8006498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800649c:	d006      	beq.n	80064ac <UART_SetConfig+0x1ac>
 800649e:	e00b      	b.n	80064b8 <UART_SetConfig+0x1b8>
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e037      	b.n	8006516 <UART_SetConfig+0x216>
 80064a6:	2302      	movs	r3, #2
 80064a8:	77fb      	strb	r3, [r7, #31]
 80064aa:	e034      	b.n	8006516 <UART_SetConfig+0x216>
 80064ac:	2304      	movs	r3, #4
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e031      	b.n	8006516 <UART_SetConfig+0x216>
 80064b2:	2308      	movs	r3, #8
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e02e      	b.n	8006516 <UART_SetConfig+0x216>
 80064b8:	2310      	movs	r3, #16
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e02b      	b.n	8006516 <UART_SetConfig+0x216>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5a      	ldr	r2, [pc, #360]	; (800662c <UART_SetConfig+0x32c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d124      	bne.n	8006512 <UART_SetConfig+0x212>
 80064c8:	4b54      	ldr	r3, [pc, #336]	; (800661c <UART_SetConfig+0x31c>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80064d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064d4:	d011      	beq.n	80064fa <UART_SetConfig+0x1fa>
 80064d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064da:	d817      	bhi.n	800650c <UART_SetConfig+0x20c>
 80064dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064e0:	d011      	beq.n	8006506 <UART_SetConfig+0x206>
 80064e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064e6:	d811      	bhi.n	800650c <UART_SetConfig+0x20c>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <UART_SetConfig+0x1f4>
 80064ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f0:	d006      	beq.n	8006500 <UART_SetConfig+0x200>
 80064f2:	e00b      	b.n	800650c <UART_SetConfig+0x20c>
 80064f4:	2300      	movs	r3, #0
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e00d      	b.n	8006516 <UART_SetConfig+0x216>
 80064fa:	2302      	movs	r3, #2
 80064fc:	77fb      	strb	r3, [r7, #31]
 80064fe:	e00a      	b.n	8006516 <UART_SetConfig+0x216>
 8006500:	2304      	movs	r3, #4
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e007      	b.n	8006516 <UART_SetConfig+0x216>
 8006506:	2308      	movs	r3, #8
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e004      	b.n	8006516 <UART_SetConfig+0x216>
 800650c:	2310      	movs	r3, #16
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e001      	b.n	8006516 <UART_SetConfig+0x216>
 8006512:	2310      	movs	r3, #16
 8006514:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651e:	d15b      	bne.n	80065d8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006520:	7ffb      	ldrb	r3, [r7, #31]
 8006522:	2b08      	cmp	r3, #8
 8006524:	d827      	bhi.n	8006576 <UART_SetConfig+0x276>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x22c>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	08006577 	.word	0x08006577
 800653c:	08006567 	.word	0x08006567
 8006540:	08006577 	.word	0x08006577
 8006544:	08006577 	.word	0x08006577
 8006548:	08006577 	.word	0x08006577
 800654c:	0800656f 	.word	0x0800656f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fd ff28 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8006554:	61b8      	str	r0, [r7, #24]
        break;
 8006556:	e013      	b.n	8006580 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006558:	f7fd ff46 	bl	80043e8 <HAL_RCC_GetPCLK2Freq>
 800655c:	61b8      	str	r0, [r7, #24]
        break;
 800655e:	e00f      	b.n	8006580 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006560:	4b33      	ldr	r3, [pc, #204]	; (8006630 <UART_SetConfig+0x330>)
 8006562:	61bb      	str	r3, [r7, #24]
        break;
 8006564:	e00c      	b.n	8006580 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7fd fea7 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 800656a:	61b8      	str	r0, [r7, #24]
        break;
 800656c:	e008      	b.n	8006580 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	61bb      	str	r3, [r7, #24]
        break;
 8006574:	e004      	b.n	8006580 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	77bb      	strb	r3, [r7, #30]
        break;
 800657e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 8082 	beq.w	800668c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	005a      	lsls	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	441a      	add	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b0f      	cmp	r3, #15
 80065a2:	d916      	bls.n	80065d2 <UART_SetConfig+0x2d2>
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065aa:	d212      	bcs.n	80065d2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f023 030f 	bic.w	r3, r3, #15
 80065b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	89fb      	ldrh	r3, [r7, #14]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	89fa      	ldrh	r2, [r7, #14]
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	e05c      	b.n	800668c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	77bb      	strb	r3, [r7, #30]
 80065d6:	e059      	b.n	800668c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065d8:	7ffb      	ldrb	r3, [r7, #31]
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d835      	bhi.n	800664a <UART_SetConfig+0x34a>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x2e4>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006635 	.word	0x08006635
 80065f0:	0800664b 	.word	0x0800664b
 80065f4:	0800663b 	.word	0x0800663b
 80065f8:	0800664b 	.word	0x0800664b
 80065fc:	0800664b 	.word	0x0800664b
 8006600:	0800664b 	.word	0x0800664b
 8006604:	08006643 	.word	0x08006643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fd fecc 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 800660c:	61b8      	str	r0, [r7, #24]
        break;
 800660e:	e021      	b.n	8006654 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006610:	f7fd feea 	bl	80043e8 <HAL_RCC_GetPCLK2Freq>
 8006614:	61b8      	str	r0, [r7, #24]
        break;
 8006616:	e01d      	b.n	8006654 <UART_SetConfig+0x354>
 8006618:	40013800 	.word	0x40013800
 800661c:	40021000 	.word	0x40021000
 8006620:	40004400 	.word	0x40004400
 8006624:	40004800 	.word	0x40004800
 8006628:	40004c00 	.word	0x40004c00
 800662c:	40005000 	.word	0x40005000
 8006630:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <UART_SetConfig+0x3a4>)
 8006636:	61bb      	str	r3, [r7, #24]
        break;
 8006638:	e00c      	b.n	8006654 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800663a:	f7fd fe3d 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 800663e:	61b8      	str	r0, [r7, #24]
        break;
 8006640:	e008      	b.n	8006654 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006646:	61bb      	str	r3, [r7, #24]
        break;
 8006648:	e004      	b.n	8006654 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	77bb      	strb	r3, [r7, #30]
        break;
 8006652:	bf00      	nop
    }

    if (pclk != 0U)
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d018      	beq.n	800668c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	085a      	lsrs	r2, r3, #1
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	441a      	add	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	fbb2 f3f3 	udiv	r3, r2, r3
 800666c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b0f      	cmp	r3, #15
 8006672:	d909      	bls.n	8006688 <UART_SetConfig+0x388>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667a:	d205      	bcs.n	8006688 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	e001      	b.n	800668c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006698:	7fbb      	ldrb	r3, [r7, #30]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	007a1200 	.word	0x007a1200

080066a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01a      	beq.n	80067be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a6:	d10a      	bne.n	80067be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	605a      	str	r2, [r3, #4]
  }
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b098      	sub	sp, #96	; 0x60
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067fc:	f7fa fd6c 	bl	80012d8 <HAL_GetTick>
 8006800:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b08      	cmp	r3, #8
 800680e:	d12e      	bne.n	800686e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006818:	2200      	movs	r2, #0
 800681a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f88c 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d021      	beq.n	800686e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683e:	653b      	str	r3, [r7, #80]	; 0x50
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006848:	647b      	str	r3, [r7, #68]	; 0x44
 800684a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800684e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e6      	bne.n	800682a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e062      	b.n	8006934 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b04      	cmp	r3, #4
 800687a:	d149      	bne.n	8006910 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800687c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006884:	2200      	movs	r2, #0
 8006886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f856 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d03c      	beq.n	8006910 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	623b      	str	r3, [r7, #32]
   return(result);
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
 80068b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e6      	bne.n	8006896 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3308      	adds	r3, #8
 80068ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068e8:	61fa      	str	r2, [r7, #28]
 80068ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	69b9      	ldr	r1, [r7, #24]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	617b      	str	r3, [r7, #20]
   return(result);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e5      	bne.n	80068c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e011      	b.n	8006934 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3758      	adds	r7, #88	; 0x58
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694c:	e049      	b.n	80069e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d045      	beq.n	80069e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fa fcbf 	bl	80012d8 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <UART_WaitOnFlagUntilTimeout+0x30>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e048      	b.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d031      	beq.n	80069e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b08      	cmp	r3, #8
 800698a:	d110      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2208      	movs	r2, #8
 8006992:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f838 	bl	8006a0a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2208      	movs	r2, #8
 800699e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e029      	b.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069bc:	d111      	bne.n	80069e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f81e 	bl	8006a0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e00f      	b.n	8006a02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	bf0c      	ite	eq
 80069f2:	2301      	moveq	r3, #1
 80069f4:	2300      	movne	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d0a6      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b095      	sub	sp, #84	; 0x54
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a30:	643b      	str	r3, [r7, #64]	; 0x40
 8006a32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e6      	bne.n	8006a12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e5      	bne.n	8006a44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d118      	bne.n	8006ab2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0310 	bic.w	r3, r3, #16
 8006a94:	647b      	str	r3, [r7, #68]	; 0x44
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e6      	bne.n	8006a80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ac6:	bf00      	nop
 8006ac8:	3754      	adds	r7, #84	; 0x54
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff fbef 	bl	80062d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b088      	sub	sp, #32
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6979      	ldr	r1, [r7, #20]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e6      	bne.n	8006b06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff fbbb 	bl	80062c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b4a:	bf00      	nop
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <__libc_init_array>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4d0d      	ldr	r5, [pc, #52]	; (8006ba0 <__libc_init_array+0x38>)
 8006b6c:	4c0d      	ldr	r4, [pc, #52]	; (8006ba4 <__libc_init_array+0x3c>)
 8006b6e:	1b64      	subs	r4, r4, r5
 8006b70:	10a4      	asrs	r4, r4, #2
 8006b72:	2600      	movs	r6, #0
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	d109      	bne.n	8006b8c <__libc_init_array+0x24>
 8006b78:	4d0b      	ldr	r5, [pc, #44]	; (8006ba8 <__libc_init_array+0x40>)
 8006b7a:	4c0c      	ldr	r4, [pc, #48]	; (8006bac <__libc_init_array+0x44>)
 8006b7c:	f000 f820 	bl	8006bc0 <_init>
 8006b80:	1b64      	subs	r4, r4, r5
 8006b82:	10a4      	asrs	r4, r4, #2
 8006b84:	2600      	movs	r6, #0
 8006b86:	42a6      	cmp	r6, r4
 8006b88:	d105      	bne.n	8006b96 <__libc_init_array+0x2e>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b90:	4798      	blx	r3
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7ee      	b.n	8006b74 <__libc_init_array+0xc>
 8006b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9a:	4798      	blx	r3
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	e7f2      	b.n	8006b86 <__libc_init_array+0x1e>
 8006ba0:	08006c10 	.word	0x08006c10
 8006ba4:	08006c10 	.word	0x08006c10
 8006ba8:	08006c10 	.word	0x08006c10
 8006bac:	08006c14 	.word	0x08006c14

08006bb0 <memset>:
 8006bb0:	4402      	add	r2, r0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d100      	bne.n	8006bba <memset+0xa>
 8006bb8:	4770      	bx	lr
 8006bba:	f803 1b01 	strb.w	r1, [r3], #1
 8006bbe:	e7f9      	b.n	8006bb4 <memset+0x4>

08006bc0 <_init>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

08006bcc <_fini>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr
