
Fan_Control_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c4c  08006c4c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006c4c  08006c4c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c4c  08006c4c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000001f0  20000018  20000018  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014867  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb8  00000000  00000000  000348af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00037568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  00038668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f864  00000000  00000000  00039688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000162e8  00000000  00000000  00058eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c077a  00000000  00000000  0006f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f94e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000475c  00000000  00000000  0012f9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bfc 	.word	0x08006bfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006bfc 	.word	0x08006bfc

080001c8 <flash_erase>:
FLASH_EraseInitTypeDef flash_erase_control_mode_init;
FLASH_EraseInitTypeDef flash_erase_wind_mode_init;


void flash_erase()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    /*
	 * @brief init flash erase variables
	 */
	flash_erase_power_init.TypeErase =  FLASH_TYPEERASE_PAGES;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <flash_erase+0x4c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
	flash_erase_power_init.NbPages = 1;
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <flash_erase+0x4c>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	609a      	str	r2, [r3, #8]
	flash_erase_power_init.PageAddress = ADDR_FLASH_PAGE_255;
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <flash_erase+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <flash_erase+0x4c>)
 80001de:	6053      	str	r3, [r2, #4]

	flash_erase_control_mode_init.TypeErase = FLASH_TYPEERASE_PAGES ;
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <flash_erase+0x54>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
	flash_erase_control_mode_init.NbPages = 1;
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <flash_erase+0x54>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	609a      	str	r2, [r3, #8]
	flash_erase_control_mode_init.PageAddress = ADDR_FLASH_PAGE_254;
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <flash_erase+0x58>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <flash_erase+0x54>)
 80001f2:	6053      	str	r3, [r2, #4]

	flash_erase_wind_mode_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <flash_erase+0x5c>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
	flash_erase_wind_mode_init.NbPages = 1;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <flash_erase+0x5c>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	609a      	str	r2, [r3, #8]
	flash_erase_wind_mode_init.PageAddress = ADDR_FLASH_PAGE_253;
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <flash_erase+0x60>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <flash_erase+0x5c>)
 8000206:	6053      	str	r3, [r2, #4]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000038 	.word	0x20000038
 8000218:	20000000 	.word	0x20000000
 800021c:	20000044 	.word	0x20000044
 8000220:	20000004 	.word	0x20000004
 8000224:	20000050 	.word	0x20000050
 8000228:	20000008 	.word	0x20000008

0800022c <mutate_power>:

void mutate_power(POWER power){
 800022c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000230:	b097      	sub	sp, #92	; 0x5c
 8000232:	af10      	add	r7, sp, #64	; 0x40
 8000234:	4603      	mov	r3, r0
 8000236:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Mutate power variable
	 * @param power set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_254;
 8000238:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <mutate_power+0xbc>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	617b      	str	r3, [r7, #20]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_253;
 800023e:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <mutate_power+0xc0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	613b      	str	r3, [r7, #16]
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_255;
 8000244:	4b2a      	ldr	r3, [pc, #168]	; (80002f0 <mutate_power+0xc4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	60fb      	str	r3, [r7, #12]
	if(*p_power != power){
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	429a      	cmp	r2, r3
 8000252:	d044      	beq.n	80002de <mutate_power+0xb2>
		if(power == OFF){
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d114      	bne.n	8000284 <mutate_power+0x58>
			wind_control(htim1, LEVEL_0);
 800025a:	4e26      	ldr	r6, [pc, #152]	; (80002f4 <mutate_power+0xc8>)
 800025c:	2300      	movs	r3, #0
 800025e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000260:	466d      	mov	r5, sp
 8000262:	f106 0410 	add.w	r4, r6, #16
 8000266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800026c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000272:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000276:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800027a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800027e:	f000 f8ff 	bl	8000480 <wind_control>
 8000282:	e019      	b.n	80002b8 <mutate_power+0x8c>
		}
		else{
			if(*p_control_mode == MANUAL){
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d115      	bne.n	80002b8 <mutate_power+0x8c>
				wind_control(htim1, *p_wind_mode);
 800028c:	693b      	ldr	r3, [r7, #16]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	b2db      	uxtb	r3, r3
 8000292:	4e18      	ldr	r6, [pc, #96]	; (80002f4 <mutate_power+0xc8>)
 8000294:	930f      	str	r3, [sp, #60]	; 0x3c
 8000296:	466d      	mov	r5, sp
 8000298:	f106 0410 	add.w	r4, r6, #16
 800029c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800029e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80002ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80002b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80002b4:	f000 f8e4 	bl	8000480 <wind_control>
			}
		}
		HAL_FLASH_Unlock();
 80002b8:	f002 fb80 	bl	80029bc <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_power_init, &p_error_page);
 80002bc:	490e      	ldr	r1, [pc, #56]	; (80002f8 <mutate_power+0xcc>)
 80002be:	480f      	ldr	r0, [pc, #60]	; (80002fc <mutate_power+0xd0>)
 80002c0:	f002 fc40 	bl	8002b44 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_255, power);
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <mutate_power+0xc4>)
 80002c6:	6819      	ldr	r1, [r3, #0]
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2200      	movs	r2, #0
 80002cc:	4698      	mov	r8, r3
 80002ce:	4691      	mov	r9, r2
 80002d0:	4642      	mov	r2, r8
 80002d2:	464b      	mov	r3, r9
 80002d4:	2003      	movs	r0, #3
 80002d6:	f002 fb01 	bl	80028dc <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80002da:	f002 fb95 	bl	8002a08 <HAL_FLASH_Lock>
	}
}
 80002de:	bf00      	nop
 80002e0:	371c      	adds	r7, #28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80002e8:	20000004 	.word	0x20000004
 80002ec:	20000008 	.word	0x20000008
 80002f0:	20000000 	.word	0x20000000
 80002f4:	200000ac 	.word	0x200000ac
 80002f8:	20000034 	.word	0x20000034
 80002fc:	20000038 	.word	0x20000038

08000300 <mutate_control_mode>:

void mutate_control_mode(CONTROL_MODE control_mode){
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	b095      	sub	sp, #84	; 0x54
 8000304:	af10      	add	r7, sp, #64	; 0x40
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate control mode variable
	 * @control_mode set value
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_254;
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <mutate_control_mode+0x80>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	60fb      	str	r3, [r7, #12]
	if(*p_control_mode != control_mode){
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	429a      	cmp	r2, r3
 8000318:	d02e      	beq.n	8000378 <mutate_control_mode+0x78>
		HAL_FLASH_Unlock();
 800031a:	f002 fb4f 	bl	80029bc <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_control_mode_init, &p_error_page);
 800031e:	4919      	ldr	r1, [pc, #100]	; (8000384 <mutate_control_mode+0x84>)
 8000320:	4819      	ldr	r0, [pc, #100]	; (8000388 <mutate_control_mode+0x88>)
 8000322:	f002 fc0f 	bl	8002b44 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_254, control_mode);
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <mutate_control_mode+0x80>)
 8000328:	6819      	ldr	r1, [r3, #0]
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2200      	movs	r2, #0
 800032e:	461c      	mov	r4, r3
 8000330:	4615      	mov	r5, r2
 8000332:	4622      	mov	r2, r4
 8000334:	462b      	mov	r3, r5
 8000336:	2003      	movs	r0, #3
 8000338:	f002 fad0 	bl	80028dc <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 800033c:	f002 fb64 	bl	8002a08 <HAL_FLASH_Lock>
		if(control_mode == MANUAL){
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d118      	bne.n	8000378 <mutate_control_mode+0x78>
			uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_253;
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <mutate_control_mode+0x8c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	60bb      	str	r3, [r7, #8]
			wind_control(htim1, *p_wind_mode);
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4e0f      	ldr	r6, [pc, #60]	; (8000390 <mutate_control_mode+0x90>)
 8000354:	930f      	str	r3, [sp, #60]	; 0x3c
 8000356:	466d      	mov	r5, sp
 8000358:	f106 0410 	add.w	r4, r6, #16
 800035c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800035e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000368:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800036c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000370:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000374:	f000 f884 	bl	8000480 <wind_control>
		}
	}
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	20000004 	.word	0x20000004
 8000384:	20000034 	.word	0x20000034
 8000388:	20000044 	.word	0x20000044
 800038c:	20000008 	.word	0x20000008
 8000390:	200000ac 	.word	0x200000ac

08000394 <mutate_wind_mode>:

void mutate_wind_mode(WIND_MODE wind_mode){
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000396:	b095      	sub	sp, #84	; 0x54
 8000398:	af10      	add	r7, sp, #64	; 0x40
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief mutate wind mode variable
	 * @wind_mode set value
	 */

	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_253;
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <mutate_wind_mode+0x70>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	60fb      	str	r3, [r7, #12]
	if(*p_wind_mode != wind_mode){
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d026      	beq.n	80003fc <mutate_wind_mode+0x68>
		HAL_FLASH_Unlock();
 80003ae:	f002 fb05 	bl	80029bc <HAL_FLASH_Unlock>
		HAL_FLASHEx_Erase(&flash_erase_wind_mode_init, &p_error_page);
 80003b2:	4915      	ldr	r1, [pc, #84]	; (8000408 <mutate_wind_mode+0x74>)
 80003b4:	4815      	ldr	r0, [pc, #84]	; (800040c <mutate_wind_mode+0x78>)
 80003b6:	f002 fbc5 	bl	8002b44 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ADDR_FLASH_PAGE_253, wind_mode);
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <mutate_wind_mode+0x70>)
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2200      	movs	r2, #0
 80003c2:	461c      	mov	r4, r3
 80003c4:	4615      	mov	r5, r2
 80003c6:	4622      	mov	r2, r4
 80003c8:	462b      	mov	r3, r5
 80003ca:	2003      	movs	r0, #3
 80003cc:	f002 fa86 	bl	80028dc <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 80003d0:	f002 fb1a 	bl	8002a08 <HAL_FLASH_Lock>
		wind_control(htim1, wind_mode);
 80003d4:	4e0e      	ldr	r6, [pc, #56]	; (8000410 <mutate_wind_mode+0x7c>)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80003da:	466d      	mov	r5, sp
 80003dc:	f106 0410 	add.w	r4, r6, #16
 80003e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80003f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80003f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003f8:	f000 f842 	bl	8000480 <wind_control>
	}
}
 80003fc:	bf00      	nop
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000404:	20000008 	.word	0x20000008
 8000408:	20000034 	.word	0x20000034
 800040c:	20000050 	.word	0x20000050
 8000410:	200000ac 	.word	0x200000ac

08000414 <get_power>:

uint8_t get_power(){
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
	/*
	 * @return power
	 */
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_255;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <get_power+0x20>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	607b      	str	r3, [r7, #4]
	return *p_power;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	b2db      	uxtb	r3, r3
}
 8000426:	4618      	mov	r0, r3
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	20000000 	.word	0x20000000

08000438 <get_control_mode>:

uint8_t get_control_mode(){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
	/*
	 * @return control mode
	 */
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_254;
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <get_control_mode+0x20>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	607b      	str	r3, [r7, #4]
	return *p_control_mode;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	b2db      	uxtb	r3, r3
}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000004 	.word	0x20000004

0800045c <get_wind_mode>:

uint8_t get_wind_mode(){
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
	/*
	 * @return wind mode
	 */
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_253;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <get_wind_mode+0x20>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	607b      	str	r3, [r7, #4]
	return *p_wind_mode;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	20000008 	.word	0x20000008

08000480 <wind_control>:

void wind_control(TIM_HandleTypeDef tim_handle, WIND_MODE wind_mode){
 8000480:	b084      	sub	sp, #16
 8000482:	b490      	push	{r4, r7}
 8000484:	af00      	add	r7, sp, #0
 8000486:	f107 0408 	add.w	r4, r7, #8
 800048a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * @brief Control PWM
	 * @param tim_handler timer handler
	 * @param wind_mode wind level to be controlled
	 */
	switch(wind_mode){
 800048e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000492:	2b02      	cmp	r3, #2
 8000494:	d00f      	beq.n	80004b6 <wind_control+0x36>
 8000496:	2b02      	cmp	r3, #2
 8000498:	dc12      	bgt.n	80004c0 <wind_control+0x40>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <wind_control+0x24>
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d004      	beq.n	80004ac <wind_control+0x2c>
		break;
	case LEVEL_2:
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
		break;
	}
}
 80004a2:	e00d      	b.n	80004c0 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 0);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	2200      	movs	r2, #0
 80004a8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80004aa:	e009      	b.n	80004c0 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 599);
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	f240 2257 	movw	r2, #599	; 0x257
 80004b2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80004b4:	e004      	b.n	80004c0 <wind_control+0x40>
		__HAL_TIM_SET_COMPARE(&tim_handle, TIM_CHANNEL_1, 799);
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	f240 321f 	movw	r2, #799	; 0x31f
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80004be:	bf00      	nop
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc90      	pop	{r4, r7}
 80004c6:	b004      	add	sp, #16
 80004c8:	4770      	bx	lr
	...

080004cc <default_state>:

void default_state(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
	/*
	 *@brief check correctness of the flash memory storing state variables and fix
	 */
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_255;
 80004d2:	4b19      	ldr	r3, [pc, #100]	; (8000538 <default_state+0x6c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_254;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <default_state+0x70>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_253;
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <default_state+0x74>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	607b      	str	r3, [r7, #4]
	if(*p_power != ON && *p_power != OFF){
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d006      	beq.n	80004fa <default_state+0x2e>
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d002      	beq.n	80004fa <default_state+0x2e>
		mutate_power(OFF);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fe99 	bl	800022c <mutate_power>
	}
	if(*p_control_mode != AUTOMATIC && *p_control_mode != MANUAL){
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <default_state+0x44>
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d002      	beq.n	8000510 <default_state+0x44>
		mutate_control_mode(AUTOMATIC);
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fef8 	bl	8000300 <mutate_control_mode>
	}
	if(*p_wind_mode != LEVEL_0 && *p_wind_mode != LEVEL_1 && *p_wind_mode != LEVEL_2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00a      	beq.n	800052e <default_state+0x62>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d006      	beq.n	800052e <default_state+0x62>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b02      	cmp	r3, #2
 8000526:	d002      	beq.n	800052e <default_state+0x62>
		mutate_wind_mode(LEVEL_0);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff ff33 	bl	8000394 <mutate_wind_mode>
	}
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000000 	.word	0x20000000
 800053c:	20000004 	.word	0x20000004
 8000540:	20000008 	.word	0x20000008

08000544 <restart_before_state>:

void restart_before_state(){
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b095      	sub	sp, #84	; 0x54
 8000548:	af10      	add	r7, sp, #64	; 0x40
	uint32_t* p_power = (uint32_t*) ADDR_FLASH_PAGE_255;
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <restart_before_state+0x5c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	60fb      	str	r3, [r7, #12]
	uint32_t* p_control_mode = (uint32_t*) ADDR_FLASH_PAGE_254;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <restart_before_state+0x60>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	60bb      	str	r3, [r7, #8]
	uint32_t* p_wind_mode = (uint32_t*) ADDR_FLASH_PAGE_253;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <restart_before_state+0x64>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	607b      	str	r3, [r7, #4]
	if(*p_power == ON && *p_control_mode == MANUAL){
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d119      	bne.n	8000598 <restart_before_state+0x54>
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d115      	bne.n	8000598 <restart_before_state+0x54>
		wind_control(htim1, *p_wind_mode);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4e0e      	ldr	r6, [pc, #56]	; (80005ac <restart_before_state+0x68>)
 8000574:	930f      	str	r3, [sp, #60]	; 0x3c
 8000576:	466d      	mov	r5, sp
 8000578:	f106 0410 	add.w	r4, r6, #16
 800057c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800057e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000588:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800058c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000590:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000594:	f7ff ff74 	bl	8000480 <wind_control>
	}
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000008 	.word	0x20000008
 80005ac:	200000ac 	.word	0x200000ac

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fe53 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f853 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 faa5 	bl	8000b0c <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c2:	f000 f91b 	bl	80007fc <MX_TIM1_Init>
  MX_ADC1_Init();
 80005c6:	f000 f8a9 	bl	800071c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005ca:	f000 fa6f 	bl	8000aac <MX_USART1_UART_Init>
  MX_TIM8_Init();
 80005ce:	f000 f9c1 	bl	8000954 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  flash_erase();
 80005d2:	f7ff fdf9 	bl	80001c8 <flash_erase>
  mutate_power(OFF);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff fe28 	bl	800022c <mutate_power>
  default_state();
 80005dc:	f7ff ff76 	bl	80004cc <default_state>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e0:	2100      	movs	r1, #0
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <main+0x9c>)
 80005e4:	f004 fa14 	bl	8004a10 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 80005e8:	4819      	ldr	r0, [pc, #100]	; (8000650 <main+0xa0>)
 80005ea:	f004 f945 	bl	8004878 <HAL_TIM_Base_Start_IT>
  restart_before_state();
 80005ee:	f7ff ffa9 	bl	8000544 <restart_before_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_UART_Receive(&huart1, receiveBuffer, 2, HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	2202      	movs	r2, #2
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <main+0xa4>)
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <main+0xa8>)
 80005fc:	f005 fae2 	bl	8005bc4 <HAL_UART_Receive>
	  if(*(receiveBuffer+1) == 0x04){
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <main+0xa4>)
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d107      	bne.n	8000618 <main+0x68>
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 2, HAL_MAX_DELAY);
 8000608:	4914      	ldr	r1, [pc, #80]	; (800065c <main+0xac>)
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2202      	movs	r2, #2
 8000610:	4811      	ldr	r0, [pc, #68]	; (8000658 <main+0xa8>)
 8000612:	f005 fad7 	bl	8005bc4 <HAL_UART_Receive>
 8000616:	e006      	b.n	8000626 <main+0x76>
	  }
	  else{
		  HAL_UART_Receive(&huart1, receiveBuffer+2, 3, HAL_MAX_DELAY);
 8000618:	4910      	ldr	r1, [pc, #64]	; (800065c <main+0xac>)
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	2203      	movs	r2, #3
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0xa8>)
 8000622:	f005 facf 	bl	8005bc4 <HAL_UART_Receive>
	  }
	  uint8_t status = handle_message(receiveBuffer, sendBuffer);
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <main+0xb0>)
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <main+0xa4>)
 800062a:	f000 fab1 	bl	8000b90 <handle_message>
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	  if(status != 0){
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0dc      	beq.n	80005f2 <main+0x42>
		  HAL_UART_Transmit(&huart1, sendBuffer, status, HAL_MAX_DELAY);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	b29a      	uxth	r2, r3
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <main+0xb0>)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0xa8>)
 8000644:	f005 fa34 	bl	8005ab0 <HAL_UART_Transmit>
  {
 8000648:	e7d3      	b.n	80005f2 <main+0x42>
 800064a:	bf00      	nop
 800064c:	200000ac 	.word	0x200000ac
 8000650:	200000f8 	.word	0x200000f8
 8000654:	200001d0 	.word	0x200001d0
 8000658:	20000144 	.word	0x20000144
 800065c:	200001d2 	.word	0x200001d2
 8000660:	200001d8 	.word	0x200001d8

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09e      	sub	sp, #120	; 0x78
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800066e:	2228      	movs	r2, #40	; 0x28
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 faba 	bl	8006bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	223c      	movs	r2, #60	; 0x3c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 faac 	bl	8006bec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80006a8:	2300      	movs	r3, #0
 80006aa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fc65 	bl	8002f80 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006bc:	f000 fa62 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fc8e 	bl	8003ffc <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006e6:	f000 fa4d 	bl	8000b84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80006ea:	f243 0381 	movw	r3, #12417	; 0x3081
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80006fe:	2300      	movs	r3, #0
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4618      	mov	r0, r3
 8000706:	f003 feaf 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000710:	f000 fa38 	bl	8000b84 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3778      	adds	r7, #120	; 0x78
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000740:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000744:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000746:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_ADC1_Init+0xdc>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_ADC1_Init+0xdc>)
 800075a:	2200      	movs	r2, #0
 800075c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <MX_ADC1_Init+0xdc>)
 800076e:	2201      	movs	r2, #1
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0xdc>)
 800077a:	2201      	movs	r2, #1
 800077c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000788:	2204      	movs	r2, #4
 800078a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC1_Init+0xdc>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0xdc>)
 8000794:	2200      	movs	r2, #0
 8000796:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	4817      	ldr	r0, [pc, #92]	; (80007f8 <MX_ADC1_Init+0xdc>)
 800079a:	f000 fde5 	bl	8001368 <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007a4:	f000 f9ee 	bl	8000b84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	; (80007f8 <MX_ADC1_Init+0xdc>)
 80007b4:	f001 fdb2 	bl	800231c <HAL_ADCEx_MultiModeConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007be:	f000 f9e1 	bl	8000b84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007c2:	2308      	movs	r3, #8
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_ADC1_Init+0xdc>)
 80007e0:	f001 fab0 	bl	8001d44 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80007ea:	f000 f9cb 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000005c 	.word	0x2000005c

080007fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09a      	sub	sp, #104	; 0x68
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	222c      	movs	r2, #44	; 0x2c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f006 f9d8 	bl	8006bec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800083c:	4b43      	ldr	r3, [pc, #268]	; (800094c <MX_TIM1_Init+0x150>)
 800083e:	4a44      	ldr	r2, [pc, #272]	; (8000950 <MX_TIM1_Init+0x154>)
 8000840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <MX_TIM1_Init+0x150>)
 8000844:	224f      	movs	r2, #79	; 0x4f
 8000846:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b40      	ldr	r3, [pc, #256]	; (800094c <MX_TIM1_Init+0x150>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800084e:	4b3f      	ldr	r3, [pc, #252]	; (800094c <MX_TIM1_Init+0x150>)
 8000850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000854:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b3d      	ldr	r3, [pc, #244]	; (800094c <MX_TIM1_Init+0x150>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085c:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_TIM1_Init+0x150>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <MX_TIM1_Init+0x150>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000868:	4838      	ldr	r0, [pc, #224]	; (800094c <MX_TIM1_Init+0x150>)
 800086a:	f003 ffad 	bl	80047c8 <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000874:	f000 f986 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800087e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000882:	4619      	mov	r1, r3
 8000884:	4831      	ldr	r0, [pc, #196]	; (800094c <MX_TIM1_Init+0x150>)
 8000886:	f004 fad7 	bl	8004e38 <HAL_TIM_ConfigClockSource>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000890:	f000 f978 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000894:	482d      	ldr	r0, [pc, #180]	; (800094c <MX_TIM1_Init+0x150>)
 8000896:	f004 f859 	bl	800494c <HAL_TIM_PWM_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008a0:	f000 f970 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4825      	ldr	r0, [pc, #148]	; (800094c <MX_TIM1_Init+0x150>)
 80008b8:	f004 ffae 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008c2:	f000 f95f 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c6:	2360      	movs	r3, #96	; 0x60
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4818      	ldr	r0, [pc, #96]	; (800094c <MX_TIM1_Init+0x150>)
 80008ec:	f004 f990 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008f6:	f000 f945 	bl	8000b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800090e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000912:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800091c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_TIM1_Init+0x150>)
 8000930:	f004 fff2 	bl	8005918 <HAL_TIMEx_ConfigBreakDeadTime>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800093a:	f000 f923 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_TIM1_Init+0x150>)
 8000940:	f000 fb6a 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000944:	bf00      	nop
 8000946:	3768      	adds	r7, #104	; 0x68
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000ac 	.word	0x200000ac
 8000950:	40012c00 	.word	0x40012c00

08000954 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09a      	sub	sp, #104	; 0x68
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
 8000986:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	222c      	movs	r2, #44	; 0x2c
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f006 f92c 	bl	8006bec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <MX_TIM8_Init+0x150>)
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <MX_TIM8_Init+0x154>)
 8000998:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <MX_TIM8_Init+0x150>)
 800099c:	224f      	movs	r2, #79	; 0x4f
 800099e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49999;
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009a8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80009ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009b4:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009c0:	4838      	ldr	r0, [pc, #224]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009c2:	f003 ff01 	bl	80047c8 <HAL_TIM_Base_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f000 f8da 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009da:	4619      	mov	r1, r3
 80009dc:	4831      	ldr	r0, [pc, #196]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009de:	f004 fa2b 	bl	8004e38 <HAL_TIM_ConfigClockSource>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80009e8:	f000 f8cc 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009ec:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <MX_TIM8_Init+0x150>)
 80009ee:	f003 ffad 	bl	800494c <HAL_TIM_PWM_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80009f8:	f000 f8c4 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4825      	ldr	r0, [pc, #148]	; (8000aa4 <MX_TIM8_Init+0x150>)
 8000a10:	f004 ff02 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000a1a:	f000 f8b3 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1e:	2360      	movs	r3, #96	; 0x60
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <MX_TIM8_Init+0x150>)
 8000a44:	f004 f8e4 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000a4e:	f000 f899 	bl	8000b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM8_Init+0x150>)
 8000a88:	f004 ff46 	bl	8005918 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000a92:	f000 f877 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM8_Init+0x150>)
 8000a98:	f000 fabe 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3768      	adds	r7, #104	; 0x68
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000f8 	.word	0x200000f8
 8000aa8:	40013400 	.word	0x40013400

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_USART1_UART_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART1_UART_Init+0x58>)
 8000af0:	f004 ff90 	bl	8005a14 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f843 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000144 	.word	0x20000144
 8000b08:	40013800 	.word	0x40013800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	6153      	str	r3, [r2, #20]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b64:	6153      	str	r3, [r2, #20]
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x74>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <handle_message>:
POWER power = OFF;
WIND_MODE wind_mode = LEVEL_0;
CONTROL_MODE control_mode = AUTOMATIC;


uint8_t handle_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]

    *sent_buffer = 0x02;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
    uint8_t send_length;
    uint8_t* stx = received_buffer;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	623b      	str	r3, [r7, #32]
    if(*stx != 0x02){
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d003      	beq.n	8000bb4 <handle_message+0x24>
        send_length = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error_msg;
 8000bb2:	e06a      	b.n	8000c8a <handle_message+0xfa>
    }

    uint8_t* txRxID  = received_buffer + 1;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
	uint8_t* sent_frame_type = sent_buffer + 1;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
	uint8_t* p_sent_data_length = sent_buffer + 2;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	617b      	str	r3, [r7, #20]
	uint8_t sent_data_length;
	uint8_t received_data_length;
    
    switch (*txRxID) {
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d832      	bhi.n	8000c36 <handle_message+0xa6>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <handle_message+0x48>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000be9 	.word	0x08000be9
 8000bdc:	08000bff 	.word	0x08000bff
 8000be0:	08000c15 	.word	0x08000c15
 8000be4:	08000c2b 	.word	0x08000c2b
        case FRAME_TURN_ON_OFF:
            process_power_message(received_buffer, sent_buffer);
 8000be8:	6839      	ldr	r1, [r7, #0]
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f854 	bl	8000c98 <process_power_message>
            received_data_length = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000bfc:	e01f      	b.n	8000c3e <handle_message+0xae>
        
        case FRAME_SELECT_MODE:
            process_control_mode_message(received_buffer, sent_buffer);
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f878 	bl	8000cf6 <process_control_mode_message>
            received_data_length = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000c12:	e014      	b.n	8000c3e <handle_message+0xae>
        
        case FRAME_SELECT_FAN_SPEED:
            process_wind_mode_message(received_buffer, sent_buffer);
 8000c14:	6839      	ldr	r1, [r7, #0]
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f8a1 	bl	8000d5e <process_wind_mode_message>
            received_data_length = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            sent_data_length = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 8000c28:	e009      	b.n	8000c3e <handle_message+0xae>
        
        case FRAME_READ_STATUS:
            return process_states_request_message(received_buffer, sent_buffer);
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f8d1 	bl	8000dd4 <process_states_request_message>
 8000c32:	4603      	mov	r3, r0
 8000c34:	e02b      	b.n	8000c8e <handle_message+0xfe>
            received_data_length = 0;
            sent_data_length =  process_states_request_message(received_buffer, sent_buffer);
        
        default:
            send_length = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            goto error_msg;
 8000c3c:	e025      	b.n	8000c8a <handle_message+0xfa>
    }

    *sent_frame_type = *txRxID+ 0x80;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3b80      	subs	r3, #128	; 0x80
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	701a      	strb	r2, [r3, #0]
	*p_sent_data_length = sent_data_length;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c50:	701a      	strb	r2, [r3, #0]

    uint8_t* received_ETX = received_buffer + 3 + received_data_length;
 8000c52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c56:	3303      	adds	r3, #3
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
	if(*received_ETX != 0x03){
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d003      	beq.n	8000c6e <handle_message+0xde>
		send_length = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto error_msg;
 8000c6c:	e00d      	b.n	8000c8a <handle_message+0xfa>
    }

    uint8_t* sent_ETX = sent_buffer + 3 + sent_data_length; 
 8000c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c72:	3303      	adds	r3, #3
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
	*sent_ETX = 0x03;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	701a      	strb	r2, [r3, #0]
	send_length = sent_data_length + 4;
 8000c80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c84:	3304      	adds	r3, #4
 8000c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    error_msg : return send_length;
 8000c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop

08000c98 <process_power_message>:

void process_power_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
    if (check_message_data_length(received_buffer, 1)) {
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f8e9 	bl	8000e7c <check_message_data_length>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d01e      	beq.n	8000cee <process_power_message+0x56>
    uint8_t* received_data = received_buffer + 3;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3303      	adds	r3, #3
 8000cb4:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3303      	adds	r3, #3
 8000cba:	60bb      	str	r3, [r7, #8]
	if(*received_data == OFF){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d106      	bne.n	8000cd2 <process_power_message+0x3a>
		mutate_power(OFF);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fab1 	bl	800022c <mutate_power>
		*sent_data = 0x00;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
	}
	else{
		*sent_data = 0xFF;
	}
    } 
}
 8000cd0:	e00d      	b.n	8000cee <process_power_message+0x56>
	else if(*received_data == ON){
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d106      	bne.n	8000ce8 <process_power_message+0x50>
		mutate_power(ON);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff faa6 	bl	800022c <mutate_power>
		*sent_data = 0x00;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
}
 8000ce6:	e002      	b.n	8000cee <process_power_message+0x56>
		*sent_data = 0xFF;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	22ff      	movs	r2, #255	; 0xff
 8000cec:	701a      	strb	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <process_control_mode_message>:

void process_control_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
    // Implement logic to process control mode message
    // Update control_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1)){
 8000d00:	2101      	movs	r1, #1
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f8ba 	bl	8000e7c <check_message_data_length>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d022      	beq.n	8000d54 <process_control_mode_message+0x5e>
    uint8_t* received_data = received_buffer + 3;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3303      	adds	r3, #3
 8000d12:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	3303      	adds	r3, #3
 8000d18:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000d1a:	f7ff fb7b 	bl	8000414 <get_power>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <process_control_mode_message+0x36>
		*sent_data = 0xFF;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000d2a:	e014      	b.n	8000d56 <process_control_mode_message+0x60>
	}
	if(*received_data == AUTOMATIC || *received_data == MANUAL){
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <process_control_mode_message+0x46>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d108      	bne.n	8000d4e <process_control_mode_message+0x58>
		mutate_control_mode(*received_data);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fadd 	bl	8000300 <mutate_control_mode>
		*sent_data = 0x00;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
	}
	else{
		*sent_data = 0xFF;
	}
} goto error_msg;
 8000d4c:	e002      	b.n	8000d54 <process_control_mode_message+0x5e>
		*sent_data = 0xFF;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	701a      	strb	r2, [r3, #0]
} goto error_msg;
 8000d54:	bf00      	nop

error_msg: return;
 8000d56:	bf00      	nop

}
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <process_wind_mode_message>:

void process_wind_mode_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    // Implement logic to process wind mode message
    // Update wind_mode and sent_buf accordingly
    if (check_message_data_length(received_buffer, 1))
 8000d68:	2101      	movs	r1, #1
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f886 	bl	8000e7c <check_message_data_length>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d02b      	beq.n	8000dce <process_wind_mode_message+0x70>
    {
    uint8_t* received_data = received_buffer + 3;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3303      	adds	r3, #3
 8000d7a:	60fb      	str	r3, [r7, #12]
	uint8_t* sent_data = sent_buffer + 3;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	3303      	adds	r3, #3
 8000d80:	60bb      	str	r3, [r7, #8]
	if(get_power() == OFF){
 8000d82:	f7ff fb47 	bl	8000414 <get_power>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d103      	bne.n	8000d94 <process_wind_mode_message+0x36>
		*sent_data = 0xFF;
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	22ff      	movs	r2, #255	; 0xff
 8000d90:	701a      	strb	r2, [r3, #0]
		goto error_msg;
 8000d92:	e01b      	b.n	8000dcc <process_wind_mode_message+0x6e>
	}

	if(*received_data == LEVEL_0 || *received_data == LEVEL_1 || *received_data == LEVEL_2){
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d007      	beq.n	8000dac <process_wind_mode_message+0x4e>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d003      	beq.n	8000dac <process_wind_mode_message+0x4e>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d10b      	bne.n	8000dc4 <process_wind_mode_message+0x66>
		mutate_wind_mode(*received_data);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff faef 	bl	8000394 <mutate_wind_mode>
		*sent_data = 0x00;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
		mutate_control_mode(MANUAL);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fa9f 	bl	8000300 <mutate_control_mode>
 8000dc2:	e003      	b.n	8000dcc <process_wind_mode_message+0x6e>
	}
	else{
		*sent_data = 0xFF;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	22ff      	movs	r2, #255	; 0xff
 8000dc8:	701a      	strb	r2, [r3, #0]
	}
	error_msg: return;
 8000dca:	e7ff      	b.n	8000dcc <process_wind_mode_message+0x6e>
 8000dcc:	bf00      	nop
    }

}
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <process_states_request_message>:

uint8_t process_states_request_message(unsigned char* received_buffer, unsigned char* sent_buffer) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
    // Implement logic to process states request message
    // Update sent_buf accordingly
    uint8_t* sent_data = sent_buffer + 3;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3303      	adds	r3, #3
 8000de2:	61fb      	str	r3, [r7, #28]
	uint8_t* power_state = sent_data + 1;
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	3301      	adds	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
	uint8_t* control_mode_state = sent_data + 2;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3302      	adds	r3, #2
 8000dee:	617b      	str	r3, [r7, #20]
	uint8_t* wind_mode_state = sent_data + 3;	
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	3303      	adds	r3, #3
 8000df4:	613b      	str	r3, [r7, #16]
	uint8_t* temperature_state = sent_data + 4;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	60fb      	str	r3, [r7, #12]
	uint8_t sent_data_length;
	if(!check_message_data_length(received_buffer, 0)){
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f83c 	bl	8000e7c <check_message_data_length>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <process_states_request_message+0x44>
		sent_data_length = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		*sent_data = 0xFF;
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	22ff      	movs	r2, #255	; 0xff
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e028      	b.n	8000e6a <process_states_request_message+0x96>
	}
	else{
		*sent_data = 0x00;
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
		*power_state = get_power();
 8000e1e:	f7ff faf9 	bl	8000414 <get_power>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	701a      	strb	r2, [r3, #0]
		*control_mode_state = get_control_mode();
 8000e2a:	f7ff fb05 	bl	8000438 <get_control_mode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	701a      	strb	r2, [r3, #0]
		*wind_mode_state = get_wind_mode();
 8000e36:	f7ff fb11 	bl	800045c <get_wind_mode>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	701a      	strb	r2, [r3, #0]
		int temp = (int) temperature;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <process_states_request_message+0xa4>)
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e4c:	ee17 3a90 	vmov	r3, s15
 8000e50:	623b      	str	r3, [r7, #32]
		if(temp < 0){
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da01      	bge.n	8000e5c <process_states_request_message+0x88>
			temp = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
		}
		*temperature_state = (uint8_t) temp;
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	701a      	strb	r2, [r3, #0]
		sent_data_length = 5;
 8000e64:	2305      	movs	r3, #5
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return sent_data_length;
 8000e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001cc 	.word	0x200001cc

08000e7c <check_message_data_length>:

uint8_t check_message_data_length(unsigned char* received_buffer, uint8_t expected_value) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
    uint8_t* length = received_buffer + 2;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	60fb      	str	r3, [r7, #12]
    if (*length == expected_value) {
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d101      	bne.n	8000e9c <check_message_data_length+0x20>
        return 1; // Data length is correct
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <check_message_data_length+0x22>
    } else {
        return 0; // Data length is incorrect
 8000e9c:	2300      	movs	r3, #0
    }
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_MspInit+0x44>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_MspInit+0x44>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x44>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f14:	d144      	bne.n	8000fa0 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_ADC_MspInit+0xb4>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480e      	ldr	r0, [pc, #56]	; (8000fac <HAL_ADC_MspInit+0xb8>)
 8000f72:	f001 fe8b 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f001 fe7e 	bl	8002c8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2012      	movs	r0, #18
 8000f96:	f001 fbf4 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f9a:	2012      	movs	r0, #18
 8000f9c:	f001 fc0d 	bl	80027ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000800 	.word	0x48000800

08000fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <HAL_TIM_Base_MspInit+0x5c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10c      	bne.n	8000fdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_TIM_Base_MspInit+0x60>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_TIM_Base_MspInit+0x60>)
 8000fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_TIM_Base_MspInit+0x60>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000fda:	e010      	b.n	8000ffe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <HAL_TIM_Base_MspInit+0x64>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10b      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_TIM_Base_MspInit+0x60>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_TIM_Base_MspInit+0x60>)
 8000fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_TIM_Base_MspInit+0x60>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40012c00 	.word	0x40012c00
 8001010:	40021000 	.word	0x40021000
 8001014:	40013400 	.word	0x40013400

08001018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <HAL_TIM_MspPostInit+0xa8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d11d      	bne.n	8001076 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <HAL_TIM_MspPostInit+0xac>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <HAL_TIM_MspPostInit+0xac>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <HAL_TIM_MspPostInit+0xac>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001064:	2302      	movs	r3, #2
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4816      	ldr	r0, [pc, #88]	; (80010c8 <HAL_TIM_MspPostInit+0xb0>)
 8001070:	f001 fe0c 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001074:	e020      	b.n	80010b8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_TIM_MspPostInit+0xb4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d11b      	bne.n	80010b8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_TIM_MspPostInit+0xac>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_TIM_MspPostInit+0xac>)
 8001086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800108a:	6153      	str	r3, [r2, #20]
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_TIM_MspPostInit+0xac>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80010a8:	2304      	movs	r3, #4
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <HAL_TIM_MspPostInit+0xb8>)
 80010b4:	f001 fdea 	bl	8002c8c <HAL_GPIO_Init>
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48001000 	.word	0x48001000
 80010cc:	40013400 	.word	0x40013400
 80010d0:	48000800 	.word	0x48000800

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_UART_MspInit+0x8c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12f      	bne.n	8001156 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_UART_MspInit+0x90>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <HAL_UART_MspInit+0x90>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_UART_MspInit+0x90>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_UART_MspInit+0x90>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_UART_MspInit+0x90>)
 8001114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_UART_MspInit+0x90>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001126:	2330      	movs	r3, #48	; 0x30
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001136:	2307      	movs	r3, #7
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <HAL_UART_MspInit+0x94>)
 8001142:	f001 fda3 	bl	8002c8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2025      	movs	r0, #37	; 0x25
 800114c:	f001 fb19 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001150:	2025      	movs	r0, #37	; 0x25
 8001152:	f001 fb32 	bl	80027ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40013800 	.word	0x40013800
 8001164:	40021000 	.word	0x40021000
 8001168:	48000800 	.word	0x48000800

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f898 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <ADC1_2_IRQHandler+0x10>)
 80011c6:	f000 faaf 	bl	8001728 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000005c 	.word	0x2000005c

080011d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <USART1_IRQHandler+0x10>)
 80011da:	f004 fda9 	bl	8005d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000144 	.word	0x20000144

080011e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001210:	f7ff ffea 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f005 fcb3 	bl	8006ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123e:	f7ff f9b7 	bl	80005b0 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001244:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001250:	08006c54 	.word	0x08006c54
  ldr r2, =_sbss
 8001254:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001258:	20000208 	.word	0x20000208

0800125c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC3_IRQHandler>
	...

08001260 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x28>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x28>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f001 fa7b 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fe16 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fa93 	bl	80027d6 <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f001 fa5b 	bl	8002782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	20000014 	.word	0x20000014
 80012e8:	20000010 	.word	0x20000010

080012ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000014 	.word	0x20000014
 8001310:	200001e4 	.word	0x200001e4

08001314 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;  
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200001e4 	.word	0x200001e4

0800132c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09a      	sub	sp, #104	; 0x68
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e1c9      	b.n	800171c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d176      	bne.n	8001488 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d152      	bne.n	8001448 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fd99 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d13b      	bne.n	8001448 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f001 f895 	bl	8002500 <ADC_Disable>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d12f      	bne.n	8001448 <HAL_ADC_Init+0xe0>
 80013e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d12b      	bne.n	8001448 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013f8:	f023 0302 	bic.w	r3, r3, #2
 80013fc:	f043 0202 	orr.w	r2, r3, #2
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001412:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001422:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001424:	4b86      	ldr	r3, [pc, #536]	; (8001640 <HAL_ADC_Init+0x2d8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a86      	ldr	r2, [pc, #536]	; (8001644 <HAL_ADC_Init+0x2dc>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9a      	lsrs	r2, r3, #18
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800143a:	e002      	b.n	8001442 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3b01      	subs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f9      	bne.n	800143c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001464:	d110      	bne.n	8001488 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f023 0312 	bic.w	r3, r3, #18
 800146e:	f043 0210 	orr.w	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	f040 8136 	bne.w	8001702 <HAL_ADC_Init+0x39a>
 8001496:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 8131 	bne.w	8001702 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 8129 	bne.w	8001702 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014b8:	f043 0202 	orr.w	r2, r3, #2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c8:	d004      	beq.n	80014d4 <HAL_ADC_Init+0x16c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_ADC_Init+0x2e0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d101      	bne.n	80014d8 <HAL_ADC_Init+0x170>
 80014d4:	4b5d      	ldr	r3, [pc, #372]	; (800164c <HAL_ADC_Init+0x2e4>)
 80014d6:	e000      	b.n	80014da <HAL_ADC_Init+0x172>
 80014d8:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_ADC_Init+0x2e8>)
 80014da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e4:	d102      	bne.n	80014ec <HAL_ADC_Init+0x184>
 80014e6:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_ADC_Init+0x2e0>)
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e01a      	b.n	8001522 <HAL_ADC_Init+0x1ba>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a55      	ldr	r2, [pc, #340]	; (8001648 <HAL_ADC_Init+0x2e0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d103      	bne.n	80014fe <HAL_ADC_Init+0x196>
 80014f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e011      	b.n	8001522 <HAL_ADC_Init+0x1ba>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a54      	ldr	r2, [pc, #336]	; (8001654 <HAL_ADC_Init+0x2ec>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d102      	bne.n	800150e <HAL_ADC_Init+0x1a6>
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <HAL_ADC_Init+0x2f0>)
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e009      	b.n	8001522 <HAL_ADC_Init+0x1ba>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a51      	ldr	r2, [pc, #324]	; (8001658 <HAL_ADC_Init+0x2f0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d102      	bne.n	800151e <HAL_ADC_Init+0x1b6>
 8001518:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <HAL_ADC_Init+0x2ec>)
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e001      	b.n	8001522 <HAL_ADC_Init+0x1ba>
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d108      	bne.n	8001542 <HAL_ADC_Init+0x1da>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Init+0x1da>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_ADC_Init+0x1dc>
 8001542:	2300      	movs	r3, #0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11c      	bne.n	8001582 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001548:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800154a:	2b00      	cmp	r3, #0
 800154c:	d010      	beq.n	8001570 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d107      	bne.n	800156a <HAL_ADC_Init+0x202>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_ADC_Init+0x202>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_ADC_Init+0x204>
 800156a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800156c:	2b00      	cmp	r3, #0
 800156e:	d108      	bne.n	8001582 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	431a      	orrs	r2, r3
 800157e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001580:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7e5b      	ldrb	r3, [r3, #25]
 8001586:	035b      	lsls	r3, r3, #13
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800158c:	2a01      	cmp	r2, #1
 800158e:	d002      	beq.n	8001596 <HAL_ADC_Init+0x22e>
 8001590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001594:	e000      	b.n	8001598 <HAL_ADC_Init+0x230>
 8001596:	2200      	movs	r2, #0
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a8:	4313      	orrs	r3, r2
 80015aa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d11b      	bne.n	80015ee <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7e5b      	ldrb	r3, [r3, #25]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	3b01      	subs	r3, #1
 80015c4:	045a      	lsls	r2, r3, #17
 80015c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015c8:	4313      	orrs	r3, r2
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ce:	663b      	str	r3, [r7, #96]	; 0x60
 80015d0:	e00d      	b.n	80015ee <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d03a      	beq.n	800166c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_ADC_Init+0x2ec>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_ADC_Init+0x2a2>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_ADC_Init+0x2f0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d128      	bne.n	800165c <HAL_ADC_Init+0x2f4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001612:	d012      	beq.n	800163a <HAL_ADC_Init+0x2d2>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800161c:	d00a      	beq.n	8001634 <HAL_ADC_Init+0x2cc>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001626:	d002      	beq.n	800162e <HAL_ADC_Init+0x2c6>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	e018      	b.n	8001660 <HAL_ADC_Init+0x2f8>
 800162e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001632:	e015      	b.n	8001660 <HAL_ADC_Init+0x2f8>
 8001634:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001638:	e012      	b.n	8001660 <HAL_ADC_Init+0x2f8>
 800163a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800163e:	e00f      	b.n	8001660 <HAL_ADC_Init+0x2f8>
 8001640:	2000000c 	.word	0x2000000c
 8001644:	431bde83 	.word	0x431bde83
 8001648:	50000100 	.word	0x50000100
 800164c:	50000300 	.word	0x50000300
 8001650:	50000700 	.word	0x50000700
 8001654:	50000400 	.word	0x50000400
 8001658:	50000500 	.word	0x50000500
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001664:	4313      	orrs	r3, r2
 8001666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001668:	4313      	orrs	r3, r2
 800166a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b00      	cmp	r3, #0
 8001678:	d114      	bne.n	80016a4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001688:	f023 0302 	bic.w	r3, r3, #2
 800168c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7e1b      	ldrb	r3, [r3, #24]
 8001692:	039a      	lsls	r2, r3, #14
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4313      	orrs	r3, r2
 800169e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016a0:	4313      	orrs	r3, r2
 80016a2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_ADC_Init+0x3bc>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016b4:	430b      	orrs	r3, r1
 80016b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10c      	bne.n	80016da <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f023 010f 	bic.w	r1, r3, #15
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	1e5a      	subs	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
 80016d8:	e007      	b.n	80016ea <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 020f 	bic.w	r2, r2, #15
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f023 0303 	bic.w	r3, r3, #3
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001700:	e00a      	b.n	8001718 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f023 0312 	bic.w	r3, r3, #18
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001712:	2301      	movs	r3, #1
 8001714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001718:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800171c:	4618      	mov	r0, r3
 800171e:	3768      	adds	r7, #104	; 0x68
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	fff0c007 	.word	0xfff0c007

08001728 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_ADC_IRQHandler+0x38>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10b      	bne.n	8001778 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80bc 	beq.w	80018e4 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80b6 	beq.w	80018e4 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001798:	d004      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x7c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a90      	ldr	r2, [pc, #576]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d106      	bne.n	80017b2 <HAL_ADC_IRQHandler+0x8a>
 80017a4:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <HAL_ADC_IRQHandler+0x2bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03e      	beq.n	800182e <HAL_ADC_IRQHandler+0x106>
 80017b0:	e005      	b.n	80017be <HAL_ADC_IRQHandler+0x96>
 80017b2:	4b8d      	ldr	r3, [pc, #564]	; (80019e8 <HAL_ADC_IRQHandler+0x2c0>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d037      	beq.n	800182e <HAL_ADC_IRQHandler+0x106>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_IRQHandler+0xaa>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a84      	ldr	r2, [pc, #528]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d106      	bne.n	80017e0 <HAL_ADC_IRQHandler+0xb8>
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HAL_ADC_IRQHandler+0x2bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d027      	beq.n	800182e <HAL_ADC_IRQHandler+0x106>
 80017de:	e005      	b.n	80017ec <HAL_ADC_IRQHandler+0xc4>
 80017e0:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_ADC_IRQHandler+0x2c0>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d020      	beq.n	800182e <HAL_ADC_IRQHandler+0x106>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f4:	d004      	beq.n	8001800 <HAL_ADC_IRQHandler+0xd8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d106      	bne.n	800180e <HAL_ADC_IRQHandler+0xe6>
 8001800:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <HAL_ADC_IRQHandler+0x2bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	2b09      	cmp	r3, #9
 800180a:	d010      	beq.n	800182e <HAL_ADC_IRQHandler+0x106>
 800180c:	e005      	b.n	800181a <HAL_ADC_IRQHandler+0xf2>
 800180e:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <HAL_ADC_IRQHandler+0x2c0>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	2b09      	cmp	r3, #9
 8001818:	d009      	beq.n	800182e <HAL_ADC_IRQHandler+0x106>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001822:	d004      	beq.n	800182e <HAL_ADC_IRQHandler+0x106>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a70      	ldr	r2, [pc, #448]	; (80019ec <HAL_ADC_IRQHandler+0x2c4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d104      	bne.n	8001838 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	e00f      	b.n	8001858 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001840:	d004      	beq.n	800184c <HAL_ADC_IRQHandler+0x124>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a66      	ldr	r2, [pc, #408]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d102      	bne.n	8001852 <HAL_ADC_IRQHandler+0x12a>
 800184c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001850:	e000      	b.n	8001854 <HAL_ADC_IRQHandler+0x12c>
 8001852:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_ADC_IRQHandler+0x2c4>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001862:	2b00      	cmp	r3, #0
 8001864:	d137      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800186c:	2b00      	cmp	r3, #0
 800186e:	d132      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d02d      	beq.n	80018d6 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d11a      	bne.n	80018be <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 020c 	bic.w	r2, r2, #12
 8001896:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d112      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
 80018bc:	e00b      	b.n	80018d6 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f043 0210 	orr.w	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fd28 	bl	800132c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	220c      	movs	r2, #12
 80018e2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x1d0>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8138 	beq.w	8001b74 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8132 	beq.w	8001b74 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001924:	d004      	beq.n	8001930 <HAL_ADC_IRQHandler+0x208>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d106      	bne.n	800193e <HAL_ADC_IRQHandler+0x216>
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_ADC_IRQHandler+0x2bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03e      	beq.n	80019ba <HAL_ADC_IRQHandler+0x292>
 800193c:	e005      	b.n	800194a <HAL_ADC_IRQHandler+0x222>
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_ADC_IRQHandler+0x2c0>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2b00      	cmp	r3, #0
 8001948:	d037      	beq.n	80019ba <HAL_ADC_IRQHandler+0x292>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001952:	d004      	beq.n	800195e <HAL_ADC_IRQHandler+0x236>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d106      	bne.n	800196c <HAL_ADC_IRQHandler+0x244>
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_ADC_IRQHandler+0x2bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2b05      	cmp	r3, #5
 8001968:	d027      	beq.n	80019ba <HAL_ADC_IRQHandler+0x292>
 800196a:	e005      	b.n	8001978 <HAL_ADC_IRQHandler+0x250>
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_ADC_IRQHandler+0x2c0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2b05      	cmp	r3, #5
 8001976:	d020      	beq.n	80019ba <HAL_ADC_IRQHandler+0x292>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001980:	d004      	beq.n	800198c <HAL_ADC_IRQHandler+0x264>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d106      	bne.n	800199a <HAL_ADC_IRQHandler+0x272>
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_ADC_IRQHandler+0x2bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2b09      	cmp	r3, #9
 8001996:	d010      	beq.n	80019ba <HAL_ADC_IRQHandler+0x292>
 8001998:	e005      	b.n	80019a6 <HAL_ADC_IRQHandler+0x27e>
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_ADC_IRQHandler+0x2c0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b09      	cmp	r3, #9
 80019a4:	d009      	beq.n	80019ba <HAL_ADC_IRQHandler+0x292>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ae:	d004      	beq.n	80019ba <HAL_ADC_IRQHandler+0x292>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_ADC_IRQHandler+0x2c4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d104      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	e018      	b.n	80019f6 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019cc:	d004      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x2b0>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a03      	ldr	r2, [pc, #12]	; (80019e0 <HAL_ADC_IRQHandler+0x2b8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d10b      	bne.n	80019f0 <HAL_ADC_IRQHandler+0x2c8>
 80019d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019dc:	e009      	b.n	80019f2 <HAL_ADC_IRQHandler+0x2ca>
 80019de:	bf00      	nop
 80019e0:	50000100 	.word	0x50000100
 80019e4:	50000300 	.word	0x50000300
 80019e8:	50000700 	.word	0x50000700
 80019ec:	50000400 	.word	0x50000400
 80019f0:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_ADC_IRQHandler+0x514>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f040 80b0 	bne.w	8001b66 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00d      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 80a3 	bne.w	8001b66 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 809d 	bne.w	8001b66 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8097 	beq.w	8001b66 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_IRQHandler+0x324>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7e      	ldr	r2, [pc, #504]	; (8001c40 <HAL_ADC_IRQHandler+0x518>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d106      	bne.n	8001a5a <HAL_ADC_IRQHandler+0x332>
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <HAL_ADC_IRQHandler+0x51c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d03e      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x3ae>
 8001a58:	e005      	b.n	8001a66 <HAL_ADC_IRQHandler+0x33e>
 8001a5a:	4b7b      	ldr	r3, [pc, #492]	; (8001c48 <HAL_ADC_IRQHandler+0x520>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d037      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x3ae>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_IRQHandler+0x352>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <HAL_ADC_IRQHandler+0x518>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d106      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x360>
 8001a7a:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <HAL_ADC_IRQHandler+0x51c>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d027      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x3ae>
 8001a86:	e005      	b.n	8001a94 <HAL_ADC_IRQHandler+0x36c>
 8001a88:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <HAL_ADC_IRQHandler+0x520>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b06      	cmp	r3, #6
 8001a92:	d020      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x3ae>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_IRQHandler+0x380>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a67      	ldr	r2, [pc, #412]	; (8001c40 <HAL_ADC_IRQHandler+0x518>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x38e>
 8001aa8:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_ADC_IRQHandler+0x51c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2b07      	cmp	r3, #7
 8001ab2:	d010      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x3ae>
 8001ab4:	e005      	b.n	8001ac2 <HAL_ADC_IRQHandler+0x39a>
 8001ab6:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <HAL_ADC_IRQHandler+0x520>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d009      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x3ae>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aca:	d004      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x3ae>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_ADC_IRQHandler+0x514>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d104      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e00f      	b.n	8001b00 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x3cc>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a54      	ldr	r2, [pc, #336]	; (8001c40 <HAL_ADC_IRQHandler+0x518>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d102      	bne.n	8001afa <HAL_ADC_IRQHandler+0x3d2>
 8001af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001af8:	e000      	b.n	8001afc <HAL_ADC_IRQHandler+0x3d4>
 8001afa:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_ADC_IRQHandler+0x514>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12d      	bne.n	8001b66 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d11a      	bne.n	8001b4e <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b26:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d112      	bne.n	8001b66 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4c:	e00b      	b.n	8001b66 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f043 0210 	orr.w	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8c4 	bl	8001cf4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2260      	movs	r2, #96	; 0x60
 8001b72:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d011      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x47a>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fbd3 	bl	8001340 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d012      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x4aa>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8aa 	bl	8001d1c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x4da>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00d      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f89c 	bl	8001d30 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c00:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d04f      	beq.n	8001cac <HAL_ADC_IRQHandler+0x584>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d04a      	beq.n	8001cac <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e02d      	b.n	8001c80 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2c:	d004      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x510>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <HAL_ADC_IRQHandler+0x518>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d109      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x524>
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_ADC_IRQHandler+0x51c>)
 8001c3a:	e008      	b.n	8001c4e <HAL_ADC_IRQHandler+0x526>
 8001c3c:	50000400 	.word	0x50000400
 8001c40:	50000100 	.word	0x50000100
 8001c44:	50000300 	.word	0x50000300
 8001c48:	50000700 	.word	0x50000700
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_ADC_IRQHandler+0x5c8>)
 8001c4e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10a      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e007      	b.n	8001c80 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10e      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f043 0202 	orr.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fb58 	bl	8001354 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d018      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x5c0>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	f043 0208 	orr.w	r2, r3, #8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f810 	bl	8001d08 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	50000700 	.word	0x50000700

08001cf4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b09b      	sub	sp, #108	; 0x6c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x22>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e2ca      	b.n	80022fc <HAL_ADC_ConfigChannel+0x5b8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 82ae 	bne.w	80022da <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d81c      	bhi.n	8001dc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	461a      	mov	r2, r3
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4019      	ands	r1, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dbe:	e063      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d81e      	bhi.n	8001e06 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4019      	ands	r1, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
 8001e04:	e040      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b0e      	cmp	r3, #14
 8001e0c:	d81e      	bhi.n	8001e4c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	3b3c      	subs	r3, #60	; 0x3c
 8001e22:	221f      	movs	r2, #31
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4019      	ands	r1, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	3b3c      	subs	r3, #60	; 0x3c
 8001e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4a:	e01d      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	3b5a      	subs	r3, #90	; 0x5a
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4019      	ands	r1, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	3b5a      	subs	r3, #90	; 0x5a
 8001e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 80e5 	bne.w	8002062 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	d91c      	bls.n	8001eda <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6999      	ldr	r1, [r3, #24]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4019      	ands	r1, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6898      	ldr	r0, [r3, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b1e      	subs	r3, #30
 8001ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	619a      	str	r2, [r3, #24]
 8001ed8:	e019      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6959      	ldr	r1, [r3, #20]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	2207      	movs	r2, #7
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4019      	ands	r1, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d84f      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x28c>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f6b 	.word	0x08001f6b
 8001f40:	08001f8d 	.word	0x08001f8d
 8001f44:	08001faf 	.word	0x08001faf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4e:	4b9a      	ldr	r3, [pc, #616]	; (80021b8 <HAL_ADC_ConfigChannel+0x474>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	0691      	lsls	r1, r2, #26
 8001f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f68:	e07e      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f70:	4b91      	ldr	r3, [pc, #580]	; (80021b8 <HAL_ADC_ConfigChannel+0x474>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	0691      	lsls	r1, r2, #26
 8001f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f88:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f8a:	e06d      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f92:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <HAL_ADC_ConfigChannel+0x474>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	0691      	lsls	r1, r2, #26
 8001f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001faa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fac:	e05c      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fb4:	4b80      	ldr	r3, [pc, #512]	; (80021b8 <HAL_ADC_ConfigChannel+0x474>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	0691      	lsls	r1, r2, #26
 8001fbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fcc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fce:	e04b      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	069b      	lsls	r3, r3, #26
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d107      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ff2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	069b      	lsls	r3, r3, #26
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002016:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800203a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	069b      	lsls	r3, r3, #26
 800204c:	429a      	cmp	r2, r3
 800204e:	d10a      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800205e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002060:	e001      	b.n	8002066 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002066:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d108      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x344>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x344>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_ADC_ConfigChannel+0x346>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8130 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d00f      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020b6:	e049      	b.n	800214c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b09      	cmp	r3, #9
 80020d8:	d91c      	bls.n	8002114 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6999      	ldr	r1, [r3, #24]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	3b1b      	subs	r3, #27
 80020ec:	2207      	movs	r2, #7
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4019      	ands	r1, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6898      	ldr	r0, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	3b1b      	subs	r3, #27
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	619a      	str	r2, [r3, #24]
 8002112:	e01b      	b.n	800214c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6959      	ldr	r1, [r3, #20]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	2207      	movs	r2, #7
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	4019      	ands	r1, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6898      	ldr	r0, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002154:	d004      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x41c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_ADC_ConfigChannel+0x478>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x420>
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_ADC_ConfigChannel+0x47c>)
 8002162:	e000      	b.n	8002166 <HAL_ADC_ConfigChannel+0x422>
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_ADC_ConfigChannel+0x480>)
 8002166:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b10      	cmp	r3, #16
 800216e:	d105      	bne.n	800217c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002180:	2b11      	cmp	r3, #17
 8002182:	d105      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002194:	2b12      	cmp	r3, #18
 8002196:	f040 80ab 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800219a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80a4 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b0:	d10a      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x484>
 80021b2:	4b02      	ldr	r3, [pc, #8]	; (80021bc <HAL_ADC_ConfigChannel+0x478>)
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e022      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4ba>
 80021b8:	83fff000 	.word	0x83fff000
 80021bc:	50000100 	.word	0x50000100
 80021c0:	50000300 	.word	0x50000300
 80021c4:	50000700 	.word	0x50000700
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a4e      	ldr	r2, [pc, #312]	; (8002308 <HAL_ADC_ConfigChannel+0x5c4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d103      	bne.n	80021da <HAL_ADC_ConfigChannel+0x496>
 80021d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e011      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4ba>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a4b      	ldr	r2, [pc, #300]	; (800230c <HAL_ADC_ConfigChannel+0x5c8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x4a6>
 80021e4:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_ADC_ConfigChannel+0x5cc>)
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e009      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4ba>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_ADC_ConfigChannel+0x5cc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d102      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x4b6>
 80021f4:	4b45      	ldr	r3, [pc, #276]	; (800230c <HAL_ADC_ConfigChannel+0x5c8>)
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e001      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4ba>
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_ADC_ConfigChannel+0x4da>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x4da>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_ADC_ConfigChannel+0x4dc>
 800221e:	2300      	movs	r3, #0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d150      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002224:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x502>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x502>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_ADC_ConfigChannel+0x504>
 8002246:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002248:	2b00      	cmp	r3, #0
 800224a:	d13c      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b10      	cmp	r3, #16
 8002252:	d11d      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x54c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800225c:	d118      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800225e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002268:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_ADC_ConfigChannel+0x5d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <HAL_ADC_ConfigChannel+0x5d4>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	0c9a      	lsrs	r2, r3, #18
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002280:	e002      	b.n	8002288 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800228e:	e02e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b11      	cmp	r3, #17
 8002296:	d10b      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x56c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a0:	d106      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022ae:	e01e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d11a      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c4:	e013      	b.n	80022ee <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022d8:	e00a      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022ee:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	376c      	adds	r7, #108	; 0x6c
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	50000100 	.word	0x50000100
 800230c:	50000400 	.word	0x50000400
 8002310:	50000500 	.word	0x50000500
 8002314:	2000000c 	.word	0x2000000c
 8002318:	431bde83 	.word	0x431bde83

0800231c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800231c:	b480      	push	{r7}
 800231e:	b099      	sub	sp, #100	; 0x64
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002334:	d102      	bne.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	e01a      	b.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d103      	bne.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	e011      	b.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a67      	ldr	r2, [pc, #412]	; (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002358:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	e009      	b.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a64      	ldr	r2, [pc, #400]	; (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d102      	bne.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002368:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	e001      	b.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b0      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002386:	2302      	movs	r3, #2
 8002388:	e0a9      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 808d 	bne.w	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 8086 	bne.w	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b8:	d004      	beq.n	80023c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023c4:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80023c6:	e000      	b.n	80023ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80023ca:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d040      	beq.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e6:	035b      	lsls	r3, r3, #13
 80023e8:	430b      	orrs	r3, r1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002410:	2300      	movs	r3, #0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d15c      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002432:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d14b      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002440:	f023 030f 	bic.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	6811      	ldr	r1, [r2, #0]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6892      	ldr	r2, [r2, #8]
 800244c:	430a      	orrs	r2, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002452:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002454:	e03c      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800245e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002460:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d123      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80024a4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d112      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024b2:	f023 030f 	bic.w	r3, r3, #15
 80024b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024b8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ba:	e009      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80024ce:	e000      	b.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024d0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80024de:	4618      	mov	r0, r3
 80024e0:	3764      	adds	r7, #100	; 0x64
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	50000100 	.word	0x50000100
 80024f0:	50000400 	.word	0x50000400
 80024f4:	50000500 	.word	0x50000500
 80024f8:	50000300 	.word	0x50000300
 80024fc:	50000700 	.word	0x50000700

08002500 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <ADC_Disable+0x2c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <ADC_Disable+0x2c>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <ADC_Disable+0x2e>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d047      	beq.n	80025c2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030d 	and.w	r3, r3, #13
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10f      	bne.n	8002560 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0202 	orr.w	r2, r2, #2
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2203      	movs	r2, #3
 8002556:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002558:	f7fe fedc 	bl	8001314 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800255e:	e029      	b.n	80025b4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f043 0210 	orr.w	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e023      	b.n	80025c4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800257c:	f7fe feca 	bl	8001314 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d914      	bls.n	80025b4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10d      	bne.n	80025b4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e007      	b.n	80025c4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d0dc      	beq.n	800257c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff29 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff3e 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff8e 	bl	80026c0 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5d 	bl	800266c <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff31 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2204      	movs	r2, #4
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e020      	b.n	8002854 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 020e 	bic.w	r2, r2, #14
 8002820:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002872:	2b02      	cmp	r3, #2
 8002874:	d005      	beq.n	8002882 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e027      	b.n	80028d2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 020e 	bic.w	r2, r2, #14
 8002890:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
    } 
  }
  return status;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80028dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_FLASH_Program+0xd8>)
 80028f8:	7e1b      	ldrb	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_FLASH_Program+0x26>
 80028fe:	2302      	movs	r3, #2
 8002900:	e054      	b.n	80029ac <HAL_FLASH_Program+0xd0>
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_FLASH_Program+0xd8>)
 8002904:	2201      	movs	r2, #1
 8002906:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002908:	f24c 3050 	movw	r0, #50000	; 0xc350
 800290c:	f000 f8a8 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002910:	4603      	mov	r3, r0
 8002912:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d144      	bne.n	80029a4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002920:	2301      	movs	r3, #1
 8002922:	757b      	strb	r3, [r7, #21]
 8002924:	e007      	b.n	8002936 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d102      	bne.n	8002932 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800292c:	2302      	movs	r3, #2
 800292e:	757b      	strb	r3, [r7, #21]
 8002930:	e001      	b.n	8002936 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002932:	2304      	movs	r3, #4
 8002934:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002936:	2300      	movs	r3, #0
 8002938:	75bb      	strb	r3, [r7, #22]
 800293a:	e02d      	b.n	8002998 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800293c:	7dbb      	ldrb	r3, [r7, #22]
 800293e:	005a      	lsls	r2, r3, #1
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	eb02 0c03 	add.w	ip, r2, r3
 8002946:	7dbb      	ldrb	r3, [r7, #22]
 8002948:	0119      	lsls	r1, r3, #4
 800294a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800294e:	f1c1 0620 	rsb	r6, r1, #32
 8002952:	f1a1 0020 	sub.w	r0, r1, #32
 8002956:	fa22 f401 	lsr.w	r4, r2, r1
 800295a:	fa03 f606 	lsl.w	r6, r3, r6
 800295e:	4334      	orrs	r4, r6
 8002960:	fa23 f000 	lsr.w	r0, r3, r0
 8002964:	4304      	orrs	r4, r0
 8002966:	fa23 f501 	lsr.w	r5, r3, r1
 800296a:	b2a3      	uxth	r3, r4
 800296c:	4619      	mov	r1, r3
 800296e:	4660      	mov	r0, ip
 8002970:	f000 f85a 	bl	8002a28 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002974:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002978:	f000 f872 	bl	8002a60 <FLASH_WaitForLastOperation>
 800297c:	4603      	mov	r3, r0
 800297e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_FLASH_Program+0xdc>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_FLASH_Program+0xdc>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002992:	7dbb      	ldrb	r3, [r7, #22]
 8002994:	3301      	adds	r3, #1
 8002996:	75bb      	strb	r3, [r7, #22]
 8002998:	7dba      	ldrb	r2, [r7, #22]
 800299a:	7d7b      	ldrb	r3, [r7, #21]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3cd      	bcc.n	800293c <HAL_FLASH_Program+0x60>
 80029a0:	e000      	b.n	80029a4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80029a2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_FLASH_Program+0xd8>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	761a      	strb	r2, [r3, #24]

  return status;
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b4:	200001e8 	.word	0x200001e8
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_FLASH_Unlock+0x40>)
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00d      	beq.n	80029ee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_FLASH_Unlock+0x40>)
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_FLASH_Unlock+0x44>)
 80029d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_FLASH_Unlock+0x40>)
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_FLASH_Unlock+0x48>)
 80029dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_FLASH_Unlock+0x40>)
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80029ee:	79fb      	ldrb	r3, [r7, #7]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40022000 	.word	0x40022000
 8002a00:	45670123 	.word	0x45670123
 8002a04:	cdef89ab 	.word	0xcdef89ab

08002a08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_FLASH_Lock+0x1c>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_FLASH_Lock+0x1c>)
 8002a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a16:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40022000 	.word	0x40022000

08002a28 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <FLASH_Program_HalfWord+0x30>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <FLASH_Program_HalfWord+0x34>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <FLASH_Program_HalfWord+0x34>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	887a      	ldrh	r2, [r7, #2]
 8002a4a:	801a      	strh	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	200001e8 	.word	0x200001e8
 8002a5c:	40022000 	.word	0x40022000

08002a60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002a68:	f7fe fc54 	bl	8001314 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a6e:	e010      	b.n	8002a92 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d00c      	beq.n	8002a92 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <FLASH_WaitForLastOperation+0x2e>
 8002a7e:	f7fe fc49 	bl	8001314 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d201      	bcs.n	8002a92 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e01f      	b.n	8002ad2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d0e8      	beq.n	8002a70 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d102      	bne.n	8002ab0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002aac:	2220      	movs	r2, #32
 8002aae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d005      	beq.n	8002ac8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d103      	bne.n	8002ad0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ac8:	f000 f80a 	bl	8002ae0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000

08002ae0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <FLASH_SetErrorCode+0x5c>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d109      	bne.n	8002b0a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <FLASH_SetErrorCode+0x60>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <FLASH_SetErrorCode+0x60>)
 8002b00:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f043 0310 	orr.w	r3, r3, #16
 8002b08:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <FLASH_SetErrorCode+0x5c>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d109      	bne.n	8002b2a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <FLASH_SetErrorCode+0x60>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <FLASH_SetErrorCode+0x60>)
 8002b20:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <FLASH_SetErrorCode+0x5c>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60d3      	str	r3, [r2, #12]
}  
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	200001e8 	.word	0x200001e8

08002b44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_FLASHEx_Erase+0xcc>)
 8002b58:	7e1b      	ldrb	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_FLASHEx_Erase+0x1e>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e052      	b.n	8002c08 <HAL_FLASHEx_Erase+0xc4>
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_FLASHEx_Erase+0xcc>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d115      	bne.n	8002b9c <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b74:	f7ff ff74 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d140      	bne.n	8002c00 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002b7e:	f000 f84b 	bl	8002c18 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b82:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b86:	f7ff ff6b 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_FLASHEx_Erase+0xd0>)
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <HAL_FLASHEx_Erase+0xd0>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6113      	str	r3, [r2, #16]
 8002b9a:	e031      	b.n	8002c00 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ba0:	f7ff ff5e 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d12a      	bne.n	8002c00 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	e019      	b.n	8002bee <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002bba:	68b8      	ldr	r0, [r7, #8]
 8002bbc:	f000 f846 	bl	8002c4c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bc4:	f7ff ff4c 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_FLASHEx_Erase+0xd0>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <HAL_FLASHEx_Erase+0xd0>)
 8002bd2:	f023 0302 	bic.w	r3, r3, #2
 8002bd6:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	601a      	str	r2, [r3, #0]
            break;
 8002be4:	e00c      	b.n	8002c00 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bec:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	02da      	lsls	r2, r3, #11
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d3dc      	bcc.n	8002bba <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_FLASHEx_Erase+0xcc>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	761a      	strb	r2, [r3, #24]

  return status;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200001e8 	.word	0x200001e8
 8002c14:	40022000 	.word	0x40022000

08002c18 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <FLASH_MassErase+0x2c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <FLASH_MassErase+0x30>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <FLASH_MassErase+0x30>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <FLASH_MassErase+0x30>)
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <FLASH_MassErase+0x30>)
 8002c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c38:	6113      	str	r3, [r2, #16]
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	200001e8 	.word	0x200001e8
 8002c48:	40022000 	.word	0x40022000

08002c4c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <FLASH_PageErase+0x38>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <FLASH_PageErase+0x3c>)
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <FLASH_PageErase+0x3c>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <FLASH_PageErase+0x3c>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <FLASH_PageErase+0x3c>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <FLASH_PageErase+0x3c>)
 8002c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c76:	6113      	str	r3, [r2, #16]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	200001e8 	.word	0x200001e8
 8002c88:	40022000 	.word	0x40022000

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9a:	e154      	b.n	8002f46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8146 	beq.w	8002f40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d005      	beq.n	8002ccc <HAL_GPIO_Init+0x40>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d130      	bne.n	8002d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d02:	2201      	movs	r2, #1
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 0201 	and.w	r2, r3, #1
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d017      	beq.n	8002d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d123      	bne.n	8002dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	08da      	lsrs	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3208      	adds	r2, #8
 8002db8:	6939      	ldr	r1, [r7, #16]
 8002dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0203 	and.w	r2, r3, #3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a0 	beq.w	8002f40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_GPIO_Init+0x2d8>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <HAL_GPIO_Init+0x2d8>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6193      	str	r3, [r2, #24]
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <HAL_GPIO_Init+0x2d8>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e18:	4a53      	ldr	r2, [pc, #332]	; (8002f68 <HAL_GPIO_Init+0x2dc>)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e42:	d019      	beq.n	8002e78 <HAL_GPIO_Init+0x1ec>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_GPIO_Init+0x2e0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <HAL_GPIO_Init+0x1e8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a48      	ldr	r2, [pc, #288]	; (8002f70 <HAL_GPIO_Init+0x2e4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00d      	beq.n	8002e70 <HAL_GPIO_Init+0x1e4>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_GPIO_Init+0x2e8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <HAL_GPIO_Init+0x1e0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_GPIO_Init+0x2ec>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_GPIO_Init+0x1dc>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e008      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e68:	2305      	movs	r3, #5
 8002e6a:	e006      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e004      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e002      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_GPIO_Init+0x1ee>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	f002 0203 	and.w	r2, r2, #3
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	4093      	lsls	r3, r2
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e8a:	4937      	ldr	r1, [pc, #220]	; (8002f68 <HAL_GPIO_Init+0x2dc>)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e98:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ee6:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f10:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f aea3 	bne.w	8002c9c <HAL_GPIO_Init+0x10>
  }
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	48000800 	.word	0x48000800
 8002f74:	48000c00 	.word	0x48000c00
 8002f78:	48001000 	.word	0x48001000
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f90:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f001 b823 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 817d 	beq.w	80032b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fbc:	4bbc      	ldr	r3, [pc, #752]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc8:	4bb9      	ldr	r3, [pc, #740]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d15c      	bne.n	800308e <HAL_RCC_OscConfig+0x10e>
 8002fd4:	4bb6      	ldr	r3, [pc, #728]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d155      	bne.n	800308e <HAL_RCC_OscConfig+0x10e>
 8002fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_RCC_OscConfig+0x94>
 800300e:	4ba8      	ldr	r3, [pc, #672]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	e015      	b.n	8003040 <HAL_RCC_OscConfig+0xc0>
 8003014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003018:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800302c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003030:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800303c:	4b9c      	ldr	r3, [pc, #624]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003044:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003048:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800304c:	fa92 f2a2 	rbit	r2, r2
 8003050:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003054:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003058:	fab2 f282 	clz	r2, r2
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	f042 0220 	orr.w	r2, r2, #32
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f002 021f 	and.w	r2, r2, #31
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f202 	lsl.w	r2, r1, r2
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 811f 	beq.w	80032b4 <HAL_RCC_OscConfig+0x334>
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 8116 	bne.w	80032b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f000 bfaf 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x12e>
 80030a0:	4b83      	ldr	r3, [pc, #524]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a82      	ldr	r2, [pc, #520]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e036      	b.n	800311c <HAL_RCC_OscConfig+0x19c>
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x158>
 80030be:	4b7c      	ldr	r3, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7b      	ldr	r2, [pc, #492]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b79      	ldr	r3, [pc, #484]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a78      	ldr	r2, [pc, #480]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e021      	b.n	800311c <HAL_RCC_OscConfig+0x19c>
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x184>
 80030ea:	4b71      	ldr	r3, [pc, #452]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a70      	ldr	r2, [pc, #448]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b6e      	ldr	r3, [pc, #440]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6d      	ldr	r2, [pc, #436]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0x19c>
 8003104:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a69      	ldr	r2, [pc, #420]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b67      	ldr	r3, [pc, #412]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a66      	ldr	r2, [pc, #408]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800311c:	4b64      	ldr	r3, [pc, #400]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f023 020f 	bic.w	r2, r3, #15
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	495f      	ldr	r1, [pc, #380]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003132:	4313      	orrs	r3, r2
 8003134:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d059      	beq.n	80031fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe f8e5 	bl	8001314 <HAL_GetTick>
 800314a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe f8e0 	bl	8001314 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b64      	cmp	r3, #100	; 0x64
 800315e:	d902      	bls.n	8003166 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	f000 bf43 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
 8003166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800316a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800317a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_RCC_OscConfig+0x218>
 8003192:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e015      	b.n	80031c4 <HAL_RCC_OscConfig+0x244>
 8003198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800319c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80031ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80031b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80031c0:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80031cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031d0:	fa92 f2a2 	rbit	r2, r2
 80031d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80031d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f042 0220 	orr.w	r2, r2, #32
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f002 021f 	and.w	r2, r2, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ab      	beq.n	8003150 <HAL_RCC_OscConfig+0x1d0>
 80031f8:	e05d      	b.n	80032b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe f88b 	bl	8001314 <HAL_GetTick>
 80031fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe f886 	bl	8001314 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d902      	bls.n	800321a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	f000 bee9 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
 800321a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800322e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_RCC_OscConfig+0x2cc>
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	e015      	b.n	8003278 <HAL_RCC_OscConfig+0x2f8>
 800324c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003250:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003264:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003268:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_RCC_OscConfig+0x330>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800327c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003280:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003284:	fa92 f2a2 	rbit	r2, r2
 8003288:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800328c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f002 021f 	and.w	r2, r2, #31
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ab      	bne.n	8003204 <HAL_RCC_OscConfig+0x284>
 80032ac:	e003      	b.n	80032b6 <HAL_RCC_OscConfig+0x336>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 817d 	beq.w	80035c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032cc:	4ba6      	ldr	r3, [pc, #664]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032d8:	4ba3      	ldr	r3, [pc, #652]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d172      	bne.n	80033ca <HAL_RCC_OscConfig+0x44a>
 80032e4:	4ba0      	ldr	r3, [pc, #640]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d16c      	bne.n	80033ca <HAL_RCC_OscConfig+0x44a>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003302:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_RCC_OscConfig+0x3a0>
 800331a:	4b93      	ldr	r3, [pc, #588]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e013      	b.n	8003348 <HAL_RCC_OscConfig+0x3c8>
 8003320:	2302      	movs	r3, #2
 8003322:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003332:	2302      	movs	r3, #2
 8003334:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003338:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003344:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2202      	movs	r2, #2
 800334a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800334e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003352:	fa92 f2a2 	rbit	r2, r2
 8003356:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800335a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800335e:	fab2 f282 	clz	r2, r2
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	f002 021f 	and.w	r2, r2, #31
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCC_OscConfig+0x410>
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d002      	beq.n	8003390 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f000 be2e 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b75      	ldr	r3, [pc, #468]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	21f8      	movs	r1, #248	; 0xf8
 80033a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033ae:	fa91 f1a1 	rbit	r1, r1
 80033b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80033b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80033ba:	fab1 f181 	clz	r1, r1
 80033be:	b2c9      	uxtb	r1, r1
 80033c0:	408b      	lsls	r3, r1
 80033c2:	4969      	ldr	r1, [pc, #420]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c8:	e0fd      	b.n	80035c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8088 	beq.w	80034ec <HAL_RCC_OscConfig+0x56c>
 80033dc:	2301      	movs	r3, #1
 80033de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	461a      	mov	r2, r3
 8003404:	2301      	movs	r3, #1
 8003406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fd ff84 	bl	8001314 <HAL_GetTick>
 800340c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003412:	f7fd ff7f 	bl	8001314 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d902      	bls.n	8003428 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	f000 bde2 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
 8003428:	2302      	movs	r3, #2
 800342a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800343a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0x4d8>
 8003452:	4b45      	ldr	r3, [pc, #276]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0x500>
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003470:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2202      	movs	r2, #2
 8003482:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003486:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003492:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003496:	fab2 f282 	clz	r2, r2
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f042 0220 	orr.w	r2, r2, #32
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	f002 021f 	and.w	r2, r2, #31
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0af      	beq.n	8003412 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	21f8      	movs	r1, #248	; 0xf8
 80034c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80034d0:	fa91 f1a1 	rbit	r1, r1
 80034d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80034d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80034dc:	fab1 f181 	clz	r1, r1
 80034e0:	b2c9      	uxtb	r1, r1
 80034e2:	408b      	lsls	r3, r1
 80034e4:	4920      	ldr	r1, [pc, #128]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	e06c      	b.n	80035c6 <HAL_RCC_OscConfig+0x646>
 80034ec:	2301      	movs	r3, #1
 80034ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800350c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	2300      	movs	r3, #0
 8003516:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd fefc 	bl	8001314 <HAL_GetTick>
 800351c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003522:	f7fd fef7 	bl	8001314 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d902      	bls.n	8003538 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	f000 bd5a 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
 8003538:	2302      	movs	r3, #2
 800353a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800354a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d104      	bne.n	800356c <HAL_RCC_OscConfig+0x5ec>
 8003562:	4b01      	ldr	r3, [pc, #4]	; (8003568 <HAL_RCC_OscConfig+0x5e8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	e015      	b.n	8003594 <HAL_RCC_OscConfig+0x614>
 8003568:	40021000 	.word	0x40021000
 800356c:	2302      	movs	r3, #2
 800356e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800357e:	2302      	movs	r3, #2
 8003580:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003584:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003590:	4bc8      	ldr	r3, [pc, #800]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	2202      	movs	r2, #2
 8003596:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800359a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800359e:	fa92 f2a2 	rbit	r2, r2
 80035a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80035a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80035aa:	fab2 f282 	clz	r2, r2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f042 0220 	orr.w	r2, r2, #32
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f002 021f 	and.w	r2, r2, #31
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f202 	lsl.w	r2, r1, r2
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1ad      	bne.n	8003522 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8110 	beq.w	80037fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d079      	beq.n	80036e0 <HAL_RCC_OscConfig+0x760>
 80035ec:	2301      	movs	r3, #1
 80035ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	4bab      	ldr	r3, [pc, #684]	; (80038b8 <HAL_RCC_OscConfig+0x938>)
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	461a      	mov	r2, r3
 8003612:	2301      	movs	r3, #1
 8003614:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fd fe7d 	bl	8001314 <HAL_GetTick>
 800361a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003620:	f7fd fe78 	bl	8001314 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d902      	bls.n	8003636 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	f000 bcdb 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
 8003636:	2302      	movs	r3, #2
 8003638:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003650:	2202      	movs	r2, #2
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003674:	2202      	movs	r2, #2
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fa93 f2a3 	rbit	r2, r3
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800368e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 8003692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800369c:	2102      	movs	r1, #2
 800369e:	6019      	str	r1, [r3, #0]
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	fa93 f1a3 	rbit	r1, r3
 80036ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036b6:	6019      	str	r1, [r3, #0]
  return result;
 80036b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0a0      	beq.n	8003620 <HAL_RCC_OscConfig+0x6a0>
 80036de:	e08d      	b.n	80037fc <HAL_RCC_OscConfig+0x87c>
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	fa93 f2a3 	rbit	r2, r3
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003702:	601a      	str	r2, [r3, #0]
  return result;
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800370c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <HAL_RCC_OscConfig+0x938>)
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003722:	f7fd fdf7 	bl	8001314 <HAL_GetTick>
 8003726:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372c:	f7fd fdf2 	bl	8001314 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d902      	bls.n	8003742 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	f000 bc55 	b.w	8003fec <HAL_RCC_OscConfig+0x106c>
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800374a:	2202      	movs	r2, #2
 800374c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fa93 f2a3 	rbit	r2, r3
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800376e:	2202      	movs	r2, #2
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	fa93 f2a3 	rbit	r2, r3
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003792:	2202      	movs	r2, #2
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 80037b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037ba:	2102      	movs	r1, #2
 80037bc:	6019      	str	r1, [r3, #0]
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	fa93 f1a3 	rbit	r1, r3
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037d4:	6019      	str	r1, [r3, #0]
  return result;
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	2101      	movs	r1, #1
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d197      	bne.n	800372c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 81a1 	beq.w	8003b54 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 800382a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382e:	61d3      	str	r3, [r2, #28]
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800384a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <HAL_RCC_OscConfig+0x93c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11a      	bne.n	8003894 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_RCC_OscConfig+0x93c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <HAL_RCC_OscConfig+0x93c>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fd fd53 	bl	8001314 <HAL_GetTick>
 800386e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	e009      	b.n	8003888 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003874:	f7fd fd4e 	bl	8001314 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b64      	cmp	r3, #100	; 0x64
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e3b1      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_RCC_OscConfig+0x93c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ef      	beq.n	8003874 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCC_OscConfig+0x940>
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4a02      	ldr	r2, [pc, #8]	; (80038b4 <HAL_RCC_OscConfig+0x934>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6213      	str	r3, [r2, #32]
 80038b0:	e03c      	b.n	800392c <HAL_RCC_OscConfig+0x9ac>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	10908120 	.word	0x10908120
 80038bc:	40007000 	.word	0x40007000
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10c      	bne.n	80038ea <HAL_RCC_OscConfig+0x96a>
 80038d0:	4bc1      	ldr	r3, [pc, #772]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4ac0      	ldr	r2, [pc, #768]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	4bbe      	ldr	r3, [pc, #760]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4abd      	ldr	r2, [pc, #756]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	6213      	str	r3, [r2, #32]
 80038e8:	e020      	b.n	800392c <HAL_RCC_OscConfig+0x9ac>
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d10c      	bne.n	8003914 <HAL_RCC_OscConfig+0x994>
 80038fa:	4bb7      	ldr	r3, [pc, #732]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4ab6      	ldr	r2, [pc, #728]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	4bb4      	ldr	r3, [pc, #720]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4ab3      	ldr	r2, [pc, #716]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6213      	str	r3, [r2, #32]
 8003912:	e00b      	b.n	800392c <HAL_RCC_OscConfig+0x9ac>
 8003914:	4bb0      	ldr	r3, [pc, #704]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4aaf      	ldr	r2, [pc, #700]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6213      	str	r3, [r2, #32]
 8003920:	4bad      	ldr	r3, [pc, #692]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4aac      	ldr	r2, [pc, #688]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003926:	f023 0304 	bic.w	r3, r3, #4
 800392a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8081 	beq.w	8003a40 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fd fce9 	bl	8001314 <HAL_GetTick>
 8003942:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7fd fce4 	bl	8001314 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e345      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003968:	2202      	movs	r2, #2
 800396a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003988:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800398c:	2202      	movs	r2, #2
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	fa93 f2a3 	rbit	r2, r3
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039a6:	601a      	str	r2, [r3, #0]
  return result;
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d102      	bne.n	80039cc <HAL_RCC_OscConfig+0xa4c>
 80039c6:	4b84      	ldr	r3, [pc, #528]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	e013      	b.n	80039f4 <HAL_RCC_OscConfig+0xa74>
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039d4:	2202      	movs	r2, #2
 80039d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	fa93 f2a3 	rbit	r2, r3
 80039e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	4b79      	ldr	r3, [pc, #484]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80039fc:	2102      	movs	r1, #2
 80039fe:	6011      	str	r1, [r2, #0]
 8003a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	fa92 f1a2 	rbit	r1, r2
 8003a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a16:	6011      	str	r1, [r2, #0]
  return result;
 8003a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	fab2 f282 	clz	r2, r2
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	f002 021f 	and.w	r2, r2, #31
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f202 	lsl.w	r2, r1, r2
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d084      	beq.n	8003948 <HAL_RCC_OscConfig+0x9c8>
 8003a3e:	e07f      	b.n	8003b40 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a40:	f7fd fc68 	bl	8001314 <HAL_GetTick>
 8003a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a48:	e00b      	b.n	8003a62 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd fc63 	bl	8001314 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e2c4      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
 8003a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	fa93 f2a3 	rbit	r2, r3
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a8e:	2202      	movs	r2, #2
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	fa93 f2a3 	rbit	r2, r3
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003aa8:	601a      	str	r2, [r3, #0]
  return result;
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ab2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_OscConfig+0xb4e>
 8003ac8:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	e013      	b.n	8003af6 <HAL_RCC_OscConfig+0xb76>
 8003ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ade:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	fa93 f2a3 	rbit	r2, r3
 8003ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003afa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003afe:	2102      	movs	r1, #2
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	fa92 f1a2 	rbit	r1, r2
 8003b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b18:	6011      	str	r1, [r2, #0]
  return result;
 8003b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b1e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	f002 021f 	and.w	r2, r2, #31
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d184      	bne.n	8003a4a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b40:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8242 	beq.w	8003fea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b66:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <HAL_RCC_OscConfig+0xc58>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	f000 8213 	beq.w	8003f9a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	f040 8162 	bne.w	8003e4a <HAL_RCC_OscConfig+0xeca>
 8003b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	fa93 f2a3 	rbit	r2, r3
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003baa:	601a      	str	r2, [r3, #0]
  return result;
 8003bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bb4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2300      	movs	r3, #0
 8003bca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd fba2 	bl	8001314 <HAL_GetTick>
 8003bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCC_OscConfig+0xc70>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fd fb9a 	bl	8001314 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1fd      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c14:	601a      	str	r2, [r3, #0]
  return result;
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_OscConfig+0xcba>
 8003c34:	4bb0      	ldr	r3, [pc, #704]	; (8003ef8 <HAL_RCC_OscConfig+0xf78>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	e027      	b.n	8003c8a <HAL_RCC_OscConfig+0xd0a>
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	4b9c      	ldr	r3, [pc, #624]	; (8003ef8 <HAL_RCC_OscConfig+0xf78>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c8e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c96:	6011      	str	r1, [r2, #0]
 8003c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c9c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	fa92 f1a2 	rbit	r1, r2
 8003ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003caa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cae:	6011      	str	r1, [r2, #0]
  return result;
 8003cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cb4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	fab2 f282 	clz	r2, r2
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	f002 021f 	and.w	r2, r2, #31
 8003cca:	2101      	movs	r1, #1
 8003ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d182      	bne.n	8003bdc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd6:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0xf78>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	497f      	ldr	r1, [pc, #508]	; (8003ef8 <HAL_RCC_OscConfig+0xf78>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
 8003cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d02:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d10:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	fa93 f2a3 	rbit	r2, r3
 8003d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d22:	601a      	str	r2, [r3, #0]
  return result;
 8003d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2301      	movs	r3, #1
 8003d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd fae6 	bl	8001314 <HAL_GetTick>
 8003d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d4c:	e009      	b.n	8003d62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fd fae1 	bl	8001314 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e144      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
 8003d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	fa93 f2a3 	rbit	r2, r3
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d86:	601a      	str	r2, [r3, #0]
  return result;
 8003d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d102      	bne.n	8003dac <HAL_RCC_OscConfig+0xe2c>
 8003da6:	4b54      	ldr	r3, [pc, #336]	; (8003ef8 <HAL_RCC_OscConfig+0xf78>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	e027      	b.n	8003dfc <HAL_RCC_OscConfig+0xe7c>
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	fa93 f2a3 	rbit	r2, r3
 8003dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dcc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	fa93 f2a3 	rbit	r2, r3
 8003dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCC_OscConfig+0xf78>)
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e00:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e08:	6011      	str	r1, [r2, #0]
 8003e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e0e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	fa92 f1a2 	rbit	r1, r2
 8003e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e20:	6011      	str	r1, [r2, #0]
  return result;
 8003e22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	fab2 f282 	clz	r2, r2
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f042 0220 	orr.w	r2, r2, #32
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	f002 021f 	and.w	r2, r2, #31
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d082      	beq.n	8003d4e <HAL_RCC_OscConfig+0xdce>
 8003e48:	e0cf      	b.n	8003fea <HAL_RCC_OscConfig+0x106a>
 8003e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	fa93 f2a3 	rbit	r2, r3
 8003e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e6e:	601a      	str	r2, [r3, #0]
  return result;
 8003e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd fa40 	bl	8001314 <HAL_GetTick>
 8003e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e98:	e009      	b.n	8003eae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fd fa3b 	bl	8001314 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e09e      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	fa93 f2a3 	rbit	r2, r3
 8003eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ece:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ed2:	601a      	str	r2, [r3, #0]
  return result;
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003edc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ede:	fab3 f383 	clz	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d104      	bne.n	8003efc <HAL_RCC_OscConfig+0xf7c>
 8003ef2:	4b01      	ldr	r3, [pc, #4]	; (8003ef8 <HAL_RCC_OscConfig+0xf78>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	e029      	b.n	8003f4c <HAL_RCC_OscConfig+0xfcc>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f00:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	fa93 f2a3 	rbit	r2, r3
 8003f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f34:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_OscConfig+0x1078>)
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f50:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f58:	6011      	str	r1, [r2, #0]
 8003f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f5e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	fa92 f1a2 	rbit	r1, r2
 8003f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f6c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f70:	6011      	str	r1, [r2, #0]
  return result;
 8003f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f76:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f002 021f 	and.w	r2, r2, #31
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d180      	bne.n	8003e9a <HAL_RCC_OscConfig+0xf1a>
 8003f98:	e027      	b.n	8003fea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e01e      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_RCC_OscConfig+0x1078>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b09e      	sub	sp, #120	; 0x78
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e162      	b.n	80042da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b90      	ldr	r3, [pc, #576]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d910      	bls.n	8004044 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b8d      	ldr	r3, [pc, #564]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 0207 	bic.w	r2, r3, #7
 800402a:	498b      	ldr	r1, [pc, #556]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b89      	ldr	r3, [pc, #548]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e14a      	b.n	80042da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004050:	4b82      	ldr	r3, [pc, #520]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	497f      	ldr	r1, [pc, #508]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80dc 	beq.w	8004228 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d13c      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xf6>
 8004078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800407c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004088:	fab3 f383 	clz	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d102      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xa6>
 800409c:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	e00f      	b.n	80040c2 <HAL_RCC_ClockConfig+0xc6>
 80040a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	667b      	str	r3, [r7, #100]	; 0x64
 80040b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040b4:	663b      	str	r3, [r7, #96]	; 0x60
 80040b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040be:	4b67      	ldr	r3, [pc, #412]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80040c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ca:	fa92 f2a2 	rbit	r2, r2
 80040ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040d2:	fab2 f282 	clz	r2, r2
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f042 0220 	orr.w	r2, r2, #32
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f002 021f 	and.w	r2, r2, #31
 80040e2:	2101      	movs	r1, #1
 80040e4:	fa01 f202 	lsl.w	r2, r1, r2
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d17b      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0f3      	b.n	80042da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d13c      	bne.n	8004174 <HAL_RCC_ClockConfig+0x178>
 80040fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d102      	bne.n	8004124 <HAL_RCC_ClockConfig+0x128>
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	e00f      	b.n	8004144 <HAL_RCC_ClockConfig+0x148>
 8004124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004128:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
 8004132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
 8004138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004140:	4b46      	ldr	r3, [pc, #280]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004148:	63ba      	str	r2, [r7, #56]	; 0x38
 800414a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800414c:	fa92 f2a2 	rbit	r2, r2
 8004150:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004154:	fab2 f282 	clz	r2, r2
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	f042 0220 	orr.w	r2, r2, #32
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	f002 021f 	and.w	r2, r2, #31
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d13a      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0b2      	b.n	80042da <HAL_RCC_ClockConfig+0x2de>
 8004174:	2302      	movs	r3, #2
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d102      	bne.n	800419c <HAL_RCC_ClockConfig+0x1a0>
 8004196:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	e00d      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1bc>
 800419c:	2302      	movs	r3, #2
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	2302      	movs	r3, #2
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2202      	movs	r2, #2
 80041ba:	61ba      	str	r2, [r7, #24]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	fa92 f2a2 	rbit	r2, r2
 80041c2:	617a      	str	r2, [r7, #20]
  return result;
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	fab2 f282 	clz	r2, r2
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	f042 0220 	orr.w	r2, r2, #32
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f002 021f 	and.w	r2, r2, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f202 	lsl.w	r2, r1, r2
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e079      	b.n	80042da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	491a      	ldr	r1, [pc, #104]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f8:	f7fd f88c 	bl	8001314 <HAL_GetTick>
 80041fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7fd f888 	bl	8001314 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e061      	b.n	80042da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_RCC_ClockConfig+0x260>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d214      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f023 0207 	bic.w	r2, r3, #7
 800423e:	4906      	ldr	r1, [pc, #24]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_RCC_ClockConfig+0x25c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e040      	b.n	80042da <HAL_RCC_ClockConfig+0x2de>
 8004258:	40022000 	.word	0x40022000
 800425c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_RCC_ClockConfig+0x2e8>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	491a      	ldr	r1, [pc, #104]	; (80042e4 <HAL_RCC_ClockConfig+0x2e8>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_RCC_ClockConfig+0x2e8>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4912      	ldr	r1, [pc, #72]	; (80042e4 <HAL_RCC_ClockConfig+0x2e8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800429e:	f000 f829 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4601      	mov	r1, r0
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_RCC_ClockConfig+0x2e8>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ac:	22f0      	movs	r2, #240	; 0xf0
 80042ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	fa92 f2a2 	rbit	r2, r2
 80042b6:	60fa      	str	r2, [r7, #12]
  return result;
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	fab2 f282 	clz	r2, r2
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	40d3      	lsrs	r3, r2
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x2ec>)
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
 80042c6:	fa21 f303 	lsr.w	r3, r1, r3
 80042ca:	4a08      	ldr	r2, [pc, #32]	; (80042ec <HAL_RCC_ClockConfig+0x2f0>)
 80042cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <HAL_RCC_ClockConfig+0x2f4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc ffda 	bl	800128c <HAL_InitTick>
  
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3778      	adds	r7, #120	; 0x78
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08006c14 	.word	0x08006c14
 80042ec:	2000000c 	.word	0x2000000c
 80042f0:	20000010 	.word	0x20000010

080042f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b08b      	sub	sp, #44	; 0x2c
 80042f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	2300      	movs	r3, #0
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800430e:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b04      	cmp	r3, #4
 800431c:	d002      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x30>
 800431e:	2b08      	cmp	r3, #8
 8004320:	d003      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x36>
 8004322:	e03c      	b.n	800439e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004326:	623b      	str	r3, [r7, #32]
      break;
 8004328:	e03c      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004330:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004334:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	fa92 f2a2 	rbit	r2, r2
 800433c:	607a      	str	r2, [r7, #4]
  return result;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	fab2 f282 	clz	r2, r2
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	40d3      	lsrs	r3, r2
 8004348:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800434e:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	220f      	movs	r2, #15
 8004358:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	fa92 f2a2 	rbit	r2, r2
 8004360:	60fa      	str	r2, [r7, #12]
  return result;
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	fab2 f282 	clz	r2, r2
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	40d3      	lsrs	r3, r2
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800436e:	5cd3      	ldrb	r3, [r2, r3]
 8004370:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800437c:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	fbb2 f2f3 	udiv	r2, r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	e004      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	623b      	str	r3, [r7, #32]
      break;
 800439c:	e002      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043a0:	623b      	str	r3, [r7, #32]
      break;
 80043a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a4:	6a3b      	ldr	r3, [r7, #32]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	372c      	adds	r7, #44	; 0x2c
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	007a1200 	.word	0x007a1200
 80043bc:	08006c2c 	.word	0x08006c2c
 80043c0:	08006c3c 	.word	0x08006c3c
 80043c4:	003d0900 	.word	0x003d0900

080043c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043e6:	f7ff ffef 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043ea:	4601      	mov	r1, r0
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	fa92 f2a2 	rbit	r2, r2
 8004400:	603a      	str	r2, [r7, #0]
  return result;
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	fab2 f282 	clz	r2, r2
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	40d3      	lsrs	r3, r2
 800440c:	4a04      	ldr	r2, [pc, #16]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x40>)
 800440e:	5cd3      	ldrb	r3, [r2, r3]
 8004410:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	08006c24 	.word	0x08006c24

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800442a:	f7ff ffcd 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 800442e:	4601      	mov	r1, r0
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004438:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800443c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	fa92 f2a2 	rbit	r2, r2
 8004444:	603a      	str	r2, [r7, #0]
  return result;
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	fab2 f282 	clz	r2, r2
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	40d3      	lsrs	r3, r2
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004452:	5cd3      	ldrb	r3, [r2, r3]
 8004454:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	08006c24 	.word	0x08006c24

08004468 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b092      	sub	sp, #72	; 0x48
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80d4 	beq.w	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448c:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10e      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	61d3      	str	r3, [r2, #28]
 80044a4:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b45      	ldr	r3, [pc, #276]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d118      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c2:	4b42      	ldr	r3, [pc, #264]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a41      	ldr	r2, [pc, #260]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ce:	f7fc ff21 	bl	8001314 <HAL_GetTick>
 80044d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	e008      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d6:	f7fc ff1d 	bl	8001314 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	d901      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e169      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	4b38      	ldr	r3, [pc, #224]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044f4:	4b34      	ldr	r3, [pc, #208]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8084 	beq.w	800460e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004510:	429a      	cmp	r2, r3
 8004512:	d07c      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004514:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	461a      	mov	r2, r3
 800453e:	2301      	movs	r3, #1
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	fa93 f3a3 	rbit	r3, r3
 800454e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	461a      	mov	r2, r3
 8004562:	2300      	movs	r3, #0
 8004564:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d04b      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fc fecd 	bl	8001314 <HAL_GetTick>
 800457a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fc fec9 	bl	8001314 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e113      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004594:	2302      	movs	r3, #2
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	2302      	movs	r3, #2
 80045a2:	623b      	str	r3, [r7, #32]
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	61fb      	str	r3, [r7, #28]
  return result;
 80045ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d108      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045c2:	4b01      	ldr	r3, [pc, #4]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	e00d      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40007000 	.word	0x40007000
 80045d0:	10908100 	.word	0x10908100
 80045d4:	2302      	movs	r3, #2
 80045d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fa93 f3a3 	rbit	r3, r3
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	4b78      	ldr	r3, [pc, #480]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2202      	movs	r2, #2
 80045e6:	613a      	str	r2, [r7, #16]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	fa92 f2a2 	rbit	r2, r2
 80045ee:	60fa      	str	r2, [r7, #12]
  return result;
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	fab2 f282 	clz	r2, r2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f002 021f 	and.w	r2, r2, #31
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0b7      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800460e:	4b6d      	ldr	r3, [pc, #436]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	496a      	ldr	r1, [pc, #424]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461c:	4313      	orrs	r3, r2
 800461e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004620:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004628:	4b66      	ldr	r3, [pc, #408]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004632:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004640:	4b60      	ldr	r3, [pc, #384]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	f023 0203 	bic.w	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	495d      	ldr	r1, [pc, #372]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465e:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4956      	ldr	r1, [pc, #344]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467c:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	494e      	ldr	r1, [pc, #312]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800469a:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f023 0210 	bic.w	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	4947      	ldr	r1, [pc, #284]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	493f      	ldr	r1, [pc, #252]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f023 0220 	bic.w	r2, r3, #32
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4938      	ldr	r1, [pc, #224]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046f4:	4b33      	ldr	r3, [pc, #204]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4930      	ldr	r1, [pc, #192]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004712:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	4929      	ldr	r1, [pc, #164]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004730:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	4921      	ldr	r1, [pc, #132]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473e:	4313      	orrs	r3, r2
 8004740:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	491a      	ldr	r1, [pc, #104]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800476c:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	4912      	ldr	r1, [pc, #72]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800478a:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	490b      	ldr	r1, [pc, #44]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004798:	4313      	orrs	r3, r2
 800479a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	4903      	ldr	r1, [pc, #12]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3748      	adds	r7, #72	; 0x48
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000

080047c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e049      	b.n	800486e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fbde 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 fbe0 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d001      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e04a      	b.n	8004926 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <HAL_TIM_Base_Start_IT+0xbc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d013      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_TIM_Base_Start_IT+0xc0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1c      	ldr	r2, [pc, #112]	; (800493c <HAL_TIM_Base_Start_IT+0xc4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_TIM_Base_Start_IT+0xc8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x6c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_TIM_Base_Start_IT+0xcc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d115      	bne.n	8004910 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d015      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0xaa>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d011      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	e008      	b.n	8004922 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e000      	b.n	8004924 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40013400 	.word	0x40013400
 8004944:	40014000 	.word	0x40014000
 8004948:	00010007 	.word	0x00010007

0800494c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e049      	b.n	80049f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f841 	bl	80049fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 fb1e 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start+0x24>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e03c      	b.n	8004aae <HAL_TIM_PWM_Start+0x9e>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d109      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x3e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e02f      	b.n	8004aae <HAL_TIM_PWM_Start+0x9e>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d109      	bne.n	8004a68 <HAL_TIM_PWM_Start+0x58>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e022      	b.n	8004aae <HAL_TIM_PWM_Start+0x9e>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d109      	bne.n	8004a82 <HAL_TIM_PWM_Start+0x72>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	e015      	b.n	8004aae <HAL_TIM_PWM_Start+0x9e>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d109      	bne.n	8004a9c <HAL_TIM_PWM_Start+0x8c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e008      	b.n	8004aae <HAL_TIM_PWM_Start+0x9e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e097      	b.n	8004be6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_PWM_Start+0xb6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac4:	e023      	b.n	8004b0e <HAL_TIM_PWM_Start+0xfe>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0xc6>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad4:	e01b      	b.n	8004b0e <HAL_TIM_PWM_Start+0xfe>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0xd6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae4:	e013      	b.n	8004b0e <HAL_TIM_PWM_Start+0xfe>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0xe6>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af4:	e00b      	b.n	8004b0e <HAL_TIM_PWM_Start+0xfe>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0xf6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b04:	e003      	b.n	8004b0e <HAL_TIM_PWM_Start+0xfe>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fe58 	bl	80057cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a33      	ldr	r2, [pc, #204]	; (8004bf0 <HAL_TIM_PWM_Start+0x1e0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_TIM_PWM_Start+0x13e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a32      	ldr	r2, [pc, #200]	; (8004bf4 <HAL_TIM_PWM_Start+0x1e4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00e      	beq.n	8004b4e <HAL_TIM_PWM_Start+0x13e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a30      	ldr	r2, [pc, #192]	; (8004bf8 <HAL_TIM_PWM_Start+0x1e8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_TIM_PWM_Start+0x13e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <HAL_TIM_PWM_Start+0x1ec>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d004      	beq.n	8004b4e <HAL_TIM_PWM_Start+0x13e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <HAL_TIM_PWM_Start+0x1f0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_PWM_Start+0x142>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_TIM_PWM_Start+0x144>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <HAL_TIM_PWM_Start+0x1e0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d018      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x194>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d013      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x194>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <HAL_TIM_PWM_Start+0x1f4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x194>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <HAL_TIM_PWM_Start+0x1f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x194>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <HAL_TIM_PWM_Start+0x1e4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x194>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <HAL_TIM_PWM_Start+0x1e8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d115      	bne.n	8004bd0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_TIM_PWM_Start+0x1fc>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d015      	beq.n	8004be2 <HAL_TIM_PWM_Start+0x1d2>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d011      	beq.n	8004be2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	e008      	b.n	8004be2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e000      	b.n	8004be4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	00010007 	.word	0x00010007

08004c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e0ff      	b.n	8004e2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b14      	cmp	r3, #20
 8004c3a:	f200 80f0 	bhi.w	8004e1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c99 	.word	0x08004c99
 8004c48:	08004e1f 	.word	0x08004e1f
 8004c4c:	08004e1f 	.word	0x08004e1f
 8004c50:	08004e1f 	.word	0x08004e1f
 8004c54:	08004cd9 	.word	0x08004cd9
 8004c58:	08004e1f 	.word	0x08004e1f
 8004c5c:	08004e1f 	.word	0x08004e1f
 8004c60:	08004e1f 	.word	0x08004e1f
 8004c64:	08004d1b 	.word	0x08004d1b
 8004c68:	08004e1f 	.word	0x08004e1f
 8004c6c:	08004e1f 	.word	0x08004e1f
 8004c70:	08004e1f 	.word	0x08004e1f
 8004c74:	08004d5b 	.word	0x08004d5b
 8004c78:	08004e1f 	.word	0x08004e1f
 8004c7c:	08004e1f 	.word	0x08004e1f
 8004c80:	08004e1f 	.word	0x08004e1f
 8004c84:	08004d9d 	.word	0x08004d9d
 8004c88:	08004e1f 	.word	0x08004e1f
 8004c8c:	08004e1f 	.word	0x08004e1f
 8004c90:	08004e1f 	.word	0x08004e1f
 8004c94:	08004ddd 	.word	0x08004ddd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fa24 	bl	80050ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0208 	orr.w	r2, r2, #8
 8004cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0204 	bic.w	r2, r2, #4
 8004cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6999      	ldr	r1, [r3, #24]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
      break;
 8004cd6:	e0a5      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fa94 	bl	800520c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6999      	ldr	r1, [r3, #24]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	021a      	lsls	r2, r3, #8
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	619a      	str	r2, [r3, #24]
      break;
 8004d18:	e084      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fafd 	bl	8005320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0208 	orr.w	r2, r2, #8
 8004d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0204 	bic.w	r2, r2, #4
 8004d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69d9      	ldr	r1, [r3, #28]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	61da      	str	r2, [r3, #28]
      break;
 8004d58:	e064      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fb65 	bl	8005430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69d9      	ldr	r1, [r3, #28]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	021a      	lsls	r2, r3, #8
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	61da      	str	r2, [r3, #28]
      break;
 8004d9a:	e043      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fbae 	bl	8005504 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0204 	bic.w	r2, r2, #4
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dda:	e023      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fbf2 	bl	80055cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	021a      	lsls	r2, r3, #8
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e1c:	e002      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
      break;
 8004e22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop

08004e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_ConfigClockSource+0x1c>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0b6      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x18a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e90:	d03e      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0xd8>
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e96:	f200 8087 	bhi.w	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9e:	f000 8086 	beq.w	8004fae <HAL_TIM_ConfigClockSource+0x176>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d87f      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004ea8:	2b70      	cmp	r3, #112	; 0x70
 8004eaa:	d01a      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0xaa>
 8004eac:	2b70      	cmp	r3, #112	; 0x70
 8004eae:	d87b      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004eb0:	2b60      	cmp	r3, #96	; 0x60
 8004eb2:	d050      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x11e>
 8004eb4:	2b60      	cmp	r3, #96	; 0x60
 8004eb6:	d877      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004eb8:	2b50      	cmp	r3, #80	; 0x50
 8004eba:	d03c      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0xfe>
 8004ebc:	2b50      	cmp	r3, #80	; 0x50
 8004ebe:	d873      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d058      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x13e>
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d86f      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004ec8:	2b30      	cmp	r3, #48	; 0x30
 8004eca:	d064      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15e>
 8004ecc:	2b30      	cmp	r3, #48	; 0x30
 8004ece:	d86b      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d060      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15e>
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d867      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05c      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15e>
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d05a      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15e>
 8004ee0:	e062      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6899      	ldr	r1, [r3, #8]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f000 fc4b 	bl	800578c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	609a      	str	r2, [r3, #8]
      break;
 8004f0e:	e04f      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6899      	ldr	r1, [r3, #8]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f000 fc34 	bl	800578c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f32:	609a      	str	r2, [r3, #8]
      break;
 8004f34:	e03c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 fba8 	bl	8005698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2150      	movs	r1, #80	; 0x50
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fc01 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 8004f54:	e02c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 fbc7 	bl	80056f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2160      	movs	r1, #96	; 0x60
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fbf1 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 8004f74:	e01c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 fb88 	bl	8005698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2140      	movs	r1, #64	; 0x40
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fbe1 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 8004f94:	e00c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f000 fbd8 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 8004fa6:	e003      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e000      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3c      	ldr	r2, [pc, #240]	; (80050d0 <TIM_Base_SetConfig+0x104>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00f      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d00b      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a39      	ldr	r2, [pc, #228]	; (80050d4 <TIM_Base_SetConfig+0x108>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a38      	ldr	r2, [pc, #224]	; (80050d8 <TIM_Base_SetConfig+0x10c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_Base_SetConfig+0x38>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a37      	ldr	r2, [pc, #220]	; (80050dc <TIM_Base_SetConfig+0x110>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2d      	ldr	r2, [pc, #180]	; (80050d0 <TIM_Base_SetConfig+0x104>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005024:	d017      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <TIM_Base_SetConfig+0x108>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <TIM_Base_SetConfig+0x10c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a28      	ldr	r2, [pc, #160]	; (80050dc <TIM_Base_SetConfig+0x110>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <TIM_Base_SetConfig+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00f      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a11      	ldr	r2, [pc, #68]	; (80050dc <TIM_Base_SetConfig+0x110>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00b      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0f      	ldr	r2, [pc, #60]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0xe8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0e      	ldr	r2, [pc, #56]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	615a      	str	r2, [r3, #20]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40013400 	.word	0x40013400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800

080050ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0302 	bic.w	r3, r3, #2
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a2c      	ldr	r2, [pc, #176]	; (80051f8 <TIM_OC1_SetConfig+0x10c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00f      	beq.n	800516c <TIM_OC1_SetConfig+0x80>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <TIM_OC1_SetConfig+0x110>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00b      	beq.n	800516c <TIM_OC1_SetConfig+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a2a      	ldr	r2, [pc, #168]	; (8005200 <TIM_OC1_SetConfig+0x114>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_OC1_SetConfig+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a29      	ldr	r2, [pc, #164]	; (8005204 <TIM_OC1_SetConfig+0x118>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC1_SetConfig+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a28      	ldr	r2, [pc, #160]	; (8005208 <TIM_OC1_SetConfig+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0308 	bic.w	r3, r3, #8
 8005172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1b      	ldr	r2, [pc, #108]	; (80051f8 <TIM_OC1_SetConfig+0x10c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00f      	beq.n	80051ae <TIM_OC1_SetConfig+0xc2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <TIM_OC1_SetConfig+0x110>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_OC1_SetConfig+0xc2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a19      	ldr	r2, [pc, #100]	; (8005200 <TIM_OC1_SetConfig+0x114>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_OC1_SetConfig+0xc2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a18      	ldr	r2, [pc, #96]	; (8005204 <TIM_OC1_SetConfig+0x118>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC1_SetConfig+0xc2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a17      	ldr	r2, [pc, #92]	; (8005208 <TIM_OC1_SetConfig+0x11c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d111      	bne.n	80051d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40013400 	.word	0x40013400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800

0800520c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0210 	bic.w	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0320 	bic.w	r3, r3, #32
 800525a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a28      	ldr	r2, [pc, #160]	; (800530c <TIM_OC2_SetConfig+0x100>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC2_SetConfig+0x6c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a27      	ldr	r2, [pc, #156]	; (8005310 <TIM_OC2_SetConfig+0x104>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d10d      	bne.n	8005294 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1d      	ldr	r2, [pc, #116]	; (800530c <TIM_OC2_SetConfig+0x100>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00f      	beq.n	80052bc <TIM_OC2_SetConfig+0xb0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <TIM_OC2_SetConfig+0x104>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_OC2_SetConfig+0xb0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <TIM_OC2_SetConfig+0x108>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_OC2_SetConfig+0xb0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <TIM_OC2_SetConfig+0x10c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC2_SetConfig+0xb0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a19      	ldr	r2, [pc, #100]	; (800531c <TIM_OC2_SetConfig+0x110>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d113      	bne.n	80052e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052c2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40013400 	.word	0x40013400
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800

08005320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800536c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a27      	ldr	r2, [pc, #156]	; (800541c <TIM_OC3_SetConfig+0xfc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_OC3_SetConfig+0x6a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a26      	ldr	r2, [pc, #152]	; (8005420 <TIM_OC3_SetConfig+0x100>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10d      	bne.n	80053a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <TIM_OC3_SetConfig+0xfc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00f      	beq.n	80053ce <TIM_OC3_SetConfig+0xae>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <TIM_OC3_SetConfig+0x100>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_OC3_SetConfig+0xae>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <TIM_OC3_SetConfig+0x104>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_OC3_SetConfig+0xae>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a19      	ldr	r2, [pc, #100]	; (8005428 <TIM_OC3_SetConfig+0x108>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_OC3_SetConfig+0xae>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a18      	ldr	r2, [pc, #96]	; (800542c <TIM_OC3_SetConfig+0x10c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d113      	bne.n	80053f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	621a      	str	r2, [r3, #32]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400
 800542c:	40014800 	.word	0x40014800

08005430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800547e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <TIM_OC4_SetConfig+0xc0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00f      	beq.n	80054b4 <TIM_OC4_SetConfig+0x84>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <TIM_OC4_SetConfig+0xc4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_OC4_SetConfig+0x84>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <TIM_OC4_SetConfig+0xc8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC4_SetConfig+0x84>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a15      	ldr	r2, [pc, #84]	; (80054fc <TIM_OC4_SetConfig+0xcc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC4_SetConfig+0x84>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a14      	ldr	r2, [pc, #80]	; (8005500 <TIM_OC4_SetConfig+0xd0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d109      	bne.n	80054c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40013400 	.word	0x40013400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800

08005504 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005548:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <TIM_OC5_SetConfig+0xb4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_OC5_SetConfig+0x7a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a16      	ldr	r2, [pc, #88]	; (80055bc <TIM_OC5_SetConfig+0xb8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_OC5_SetConfig+0x7a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <TIM_OC5_SetConfig+0xbc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_OC5_SetConfig+0x7a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <TIM_OC5_SetConfig+0xc0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC5_SetConfig+0x7a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <TIM_OC5_SetConfig+0xc4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d109      	bne.n	8005592 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40013400 	.word	0x40013400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800

080055cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	051b      	lsls	r3, r3, #20
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a18      	ldr	r2, [pc, #96]	; (8005684 <TIM_OC6_SetConfig+0xb8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00f      	beq.n	8005648 <TIM_OC6_SetConfig+0x7c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a17      	ldr	r2, [pc, #92]	; (8005688 <TIM_OC6_SetConfig+0xbc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00b      	beq.n	8005648 <TIM_OC6_SetConfig+0x7c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a16      	ldr	r2, [pc, #88]	; (800568c <TIM_OC6_SetConfig+0xc0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_OC6_SetConfig+0x7c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <TIM_OC6_SetConfig+0xc4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_OC6_SetConfig+0x7c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a14      	ldr	r2, [pc, #80]	; (8005694 <TIM_OC6_SetConfig+0xc8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d109      	bne.n	800565c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	029b      	lsls	r3, r3, #10
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40013400 	.word	0x40013400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800

08005698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 030a 	bic.w	r3, r3, #10
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b087      	sub	sp, #28
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0210 	bic.w	r2, r3, #16
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	f043 0307 	orr.w	r3, r3, #7
 8005778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	021a      	lsls	r2, r3, #8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2201      	movs	r2, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1a      	ldr	r2, [r3, #32]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	401a      	ands	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	fa01 f303 	lsl.w	r3, r1, r3
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800582c:	2302      	movs	r3, #2
 800582e:	e063      	b.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2b      	ldr	r2, [pc, #172]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d108      	bne.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800586a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d018      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a2:	d013      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00e      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a17      	ldr	r2, [pc, #92]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a12      	ldr	r2, [pc, #72]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a13      	ldr	r2, [pc, #76]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10c      	bne.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40013400 	.word	0x40013400
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40014000 	.word	0x40014000

08005918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005930:	2302      	movs	r3, #2
 8005932:	e065      	b.n	8005a00 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d115      	bne.n	80059ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	051b      	lsls	r3, r3, #20
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40013400 	.word	0x40013400

08005a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e040      	b.n	8005aa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fb fb4c 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	; 0x24
 8005a40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fc72 	bl	800633c <UART_SetConfig>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e022      	b.n	8005aa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fe3a 	bl	80066e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fec1 	bl	8006828 <UART_CheckIdleState>
 8005aa6:	4603      	mov	r3, r0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d178      	bne.n	8005bba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_UART_Transmit+0x24>
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e071      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2221      	movs	r2, #33	; 0x21
 8005ae4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ae6:	f7fb fc15 	bl	8001314 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d108      	bne.n	8005b18 <HAL_UART_Transmit+0x68>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	e003      	b.n	8005b20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b20:	e030      	b.n	8005b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 ff23 	bl	8006978 <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e03c      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	881a      	ldrh	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b54:	b292      	uxth	r2, r2
 8005b56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	e008      	b.n	8005b72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1c8      	bne.n	8005b22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 feec 	bl	8006978 <UART_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e005      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e000      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005bba:	2302      	movs	r3, #2
  }
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	f040 80a3 	bne.w	8005d26 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_UART_Receive+0x28>
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e09b      	b.n	8005d28 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2222      	movs	r2, #34	; 0x22
 8005bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c06:	f7fb fb85 	bl	8001314 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c24:	d10e      	bne.n	8005c44 <HAL_UART_Receive+0x80>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <HAL_UART_Receive+0x76>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c38:	e01a      	b.n	8005c70 <HAL_UART_Receive+0xac>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22ff      	movs	r2, #255	; 0xff
 8005c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c42:	e015      	b.n	8005c70 <HAL_UART_Receive+0xac>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10d      	bne.n	8005c68 <HAL_UART_Receive+0xa4>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_UART_Receive+0x9a>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	22ff      	movs	r2, #255	; 0xff
 8005c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c5c:	e008      	b.n	8005c70 <HAL_UART_Receive+0xac>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	227f      	movs	r2, #127	; 0x7f
 8005c62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c66:	e003      	b.n	8005c70 <HAL_UART_Receive+0xac>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	d108      	bne.n	8005c94 <HAL_UART_Receive+0xd0>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e003      	b.n	8005c9c <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c9c:	e037      	b.n	8005d0e <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2120      	movs	r1, #32
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fe65 	bl	8006978 <UART_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e033      	b.n	8005d28 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	8a7b      	ldrh	r3, [r7, #18]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	3302      	adds	r3, #2
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	e00d      	b.n	8005cfc <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	8a7b      	ldrh	r3, [r7, #18]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4013      	ands	r3, r2
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1c1      	bne.n	8005c9e <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e000      	b.n	8005d28 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8005d26:	2302      	movs	r3, #2
  }
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b0ba      	sub	sp, #232	; 0xe8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d5e:	4013      	ands	r3, r2
 8005d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d115      	bne.n	8005d98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00f      	beq.n	8005d98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 82ab 	beq.w	80062e4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
      }
      return;
 8005d96:	e2a5      	b.n	80062e4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8117 	beq.w	8005fd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005dae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005db2:	4b85      	ldr	r3, [pc, #532]	; (8005fc8 <HAL_UART_IRQHandler+0x298>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 810a 	beq.w	8005fd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d011      	beq.n	8005dec <HAL_UART_IRQHandler+0xbc>
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de2:	f043 0201 	orr.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d011      	beq.n	8005e1c <HAL_UART_IRQHandler+0xec>
 8005df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d011      	beq.n	8005e4c <HAL_UART_IRQHandler+0x11c>
 8005e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e42:	f043 0202 	orr.w	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2208      	movs	r2, #8
 8005e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7e:	f043 0208 	orr.w	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d012      	beq.n	8005eba <HAL_UART_IRQHandler+0x18a>
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8211 	beq.w	80062e8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d005      	beq.n	8005f12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d04f      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fd97 	bl	8006a46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d141      	bne.n	8005faa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1d9      	bne.n	8005f26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d013      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7e:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <HAL_UART_IRQHandler+0x29c>)
 8005f80:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fc fc6a 	bl	8002860 <HAL_DMA_Abort_IT>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d017      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	e00f      	b.n	8005fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9b4 	bl	8006310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa8:	e00b      	b.n	8005fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9b0 	bl	8006310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	e007      	b.n	8005fc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9ac 	bl	8006310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005fc0:	e192      	b.n	80062e8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc2:	bf00      	nop
    return;
 8005fc4:	e190      	b.n	80062e8 <HAL_UART_IRQHandler+0x5b8>
 8005fc6:	bf00      	nop
 8005fc8:	04000120 	.word	0x04000120
 8005fcc:	08006b0f 	.word	0x08006b0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	f040 814b 	bne.w	8006270 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8144 	beq.w	8006270 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 813d 	beq.w	8006270 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	f040 80b5 	bne.w	8006178 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800601a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8164 	beq.w	80062ec <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800602a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800602e:	429a      	cmp	r2, r3
 8006030:	f080 815c 	bcs.w	80062ec <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800603a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b20      	cmp	r3, #32
 8006046:	f000 8086 	beq.w	8006156 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800605e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006078:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006080:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800608c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1da      	bne.n	800604a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3308      	adds	r3, #8
 800609a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3308      	adds	r3, #8
 80060b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e1      	bne.n	8006094 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3308      	adds	r3, #8
 80060d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e3      	bne.n	80060d0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006126:	f023 0310 	bic.w	r3, r3, #16
 800612a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006138:	65bb      	str	r3, [r7, #88]	; 0x58
 800613a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800613e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e4      	bne.n	8006116 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006150:	4618      	mov	r0, r3
 8006152:	f7fc fb4c 	bl	80027ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006168:	b29b      	uxth	r3, r3
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	b29b      	uxth	r3, r3
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8d7 	bl	8006324 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006176:	e0b9      	b.n	80062ec <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006184:	b29b      	uxth	r3, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80ab 	beq.w	80062f0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800619a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80a6 	beq.w	80062f0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061c6:	647b      	str	r3, [r7, #68]	; 0x44
 80061c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e4      	bne.n	80061a4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	623b      	str	r3, [r7, #32]
   return(result);
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e3      	bne.n	80061da <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	60fb      	str	r3, [r7, #12]
   return(result);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0310 	bic.w	r3, r3, #16
 800623a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	69b9      	ldr	r1, [r7, #24]
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	617b      	str	r3, [r7, #20]
   return(result);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e4      	bne.n	8006226 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f85b 	bl	8006324 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800626e:	e03f      	b.n	80062f0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00e      	beq.n	800629a <HAL_UART_IRQHandler+0x56a>
 800627c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006290:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fc7b 	bl	8006b8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006298:	e02d      	b.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00e      	beq.n	80062c4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01c      	beq.n	80062f4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
    }
    return;
 80062c2:	e017      	b.n	80062f4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00c      	beq.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fc2c 	bl	8006b3a <UART_EndTransmit_IT>
    return;
 80062e2:	e008      	b.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80062e4:	bf00      	nop
 80062e6:	e006      	b.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80062e8:	bf00      	nop
 80062ea:	e004      	b.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80062ec:	bf00      	nop
 80062ee:	e002      	b.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80062f4:	bf00      	nop
  }

}
 80062f6:	37e8      	adds	r7, #232	; 0xe8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800636a:	f023 030c 	bic.w	r3, r3, #12
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	6979      	ldr	r1, [r7, #20]
 8006374:	430b      	orrs	r3, r1
 8006376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4aa7      	ldr	r2, [pc, #668]	; (8006654 <UART_SetConfig+0x318>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d120      	bne.n	80063fe <UART_SetConfig+0xc2>
 80063bc:	4ba6      	ldr	r3, [pc, #664]	; (8006658 <UART_SetConfig+0x31c>)
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d817      	bhi.n	80063f8 <UART_SetConfig+0xbc>
 80063c8:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <UART_SetConfig+0x94>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	080063e1 	.word	0x080063e1
 80063d4:	080063ed 	.word	0x080063ed
 80063d8:	080063f3 	.word	0x080063f3
 80063dc:	080063e7 	.word	0x080063e7
 80063e0:	2301      	movs	r3, #1
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e0b5      	b.n	8006552 <UART_SetConfig+0x216>
 80063e6:	2302      	movs	r3, #2
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e0b2      	b.n	8006552 <UART_SetConfig+0x216>
 80063ec:	2304      	movs	r3, #4
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e0af      	b.n	8006552 <UART_SetConfig+0x216>
 80063f2:	2308      	movs	r3, #8
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e0ac      	b.n	8006552 <UART_SetConfig+0x216>
 80063f8:	2310      	movs	r3, #16
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e0a9      	b.n	8006552 <UART_SetConfig+0x216>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a96      	ldr	r2, [pc, #600]	; (800665c <UART_SetConfig+0x320>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d124      	bne.n	8006452 <UART_SetConfig+0x116>
 8006408:	4b93      	ldr	r3, [pc, #588]	; (8006658 <UART_SetConfig+0x31c>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006410:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006414:	d011      	beq.n	800643a <UART_SetConfig+0xfe>
 8006416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800641a:	d817      	bhi.n	800644c <UART_SetConfig+0x110>
 800641c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006420:	d011      	beq.n	8006446 <UART_SetConfig+0x10a>
 8006422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006426:	d811      	bhi.n	800644c <UART_SetConfig+0x110>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <UART_SetConfig+0xf8>
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d006      	beq.n	8006440 <UART_SetConfig+0x104>
 8006432:	e00b      	b.n	800644c <UART_SetConfig+0x110>
 8006434:	2300      	movs	r3, #0
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e08b      	b.n	8006552 <UART_SetConfig+0x216>
 800643a:	2302      	movs	r3, #2
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e088      	b.n	8006552 <UART_SetConfig+0x216>
 8006440:	2304      	movs	r3, #4
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e085      	b.n	8006552 <UART_SetConfig+0x216>
 8006446:	2308      	movs	r3, #8
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e082      	b.n	8006552 <UART_SetConfig+0x216>
 800644c:	2310      	movs	r3, #16
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e07f      	b.n	8006552 <UART_SetConfig+0x216>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a82      	ldr	r2, [pc, #520]	; (8006660 <UART_SetConfig+0x324>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d124      	bne.n	80064a6 <UART_SetConfig+0x16a>
 800645c:	4b7e      	ldr	r3, [pc, #504]	; (8006658 <UART_SetConfig+0x31c>)
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006464:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006468:	d011      	beq.n	800648e <UART_SetConfig+0x152>
 800646a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800646e:	d817      	bhi.n	80064a0 <UART_SetConfig+0x164>
 8006470:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006474:	d011      	beq.n	800649a <UART_SetConfig+0x15e>
 8006476:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800647a:	d811      	bhi.n	80064a0 <UART_SetConfig+0x164>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <UART_SetConfig+0x14c>
 8006480:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006484:	d006      	beq.n	8006494 <UART_SetConfig+0x158>
 8006486:	e00b      	b.n	80064a0 <UART_SetConfig+0x164>
 8006488:	2300      	movs	r3, #0
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e061      	b.n	8006552 <UART_SetConfig+0x216>
 800648e:	2302      	movs	r3, #2
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e05e      	b.n	8006552 <UART_SetConfig+0x216>
 8006494:	2304      	movs	r3, #4
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e05b      	b.n	8006552 <UART_SetConfig+0x216>
 800649a:	2308      	movs	r3, #8
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e058      	b.n	8006552 <UART_SetConfig+0x216>
 80064a0:	2310      	movs	r3, #16
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e055      	b.n	8006552 <UART_SetConfig+0x216>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a6e      	ldr	r2, [pc, #440]	; (8006664 <UART_SetConfig+0x328>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d124      	bne.n	80064fa <UART_SetConfig+0x1be>
 80064b0:	4b69      	ldr	r3, [pc, #420]	; (8006658 <UART_SetConfig+0x31c>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80064b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064bc:	d011      	beq.n	80064e2 <UART_SetConfig+0x1a6>
 80064be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c2:	d817      	bhi.n	80064f4 <UART_SetConfig+0x1b8>
 80064c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c8:	d011      	beq.n	80064ee <UART_SetConfig+0x1b2>
 80064ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ce:	d811      	bhi.n	80064f4 <UART_SetConfig+0x1b8>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <UART_SetConfig+0x1a0>
 80064d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d8:	d006      	beq.n	80064e8 <UART_SetConfig+0x1ac>
 80064da:	e00b      	b.n	80064f4 <UART_SetConfig+0x1b8>
 80064dc:	2300      	movs	r3, #0
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e037      	b.n	8006552 <UART_SetConfig+0x216>
 80064e2:	2302      	movs	r3, #2
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e034      	b.n	8006552 <UART_SetConfig+0x216>
 80064e8:	2304      	movs	r3, #4
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e031      	b.n	8006552 <UART_SetConfig+0x216>
 80064ee:	2308      	movs	r3, #8
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e02e      	b.n	8006552 <UART_SetConfig+0x216>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e02b      	b.n	8006552 <UART_SetConfig+0x216>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a5a      	ldr	r2, [pc, #360]	; (8006668 <UART_SetConfig+0x32c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d124      	bne.n	800654e <UART_SetConfig+0x212>
 8006504:	4b54      	ldr	r3, [pc, #336]	; (8006658 <UART_SetConfig+0x31c>)
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800650c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006510:	d011      	beq.n	8006536 <UART_SetConfig+0x1fa>
 8006512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006516:	d817      	bhi.n	8006548 <UART_SetConfig+0x20c>
 8006518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800651c:	d011      	beq.n	8006542 <UART_SetConfig+0x206>
 800651e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006522:	d811      	bhi.n	8006548 <UART_SetConfig+0x20c>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <UART_SetConfig+0x1f4>
 8006528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800652c:	d006      	beq.n	800653c <UART_SetConfig+0x200>
 800652e:	e00b      	b.n	8006548 <UART_SetConfig+0x20c>
 8006530:	2300      	movs	r3, #0
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e00d      	b.n	8006552 <UART_SetConfig+0x216>
 8006536:	2302      	movs	r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e00a      	b.n	8006552 <UART_SetConfig+0x216>
 800653c:	2304      	movs	r3, #4
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e007      	b.n	8006552 <UART_SetConfig+0x216>
 8006542:	2308      	movs	r3, #8
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e004      	b.n	8006552 <UART_SetConfig+0x216>
 8006548:	2310      	movs	r3, #16
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e001      	b.n	8006552 <UART_SetConfig+0x216>
 800654e:	2310      	movs	r3, #16
 8006550:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800655a:	d15b      	bne.n	8006614 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800655c:	7ffb      	ldrb	r3, [r7, #31]
 800655e:	2b08      	cmp	r3, #8
 8006560:	d827      	bhi.n	80065b2 <UART_SetConfig+0x276>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x22c>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	0800658d 	.word	0x0800658d
 800656c:	08006595 	.word	0x08006595
 8006570:	0800659d 	.word	0x0800659d
 8006574:	080065b3 	.word	0x080065b3
 8006578:	080065a3 	.word	0x080065a3
 800657c:	080065b3 	.word	0x080065b3
 8006580:	080065b3 	.word	0x080065b3
 8006584:	080065b3 	.word	0x080065b3
 8006588:	080065ab 	.word	0x080065ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fd ff28 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8006590:	61b8      	str	r0, [r7, #24]
        break;
 8006592:	e013      	b.n	80065bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006594:	f7fd ff46 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8006598:	61b8      	str	r0, [r7, #24]
        break;
 800659a:	e00f      	b.n	80065bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800659c:	4b33      	ldr	r3, [pc, #204]	; (800666c <UART_SetConfig+0x330>)
 800659e:	61bb      	str	r3, [r7, #24]
        break;
 80065a0:	e00c      	b.n	80065bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a2:	f7fd fea7 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80065a6:	61b8      	str	r0, [r7, #24]
        break;
 80065a8:	e008      	b.n	80065bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ae:	61bb      	str	r3, [r7, #24]
        break;
 80065b0:	e004      	b.n	80065bc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	77bb      	strb	r3, [r7, #30]
        break;
 80065ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8082 	beq.w	80066c8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	005a      	lsls	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	441a      	add	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b0f      	cmp	r3, #15
 80065de:	d916      	bls.n	800660e <UART_SetConfig+0x2d2>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e6:	d212      	bcs.n	800660e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f023 030f 	bic.w	r3, r3, #15
 80065f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	89fb      	ldrh	r3, [r7, #14]
 8006600:	4313      	orrs	r3, r2
 8006602:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	89fa      	ldrh	r2, [r7, #14]
 800660a:	60da      	str	r2, [r3, #12]
 800660c:	e05c      	b.n	80066c8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	77bb      	strb	r3, [r7, #30]
 8006612:	e059      	b.n	80066c8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006614:	7ffb      	ldrb	r3, [r7, #31]
 8006616:	2b08      	cmp	r3, #8
 8006618:	d835      	bhi.n	8006686 <UART_SetConfig+0x34a>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x2e4>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006645 	.word	0x08006645
 8006624:	0800664d 	.word	0x0800664d
 8006628:	08006671 	.word	0x08006671
 800662c:	08006687 	.word	0x08006687
 8006630:	08006677 	.word	0x08006677
 8006634:	08006687 	.word	0x08006687
 8006638:	08006687 	.word	0x08006687
 800663c:	08006687 	.word	0x08006687
 8006640:	0800667f 	.word	0x0800667f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006644:	f7fd fecc 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8006648:	61b8      	str	r0, [r7, #24]
        break;
 800664a:	e021      	b.n	8006690 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800664c:	f7fd feea 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8006650:	61b8      	str	r0, [r7, #24]
        break;
 8006652:	e01d      	b.n	8006690 <UART_SetConfig+0x354>
 8006654:	40013800 	.word	0x40013800
 8006658:	40021000 	.word	0x40021000
 800665c:	40004400 	.word	0x40004400
 8006660:	40004800 	.word	0x40004800
 8006664:	40004c00 	.word	0x40004c00
 8006668:	40005000 	.word	0x40005000
 800666c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <UART_SetConfig+0x3a4>)
 8006672:	61bb      	str	r3, [r7, #24]
        break;
 8006674:	e00c      	b.n	8006690 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006676:	f7fd fe3d 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 800667a:	61b8      	str	r0, [r7, #24]
        break;
 800667c:	e008      	b.n	8006690 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006682:	61bb      	str	r3, [r7, #24]
        break;
 8006684:	e004      	b.n	8006690 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	77bb      	strb	r3, [r7, #30]
        break;
 800668e:	bf00      	nop
    }

    if (pclk != 0U)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	085a      	lsrs	r2, r3, #1
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	441a      	add	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b0f      	cmp	r3, #15
 80066ae:	d909      	bls.n	80066c4 <UART_SetConfig+0x388>
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b6:	d205      	bcs.n	80066c4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	e001      	b.n	80066c8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	007a1200 	.word	0x007a1200

080066e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01a      	beq.n	80067fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e2:	d10a      	bne.n	80067fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b098      	sub	sp, #96	; 0x60
 800682c:	af02      	add	r7, sp, #8
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006838:	f7fa fd6c 	bl	8001314 <HAL_GetTick>
 800683c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d12e      	bne.n	80068aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800684c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006854:	2200      	movs	r2, #0
 8006856:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f88c 	bl	8006978 <UART_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d021      	beq.n	80068aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687a:	653b      	str	r3, [r7, #80]	; 0x50
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006884:	647b      	str	r3, [r7, #68]	; 0x44
 8006886:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800688a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e062      	b.n	8006970 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d149      	bne.n	800694c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c0:	2200      	movs	r2, #0
 80068c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f856 	bl	8006978 <UART_WaitOnFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d03c      	beq.n	800694c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	623b      	str	r3, [r7, #32]
   return(result);
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30
 80068f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e6      	bne.n	80068d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	60fb      	str	r3, [r7, #12]
   return(result);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0301 	bic.w	r3, r3, #1
 800691a:	64bb      	str	r3, [r7, #72]	; 0x48
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3308      	adds	r3, #8
 8006922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006924:	61fa      	str	r2, [r7, #28]
 8006926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	69b9      	ldr	r1, [r7, #24]
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	617b      	str	r3, [r7, #20]
   return(result);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e011      	b.n	8006970 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3758      	adds	r7, #88	; 0x58
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4613      	mov	r3, r2
 8006986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006988:	e049      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d045      	beq.n	8006a1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006992:	f7fa fcbf 	bl	8001314 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d302      	bcc.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e048      	b.n	8006a3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d031      	beq.n	8006a1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d110      	bne.n	80069ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2208      	movs	r2, #8
 80069ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f838 	bl	8006a46 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2208      	movs	r2, #8
 80069da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e029      	b.n	8006a3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f8:	d111      	bne.n	8006a1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f81e 	bl	8006a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e00f      	b.n	8006a3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4013      	ands	r3, r2
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	bf0c      	ite	eq
 8006a2e:	2301      	moveq	r3, #1
 8006a30:	2300      	movne	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d0a6      	beq.n	800698a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b095      	sub	sp, #84	; 0x54
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3308      	adds	r3, #8
 8006a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e5      	bne.n	8006a80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d118      	bne.n	8006aee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f023 0310 	bic.w	r3, r3, #16
 8006ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6979      	ldr	r1, [r7, #20]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b02:	bf00      	nop
 8006b04:	3754      	adds	r7, #84	; 0x54
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff fbef 	bl	8006310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b088      	sub	sp, #32
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6979      	ldr	r1, [r7, #20]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff fbbb 	bl	80062fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b86:	bf00      	nop
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
	...

08006ba4 <__libc_init_array>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	4d0d      	ldr	r5, [pc, #52]	; (8006bdc <__libc_init_array+0x38>)
 8006ba8:	4c0d      	ldr	r4, [pc, #52]	; (8006be0 <__libc_init_array+0x3c>)
 8006baa:	1b64      	subs	r4, r4, r5
 8006bac:	10a4      	asrs	r4, r4, #2
 8006bae:	2600      	movs	r6, #0
 8006bb0:	42a6      	cmp	r6, r4
 8006bb2:	d109      	bne.n	8006bc8 <__libc_init_array+0x24>
 8006bb4:	4d0b      	ldr	r5, [pc, #44]	; (8006be4 <__libc_init_array+0x40>)
 8006bb6:	4c0c      	ldr	r4, [pc, #48]	; (8006be8 <__libc_init_array+0x44>)
 8006bb8:	f000 f820 	bl	8006bfc <_init>
 8006bbc:	1b64      	subs	r4, r4, r5
 8006bbe:	10a4      	asrs	r4, r4, #2
 8006bc0:	2600      	movs	r6, #0
 8006bc2:	42a6      	cmp	r6, r4
 8006bc4:	d105      	bne.n	8006bd2 <__libc_init_array+0x2e>
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bcc:	4798      	blx	r3
 8006bce:	3601      	adds	r6, #1
 8006bd0:	e7ee      	b.n	8006bb0 <__libc_init_array+0xc>
 8006bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd6:	4798      	blx	r3
 8006bd8:	3601      	adds	r6, #1
 8006bda:	e7f2      	b.n	8006bc2 <__libc_init_array+0x1e>
 8006bdc:	08006c4c 	.word	0x08006c4c
 8006be0:	08006c4c 	.word	0x08006c4c
 8006be4:	08006c4c 	.word	0x08006c4c
 8006be8:	08006c50 	.word	0x08006c50

08006bec <memset>:
 8006bec:	4402      	add	r2, r0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d100      	bne.n	8006bf6 <memset+0xa>
 8006bf4:	4770      	bx	lr
 8006bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfa:	e7f9      	b.n	8006bf0 <memset+0x4>

08006bfc <_init>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr

08006c08 <_fini>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr
